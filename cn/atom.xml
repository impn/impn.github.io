<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>马攀的技术栈</title>
  
  
  <link href="/cn/atom.xml" rel="self"/>
  
  <link href="https://mapan.tech/cn/"/>
  <updated>2020-05-06T15:13:05.062Z</updated>
  <id>https://mapan.tech/cn/</id>
  
  <author>
    <name>MaPan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020年4月总结</title>
    <link href="https://mapan.tech/cn/f274.html"/>
    <id>https://mapan.tech/cn/f274.html</id>
    <published>2020-04-30T14:19:56.000Z</published>
    <updated>2020-05-06T15:13:05.062Z</updated>
    
    <content type="html"><![CDATA[<p>本站友链第一条：稚晖的博客，这位博主现在已经是30万粉丝的UP主了。为了不拉低up主的友链质量，决定以后保证文章质量的前提下，尽量提高更新频率。</p><p>四月份当当网书香节，买了三本书，分别是</p><ul><li>用户画像：方法论与工程化解决方案</li><li>Hive性能调优实战</li><li>数据仓库工具箱(第3版)——维度建模权威指南</li></ul><p>其中《Hive性能调优实战》已经看完，上一篇文章中提到了一些总结，收获颇丰。<br>《用户画像》这本还没有看，《数据仓库工具箱》这本书讲了太多维度建模的名词，没有业务场景支撑很难理解，书评描述为经典，等以后达到一定高度再看。</p><hr><p>另外看了一本电子书《一年顶十年》作者 彪悍一只猫<br>这本书更像是一本问答书，为什么要做xx? 如何做？书中的信息密度真的比较大，目前我仅仅提炼了一些对当下的我有帮助的一些观点，并尝试应用其中的一小部分。<br>作者传播的一句话，简单明了</p><blockquote><p>让自己变得更好，是解决一切问题的关键</p></blockquote><h3 id="及时掏空自己："><a href="#及时掏空自己：" class="headerlink" title="及时掏空自己："></a>及时掏空自己：</h3><p>通过学习和实践，脑子里会不断增加新的储备，千万不要把这些储备束之高阁，否则就会很快忘掉，一定要及时“派发”出去。</p><h3 id="买经验："><a href="#买经验：" class="headerlink" title="买经验："></a>买经验：</h3><p>进入一个新的领域，最好的方法是向这个领域的专家请教。</p><h3 id="如成为某个领域的高手？"><a href="#如成为某个领域的高手？" class="headerlink" title="如成为某个领域的高手？"></a>如成为某个领域的高手？</h3><p>集中突破训练<br>读透几本书，反复钻研<br>活在高手堆里，很难成为低手。</p><p>用，才是最好的读。</p><h3 id="如何读书？"><a href="#如何读书？" class="headerlink" title="如何读书？"></a>如何读书？</h3><p>写<strong>践行清单</strong></p><ul><li>哪些是我要用的上的？</li><li>针对上面的每一条内容，我该怎么做？</li></ul><h3 id="读书三板斧："><a href="#读书三板斧：" class="headerlink" title="读书三板斧："></a>读书三板斧：</h3><ul><li>重复读</li><li>盯作者</li><li>勤分享</li></ul><h3 id="写作："><a href="#写作：" class="headerlink" title="写作："></a>写作：</h3><ul><li>写作是改运级别的武器</li><li>写作是打造个人品牌的神器</li></ul><h3 id="常被碾压"><a href="#常被碾压" class="headerlink" title="常被碾压"></a>常被碾压</h3><ul><li>向上学，向下帮</li><li>日拱一卒</li></ul><p>现在我正在践行两条：<br><strong>及时掏空自己</strong>和<strong>写作</strong></p><p>书中的信息密度真的比较大，目前我仅仅提炼了一些对当下的我有帮助的一些观点，并尝试应用其中的一小部分。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本站友链第一条：稚晖的博客，这位博主现在已经是30万粉丝的UP主了。为了不拉低up主的友链质量，决定以后保证文章质量的前提下，尽量提高更新频率。&lt;/p&gt;&lt;p&gt;四月份当当网书香节，买了三本书，分别是&lt;/p&gt;&lt;ul&gt;&lt;li&gt;用户画像：方法论与工程化解决方案&lt;/li&gt;&lt;li&gt;Hi
      
    
    </summary>
    
      <category term="月度总结" scheme="https://mapan.tech/cn/categories/%E6%9C%88%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Hive进阶</title>
    <link href="https://mapan.tech/cn/31e5.html"/>
    <id>https://mapan.tech/cn/31e5.html</id>
    <published>2020-04-20T06:26:06.000Z</published>
    <updated>2020-05-06T00:15:16.935Z</updated>
    
    <content type="html"><![CDATA[<p>最近当当网书香节，满100减50，购物车里的书迫不及待的下单买了，5折价格真香。</p><p>拿到手后花了约一周时间把<a href="https://u.dangdang.com/xjGKA">《Hive性能调优实战》</a> 这本看完了。</p><p><img src="/cn/31e5/image-20200505154309203.png" alt="image-20200505154309203"></p><p>由于最近工作中遇到Hive的优化问题，对我来说收获颇丰，让我对Hive有了更深层次的理解。书的主要内容如下：</p><p><img src="/cn/31e5/image-20200505144431706.png" alt="image-20200505144431706"></p><p>总结了一些对我来说比较有帮助的点：</p><h2 id="MUTI-INSERT写法"><a href="#MUTI-INSERT写法" class="headerlink" title="MUTI-INSERT写法"></a>MUTI-INSERT写法</h2><p>找到student_stat表中每个年龄段最早出生和最晚出生的人的出生日期，插入tp分区里：<br>正常来说会这样写：<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">into</span> <span class="keyword">table</span> student_stat <span class="keyword">partition</span>(tp)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">s_age,</span><br><span class="line"><span class="keyword">min</span>(s_birth) stat,</span><br><span class="line"><span class="string">'min'</span> tp</span><br><span class="line"><span class="keyword">from</span> student_tb_txt</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s_age</span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">s_age,</span><br><span class="line"><span class="keyword">max</span>(s_birth) stat,</span><br><span class="line"><span class="string">'max’ tp</span></span><br><span class="line"><span class="string">from student_tb_txt</span></span><br><span class="line"><span class="string">group by s_age;</span></span><br></pre></td></tr></table></figure><p></p><p>上面的HQL会形成5个MR的job，执行过程类似这样</p><p><img src="/cn/31e5/image-20200505145600207.png" alt="image-20200505145600207"></p><p>正常来说，优化会把这个union all改写成两个insert,类似这样：<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--计算max值</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> student_stat <span class="keyword">partition</span>(tp)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    s_age,</span><br><span class="line">    <span class="keyword">max</span>(s_birth) stat, </span><br><span class="line">    <span class="string">'max'</span> tp</span><br><span class="line"><span class="keyword">from</span> student_tb_txt</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s_age;</span><br><span class="line"><span class="comment">--计算min值</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> student_stat <span class="keyword">partition</span>(tp)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">s_age,</span><br><span class="line"><span class="keyword">min</span>(s_birth) stat,</span><br><span class="line"><span class="string">'min'</span> tp</span><br><span class="line"><span class="keyword">from</span> student_tb_txt</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s_age;</span><br></pre></td></tr></table></figure><p></p><p>执行过程会是下面这样，同样是两次表扫描，两次求聚合操作（存在Shuffle）并写入结果表。<br><img src="/cn/31e5/image-20200505145640213.png" alt="image-20200505145640213"></p><p>看起来优化掉了union all操作，计算max和min值的两个job可直接将数据放到student_stat下，减少了一次MapReduce作业，看似方案比较合理，但是实际执行起来反而比优化之前时间更久。其实Hive的早期版本确实可以优化，但是随着Hive版本的迭代，对union操作进行了优化，导致拆分后的代码执行效率更低了。</p><p>那么是否可以只经过一次Table Scan并写入呢？答案是肯定的</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from student_tb_txt</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">into</span> <span class="keyword">table</span> student_stat <span class="keyword">partition</span>(tp)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    s_age,</span><br><span class="line">    <span class="keyword">min</span>(s_birth) stat,</span><br><span class="line">    <span class="string">'min'</span> tp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s_age</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">table</span> student_stat <span class="keyword">partition</span>(tp)</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    s_age,</span><br><span class="line">    <span class="keyword">max</span>(s_birth) stat,</span><br><span class="line">    <span class="string">'max’ tp</span></span><br><span class="line"><span class="string">group by s_age;</span></span><br></pre></td></tr></table></figure><p>执行过程如下：</p><p><img src="/cn/31e5/image-20200505150343464.png" alt="image-20200505150343464"></p><p>这样写就只会产生一个MR的Job，也就是说只执行了一次MapReduce作业。相比优化之前的5个Job，极大的减少了磁盘IO和网络通信，提高执行效率。</p><h2 id="Count-distinct-优化"><a href="#Count-distinct-优化" class="headerlink" title="Count(distinct)优化"></a>Count(distinct)优化</h2><p>统计年龄枚举值个数：<br>下意识的觉得group by去重会比distinct效率高所以会写成这样，能有效避免Reduce阶段数据倾斜</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span>(</span><br><span class="line">  <span class="keyword">select</span> s_age</span><br><span class="line">  <span class="keyword">from</span> student_tb_orc</span><br><span class="line">  <span class="keyword">group</span> <span class="keyword">by</span> s_age</span><br><span class="line">) b</span><br></pre></td></tr></table></figure><ul><li>因为去重的是s_age列，实际上业务含义表示年龄，枚举值个数非常有限，在Map阶段会对s_age去重，因此每个Map得到的s_age有限，最后到达Reduce阶段的非常有限，根本不会达到数据倾斜的量。</li><li>另外group by在不同版本间变动比较大，有的版本会用构建hashtable的形式去重，有的版本会通过排序的方式，排序最优时间复杂度无法到O(1) 。另外上面写法转化为两个任务，会消耗更多的磁盘网络I/O资源。</li></ul><p>所以，这样的写法有点过度优化，执行过程如下：</p><p><img src="/cn/31e5/image-20200505152946846.png" alt="image-20200505152946846"></p><p>如下写法是正常写法：<br></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> s_age)</span><br><span class="line"><span class="keyword">from</span> student_tb_orc</span><br></pre></td></tr></table></figure><p></p><p>distinct的命令会在内存中构建一个hashtable，查找去重的时间复杂度是O(1)；</p><p>Hive 3.0中新增了count(distinct)优化，通过配置<code>set hive.optimize.countdistinct = true</code>设置，即使真的出现数据倾斜也可以自动优化，自动改变SQL执行的逻辑。</p><p>执行过程如下：</p><p><img src="/cn/31e5/image-20200505153005333.png" alt="image-20200505153005333"></p><blockquote><p>理透需求原则，这是优化的根本；</p><p>把握数据全链路原则，这是优化的脉络；</p><p>坚持代码的简洁原则，这让优化更加简单；</p><p>没有瓶颈时谈论优化，是自寻烦恼。</p></blockquote><h2 id="学会查看执行计划"><a href="#学会查看执行计划" class="headerlink" title="学会查看执行计划"></a>学会查看执行计划</h2><p>查看执行计划的命令：<code>explain sql</code><br>查看执行计划的扩展信息：<code>explain extended sql</code><br>执行计划包含两部分:</p><ol><li>作业的依赖关系图，即STAGE DEPENDENCIES;</li><li>每个作业的详细信息，即STAGE PLANS;</li></ol><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">    s_age,</span><br><span class="line">    <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">from</span> prac.student_tb_txt</span><br><span class="line"><span class="keyword">where</span> s_age&lt;<span class="number">30</span></span><br><span class="line"><span class="keyword">and</span> s_name <span class="keyword">like</span> <span class="string">'%红'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s_age;</span><br></pre></td></tr></table></figure><p>执行计划如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">STAGE DEPENDENCIES:</span><br><span class="line">  Stage-1 is a root stage</span><br><span class="line">  Stage-0 depends on stages: Stage-1</span><br><span class="line"></span><br><span class="line">STAGE PLANS:</span><br><span class="line">  Stage: Stage-1</span><br><span class="line">    Map Reduce</span><br><span class="line">      Map Operator Tree:</span><br><span class="line">          TableScan</span><br><span class="line">            alias: student_tb_txt</span><br><span class="line">            Statistics: Num rows: 25083517 Data size: 2709019904 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">            Filter Operator</span><br><span class="line">              predicate: ((s_age &lt; 30) and (s_name like &apos;%红&apos;)) (type: boolean)</span><br><span class="line">              Statistics: Num rows: 4180586 Data size: 451503299 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">              Select Operator</span><br><span class="line">                expressions: s_age (type: bigint)</span><br><span class="line">                outputColumnNames: s_age</span><br><span class="line">                Statistics: Num rows: 4180586 Data size: 451503299 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">                Group By Operator</span><br><span class="line">                  aggregations: count(1)</span><br><span class="line">                  keys: s_age (type: bigint)</span><br><span class="line">                  mode: hash</span><br><span class="line">                  outputColumnNames: _col0, _col1</span><br><span class="line">                  Statistics: Num rows: 4180586 Data size: 451503299 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">                  Reduce Output Operator</span><br><span class="line">                    key expressions: _col0 (type: bigint)</span><br><span class="line">                    sort order: +</span><br><span class="line">                    Map-reduce partition columns: _col0 (type: bigint)</span><br><span class="line">                    Statistics: Num rows: 4180586 Data size: 451503299 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">                    value expressions: _col1 (type: bigint)</span><br><span class="line">      Reduce Operator Tree:</span><br><span class="line">        Group By Operator</span><br><span class="line">          aggregations: count(VALUE._col0)</span><br><span class="line">          keys: KEY._col0 (type: bigint)</span><br><span class="line">          mode: mergepartial</span><br><span class="line">          outputColumnNames: _col0, _col1</span><br><span class="line">          Statistics: Num rows: 2090293 Data size: 225751649 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">          File Output Operator</span><br><span class="line">            compressed: false</span><br><span class="line">            Statistics: Num rows: 2090293 Data size: 225751649 Basic stats: COMPLETE Column stats: NONE</span><br><span class="line">            table:</span><br><span class="line">                input format: org.apache.hadoop.mapred.SequenceFileInputFormat</span><br><span class="line">                output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat</span><br><span class="line">                serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe</span><br><span class="line"></span><br><span class="line">  Stage: Stage-0</span><br><span class="line">    Fetch Operator</span><br><span class="line">      limit: -1</span><br><span class="line">      Processor Tree:</span><br><span class="line">        ListSink</span><br></pre></td></tr></table></figure><p>STAGE DEPENDENCIES描述了作业之间的依赖关系，即Stage-0依赖Stage-1的执行结果 。Stage-1表示如下的SQL，即<code>SQL select * from prac.student_tb_txt where s_age&lt;30 and s_name like &#39;%红&#39;</code>的执行结果。</p><p>Stage—1分为Map和 Reduce两个阶段，对应的执行计划关键词解读如下:</p><ul><li>MapReduce:表示当前任务执行所用的计算引擎是 MapReduce</li><li>Map Operator Tree当前描述的Map阶段执行的操作信息。<br>Reduce Operator Tree:表示当前描述的是 Reduce阶段的操作信息。</li></ul><p>Map操作树（Map Operator Tree）信息解读如下:</p><ul><li>TableScan:表示对关键字 alias声明的结果集，这里指代 student tb orc，进行表扫描操作。</li><li>Statistics:表示对当前阶段的统计信息。例如，当前处理的数据行和数据量，这两个都是预估值。</li><li>Filter Operator:表示在之前操作(TableScan)的结果集上进行数据的过滤</li><li>predicate:表示 filter Operator进行过滤时，所用的谓词，即s＿age&lt;30 and s_e like ‘’％红％’’。</li><li>Select Operator:表示在之前的结果集上对列进行投影，即筛选列。</li><li>expressions:表示需要投影的列，即筛选的列。</li><li>outputColumnNames:表示输出的列名。</li></ul><ul><li>Group By Operator:表示在之前的结果集上分组聚合。</li><li>aggregations:表示分组聚合使用的算法，这里是 count(1)。</li><li>keys:表示分组的列，在该例子表示的是s＿age</li><li>Reduce output Operator:表示当前描述的是对之前结果聚会后的输出信息，这里表示Map端聚合后的输出信息。</li><li>key expressions/value expressions: MapReduce计算引擎，在Map阶段和 Reduce阶段输出的都是键-值对的形式，这里 key expression value expressions分别描述的就是Map阶段输出的键(key)和值(value)所用的数据列这里的例子 key expressions指代的就是s＿age列， value expressions指代的就是 count(1)列。</li><li>sort order:表示输出是否进行排序，+表示正序，-表示倒序。</li><li>Map- -reduce partition columns:表示Map阶段输出到 Reduce阶段的分区列，在Hive-SQL中，可以用 distribute by指代分区的列。</li><li>Reduce阶段所涉及的关键词与Map阶段的关键词是一样的，字段表示含义也相同，<br>因此这里不再罗列。下面是 Reduce中出现但是在Map阶段没有出现的关键词。</li><li>compressed:在 File Output Operator中这个关键词表示文件输出的结果是否进行压缩， false表示不进行输出压缩。</li><li>table:表示当前操作表的信息。</li><li>input format/output format:分别表示文件输入和输出的文件类型。</li><li>serde:表示读取表数据的序列化和反序列化的方式。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近当当网书香节，满100减50，购物车里的书迫不及待的下单买了，5折价格真香。&lt;/p&gt;&lt;p&gt;拿到手后花了约一周时间把&lt;a href=&quot;https://u.dangdang.com/xjGKA&quot;&gt;《Hive性能调优实战》&lt;/a&gt; 这本看完了。&lt;/p&gt;&lt;p&gt;&lt;img src=
      
    
    </summary>
    
      <category term="数据仓库" scheme="https://mapan.tech/cn/categories/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>从源码看HBase的写入流程</title>
    <link href="https://mapan.tech/cn/d6ca.html"/>
    <id>https://mapan.tech/cn/d6ca.html</id>
    <published>2020-04-04T13:53:50.000Z</published>
    <updated>2020-04-04T14:40:06.619Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看HBase，琢磨了一下HBase的写入流程，我的测试环境安装的HBase版本是2.1.0-cdh6.3.2，那么直接在IDEA配置好POM文件，下载对应版本的Jar包和文档，找到<code>org.apache.hadoop.hbase.regionserver.HRegion.java</code>，开撕源码。<br>可以找到源码中关于这部分的注释比较清晰明了：</p><blockquote><p>STEP 1. Try to acquire as many locks as we can and build mini-batch of operations with<br>locked rows</p><p>STEP 2. Update mini batch of all operations in progress with LATEST_TIMESTAMP timestamp<br>We should record the timestamp only after we have acquired the rowLock,<br>otherwise, newer puts/deletes are not guaranteed to have a newer timestamp</p><p>STEP 3. Build WAL edit</p><p>STEP 4. Append the WALEdits to WAL and <strong>SYNC</strong>.</p><p>STEP 5. Write back to memStore</p><p>STEP 6. Complete MiniBatchOperations: If required calls postBatchMutate() CP hook and<br>complete mvcc for last writeEntry</p><p>STEP 7. Apply to memstore</p></blockquote><p>首先HBase首先获取一些锁，在导入的包中，可以发现<code>import java.util.concurrent.locks.Lock;</code><br>不难看出这里的获取的锁是JUC的锁。</p><p>然后构建<code>mini-batch</code>，并使用最后的时间戳来更新mini-batch；</p><p>把操作追加到WAL并且<strong>同步</strong>。</p><p>再写入menStore，写入成功以后才在Finally中释放锁。</p><p>Hbase2.1.0版本与1.3.1版本相比，有了不少的改进：</p><ol><li>加入了mini-batch，每次更新是针对小批量的操作，提高了整体的吞吐率；</li><li>WAL的同步时机不同，在1.3.1版本中是先写入WALedits，再写入memStore，最后才对WAL进行同步，在2.1.0版本中的顺序变成了先写WAL并同步，然后再写memStore。在2.1.0的顺序更加符合我们的逻辑，理解起来也更简单。</li></ol><p>总结一下HBase的写入逻辑：</p><ol><li>Client先访问zookeeper，获取hbase:meta表位于哪个Region Server。</li><li>访问对应的Region Server，获取hbase:meta表，根据读请求的namespace:table/rowkey，查询出目标数据位于哪个Region Server中的哪个Region中。并将该table的region信息以及meta表的位置信息缓存在客户端的meta cache，方便下次访问。</li><li>与目标Region Server进行通讯；</li><li>将数据顺序追加到WAL；</li><li>将数据写入对应的MemStore，数据会在MemStore进行排序；</li><li>向客户端发送ack；</li><li>等达到MemStore的刷写时机后，将数据刷写到HFile。</li></ol><p>看过源码之后，对于HBase的写入有了更深入的认识。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在看HBase，琢磨了一下HBase的写入流程，我的测试环境安装的HBase版本是2.1.0-cdh6.3.2，那么直接在IDEA配置好POM文件，下载对应版本的Jar包和文档，找到&lt;code&gt;org.apache.hadoop.hbase.regionserver.H
      
    
    </summary>
    
      <category term="HBase" scheme="https://mapan.tech/cn/categories/HBase/"/>
    
    
  </entry>
  
  <entry>
    <title>Hive的一次踩坑</title>
    <link href="https://mapan.tech/cn/26a5.html"/>
    <id>https://mapan.tech/cn/26a5.html</id>
    <published>2020-03-28T14:39:39.000Z</published>
    <updated>2020-03-29T06:25:41.671Z</updated>
    
    <content type="html"><![CDATA[<p>今天周末，新冠疫情虽然已经逐渐退去，但仍然不能掉以轻心，而且外面还在下雨，正是窝在家看书的好时机，拿出《Hive编程指南》再看一遍，书读百遍，其义自见，这种经典书每看一遍都会有新的收获。当然光看书是不行的，学习必须要有输出，必须要上手实际操作才会印象深刻。</p><p>今天按照书上关于分区的部分实际上手操作了一把，发现还是有一些坑在里面的。</p><p>本文测试环境：<code>2.1.1-cdh6.3.2, rb3393cf499504df1d2a12d34b4285e5d0c02be11</code></p><h3 id="1-字段注释乱码"><a href="#1-字段注释乱码" class="headerlink" title="1. 字段注释乱码"></a>1. 字段注释乱码</h3><p>在建表时没有添加<code>COMMENT 字段注释</code>，后面我想通过<code>ALTER TABLE</code>给表字段添加注释时候，发现添加后是<code>??</code>，那么肯定是字符集设置的有问题。打开MySQL，进入Hive的元数据的数据库<br>修改<code>表注释</code>和<code>字段注释</code>在MySQL数据库中对应的字段字符类型。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table COLUMNS_V2 modify column COMMENT varchar(256) character set utf8;</span><br><span class="line"></span><br><span class="line">alter table TABLE_PARAMS modify column PARAM_VALUE varchar(4000) character set utf8;</span><br></pre></td></tr></table></figure><p></p><p>再次执行ALTER TABLE 修改表注释，然后DESC 表名，字段注释恢复成中文，问题解决。</p><p>我安装的是MySQL5.7版本，由于强迫症，我直接修改了MySQL的配置文件<br>root用户下 <code>vim /etc/my.cnf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 在[mysqld]下添加两行</span><br><span class="line">character_set_server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br><span class="line"></span><br><span class="line"># 新添加两行</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><p>最后重新启动MySQL<br><code>systemctl restart mysqld</code><br>【请勿模仿】而且我还尝试修改了MySQL中的<code>hive</code>库的编码方式为<code>utf8</code>，以及<code>hive</code>库下所有的表的编码方式为<code>utf8</code>,后来才看到网上有文章说有不要改，否则有意外的惊喜。不过我启动集群，暂时一切正常。</p><h3 id="2-外部分区表新增字段后插入数据为NULL"><a href="#2-外部分区表新增字段后插入数据为NULL" class="headerlink" title="2. 外部分区表新增字段后插入数据为NULL"></a>2. 外部分区表新增字段后插入数据为NULL</h3><p>这个坑可以稳定复现</p><p>描述：</p><p><strong>对于分区表新增字段，向已存在分区中插入数据，新增字段的值全部为NULL。</strong></p><p><strong>已存在</strong>分区有此问题，新分区并不会产生该问题；</p><p>无论是管理表还是外部表都有该问题。</p><p>网上搜索答案，在新增字段后，对表进行<code>msck repair table tablename</code>，实际验证此方法无效。</p><p>复现过程：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> temp01;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">external</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> temp01(<span class="keyword">id</span> <span class="keyword">string</span>,<span class="keyword">name</span> <span class="keyword">string</span>) partitioned <span class="keyword">by</span> (sex <span class="keyword">string</span>) </span><br><span class="line"><span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">','</span> <span class="keyword">stored</span> <span class="keyword">as</span> textfile;</span><br><span class="line"><span class="comment">-- 添加分区</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> temp01 <span class="keyword">add</span> <span class="keyword">partition</span>(sex=<span class="string">'M'</span>);</span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">insert</span> overwrite <span class="keyword">table</span> temp01 <span class="keyword">partition</span> (sex=<span class="string">"M"</span>) </span><br><span class="line"><span class="keyword">select</span> <span class="string">"1001"</span>,<span class="string">"张三"</span>;</span><br><span class="line"><span class="comment">-- 查询</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> temp01;</span><br></pre></td></tr></table></figure><p><img src="/cn/26a5/image-20200328232729273.png" alt="image-20200328232729273"></p><p>到这里一切正常</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 添加字段</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> temp01 <span class="keyword">add</span> <span class="keyword">columns</span> (birth <span class="keyword">String</span> <span class="keyword">comment</span> <span class="string">"生日"</span>);</span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> temp01 <span class="keyword">partition</span> (sex=<span class="string">"M"</span>) </span><br><span class="line"><span class="keyword">select</span> <span class="string">"1001"</span>,<span class="string">"刘备"</span>,<span class="string">"1999-08-09"</span>;</span><br><span class="line"><span class="comment">-- 查看</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> temp01;</span><br></pre></td></tr></table></figure><p>下面就出问题了，刘备同学的生日实际提示是插入成功了，但这里显示为NULL。</p><p><img src="/cn/26a5/image-20200328232907371.png" alt="image-20200328232907371"></p><p>其实问题很简单，分区表的元数据没有及时更新，重建该分区即可，由于是外部表，之前的数据不会丢失。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 重建分区</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> temp01 <span class="keyword">drop</span> <span class="keyword">partition</span> (sex=<span class="string">"M"</span>);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> temp01 <span class="keyword">add</span> <span class="keyword">partition</span> (sex=<span class="string">"M"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> temp01;</span><br></pre></td></tr></table></figure><p>刘备同学的生日已经出现了。</p><p><img src="/cn/26a5/image-20200328233140947.png" alt="image-20200328233140947"></p><p>【附】：<a href="26a5/Hive编程指南.pdf" target="_blank">《Hive编程指南》PDF下载</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天周末，新冠疫情虽然已经逐渐退去，但仍然不能掉以轻心，而且外面还在下雨，正是窝在家看书的好时机，拿出《Hive编程指南》再看一遍，书读百遍，其义自见，这种经典书每看一遍都会有新的收获。当然光看书是不行的，学习必须要有输出，必须要上手实际操作才会印象深刻。&lt;/p&gt;&lt;p&gt;今天
      
    
    </summary>
    
      <category term="数据仓库" scheme="https://mapan.tech/cn/categories/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>记录一次Hive中遇到的问题</title>
    <link href="https://mapan.tech/cn/f16a.html"/>
    <id>https://mapan.tech/cn/f16a.html</id>
    <published>2020-03-26T12:56:47.000Z</published>
    <updated>2020-03-26T13:06:00.505Z</updated>
    
    <content type="html"><![CDATA[<p>今天在测试MapJoin对优化作用的提升的时候，使用普通用户mapan在命令行hive-cli里跑一段的MapJoin得到测试HQL，发现报如下错误，学会看报错日志是非常好的解决问题的方法，通过看日志能够解决大部分常见的的问题。关键日志如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">2020-03-26 20:42:36,065 main ERROR RandomAccessFileManager </span><br><span class="line">(/var/log/hive/operation_logs/7cbc9115-f9e8-4554-99f2-</span><br><span class="line">196aced99788/mapan_20200326204229_2b889f65-cc49-4de5-b3b5-0bccd05b3812) </span><br><span class="line">java.io.IOException: Could not create directory </span><br><span class="line">/var/log/hive/operation_logs/7cbc9115-f9e8-4554-99f2-196aced99788 </span><br><span class="line">java.io.IOException: Could not create directory </span><br><span class="line">/var/log/hive/operation_logs/7cbc9115-f9e8-4554-99f2-196aced99788</span><br><span class="line">at org.apache.logging.log4j.core.util.FileUtils.mkdir(FileUtils.java:119)</span><br><span class="line">at org.apache.logging.log4j.core.util.FileUtils.makeParentDirs(FileUtils.java:136)</span><br><span class="line">at org.apache.logging.log4j.core.appender.RandomAccessFileManager$RandomAccessFileManagerFactory.createManager(RandomAccessFileManager.java:198)</span><br><span class="line">at org.apache.logging.log4j.core.appender.RandomAccessFileManager$RandomAccessFileManagerFactory.createManager(RandomAccessFileManager.java:177)</span><br><span class="line">at org.apache.logging.log4j.core.appender.AbstractManager.getManager(AbstractManager.java:112)</span><br><span class="line">at org.apache.logging.log4j.core.appender.OutputStreamManager.getManager(OutputStreamManager.java:114)</span><br><span class="line">at org.apache.logging.log4j.core.appender.RandomAccessFileManager.getFileManager(RandomAccessFileManager.java:74)</span><br><span class="line">at org.apache.hadoop.hive.ql.log.HushableRandomAccessFileAppender.createAppender(HushableRandomAccessFileAppender.java:178)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">at org.apache.logging.log4j.core.config.plugins.util.PluginBuilder.build(PluginBuilder.java:132)</span><br><span class="line">at org.apache.logging.log4j.core.config.AbstractConfiguration.createPluginObject(AbstractConfiguration.java:952)</span><br><span class="line">at org.apache.logging.log4j.core.config.AbstractConfiguration.createConfiguration(AbstractConfiguration.java:892)</span><br><span class="line">at org.apache.logging.log4j.core.appender.routing.RoutingAppender.createAppender(RoutingAppender.java:271)</span><br><span class="line">at org.apache.logging.log4j.core.appender.routing.RoutingAppender.getControl(RoutingAppender.java:255)</span><br><span class="line">at org.apache.logging.log4j.core.appender.routing.RoutingAppender.append(RoutingAppender.java:225)</span><br><span class="line">at org.apache.logging.log4j.core.config.AppenderControl.tryCallAppender(AppenderControl.java:156)</span><br><span class="line">at org.apache.logging.log4j.core.config.AppenderControl.callAppender0(AppenderControl.java:129)</span><br><span class="line">at org.apache.logging.log4j.core.config.AppenderControl.callAppenderPreventRecursion(AppenderControl.java:120)</span><br><span class="line">at org.apache.logging.log4j.core.config.AppenderControl.callAppender(AppenderControl.java:84)</span><br><span class="line">at org.apache.logging.log4j.core.config.LoggerConfig.callAppenders(LoggerConfig.java:448)</span><br><span class="line">at org.apache.logging.log4j.core.config.LoggerConfig.processLogEvent(LoggerConfig.java:433)</span><br><span class="line">at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:417)</span><br><span class="line">at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:403)</span><br><span class="line">at org.apache.logging.log4j.core.config.AwaitCompletionReliabilityStrategy.log(AwaitCompletionReliabilityStrategy.java:63)</span><br><span class="line">at org.apache.logging.log4j.core.Logger.logMessage(Logger.java:146)</span><br><span class="line">at org.apache.logging.log4j.spi.AbstractLogger.logMessageSafely(AbstractLogger.java:2091)</span><br><span class="line">at org.apache.logging.log4j.spi.AbstractLogger.logMessage(AbstractLogger.java:1993)</span><br><span class="line">at org.apache.logging.log4j.spi.AbstractLogger.logIfEnabled(AbstractLogger.java:1852)</span><br><span class="line">at org.apache.logging.slf4j.Log4jLogger.info(Log4jLogger.java:179)</span><br><span class="line">at org.apache.hadoop.hive.ql.exec.mapjoin.MapJoinMemoryExhaustionHandler.&lt;init&gt;(MapJoinMemoryExhaustionHandler.java:61)</span><br><span class="line">at org.apache.hadoop.hive.ql.exec.HashTableSinkOperator.initializeOp(HashTableSinkOperator.java:129)</span><br><span class="line">at org.apache.hadoop.hive.ql.exec.Operator.initialize(Operator.java:358)</span><br><span class="line">at org.apache.hadoop.hive.ql.exec.Operator.initialize(Operator.java:546)</span><br><span class="line">at org.apache.hadoop.hive.ql.exec.Operator.initializeChildren(Operator.java:498)</span><br><span class="line">at org.apache.hadoop.hive.ql.exec.Operator.initialize(Operator.java:368)</span><br><span class="line">at org.apache.hadoop.hive.ql.exec.Operator.initialize(Operator.java:546)</span><br><span class="line">at org.apache.hadoop.hive.ql.exec.Operator.initializeChildren(Operator.java:498)</span><br><span class="line">at org.apache.hadoop.hive.ql.exec.Operator.initialize(Operator.java:368)</span><br><span class="line">at org.apache.hadoop.hive.ql.exec.Operator.initialize(Operator.java:546)</span><br><span class="line">at org.apache.hadoop.hive.ql.exec.Operator.initializeChildren(Operator.java:498)</span><br><span class="line">at org.apache.hadoop.hive.ql.exec.Operator.initialize(Operator.java:368)</span><br><span class="line">at org.apache.hadoop.hive.ql.exec.mr.MapredLocalTask.initializeOperators(MapredLocalTask.java:514)</span><br><span class="line">at org.apache.hadoop.hive.ql.exec.mr.MapredLocalTask.startForward(MapredLocalTask.java:418)</span><br><span class="line">at org.apache.hadoop.hive.ql.exec.mr.MapredLocalTask.executeInProcess(MapredLocalTask.java:393)</span><br><span class="line">at org.apache.hadoop.hive.ql.exec.mr.ExecDriver.main(ExecDriver.java:779)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">at org.apache.hadoop.util.RunJar.run(RunJar.java:313)</span><br><span class="line">at org.apache.hadoop.util.RunJar.main(RunJar.java:227)</span><br></pre></td></tr></table></figure><p>很明显日志中提到如下关键错误:<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main ERROR RandomAccessFileManager </span><br><span class="line">(/var/log/hive/operation_logs/7cbc9115-f9e8-4554-99f2-</span><br><span class="line">196aced99788/mapan_20200326204229_2b889f65-cc49-4de5-b3b5-0bccd05b3812)</span><br><span class="line">java.io.IOException: Could not create directory</span><br></pre></td></tr></table></figure><p></p><p>由于我是使用的mapan用户登录并运行的hive-cli,所以我猜测是由于mapan用户没有<code>/var/log/hive/operation_logs/</code>的权限所导致的。切换hive用户尝试<br><code>sudo -u hive hive</code>进入hive-cli,然后跑同样一段HQL发现可以正常运行，OK那么问题基本可以确定了，给对应目录添加写权限即可。<br><code>sudo chmod -R o+w /var/log/hive/operation_logs/</code><br>再次使用mapan用户进入hive -cli,跑同样的HQL，没有再报错，问题解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在测试MapJoin对优化作用的提升的时候，使用普通用户mapan在命令行hive-cli里跑一段的MapJoin得到测试HQL，发现报如下错误，学会看报错日志是非常好的解决问题的方法，通过看日志能够解决大部分常见的的问题。关键日志如下：&lt;/p&gt;&lt;figure clas
      
    
    </summary>
    
      <category term="数据仓库" scheme="https://mapan.tech/cn/categories/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Hive优化</title>
    <link href="https://mapan.tech/cn/626f.html"/>
    <id>https://mapan.tech/cn/626f.html</id>
    <published>2020-03-25T12:07:49.000Z</published>
    <updated>2020-03-29T02:07:28.248Z</updated>
    
    <content type="html"><![CDATA[<p>平常工作中写HiveSQL比较多，对于一些常见的Hive问题和优化做一下总结：</p><h3 id="1-MapJoin"><a href="#1-MapJoin" class="headerlink" title="1. MapJoin"></a>1. MapJoin</h3><p>如果不指定<code>Mapjoin</code>或者不符合<code>MapJoin</code>的条件，那么Hive解析器会将<code>Join</code>操作转换成<code>Common Join</code>, 即在<code>Reduce</code>阶段完成<code>Join</code>，容易发生数据倾斜。这时可以使用MapJoin把小表全部加载到内存中在<code>Map</code>端进行<code>Join</code>，避免<code>Reduce</code>处理。</p><h3 id="2-行列过滤"><a href="#2-行列过滤" class="headerlink" title="2. 行列过滤"></a>2. 行列过滤</h3><p>列处理：在SELECT中，只拿需要处理的列。如非必要，尽量避免SELECT *；</p><p>行处理：尽早的过滤数据，减少每个阶段的数据量，对于分区表尽量使用分区过滤。</p><h3 id="3-尽量原子化操作"><a href="#3-尽量原子化操作" class="headerlink" title="3. 尽量原子化操作"></a>3. 尽量原子化操作</h3><p>尽量避免一个SQL包含复杂的逻辑，可以创建临时表来完成复杂的逻辑。</p><h3 id="4-采用分区技术"><a href="#4-采用分区技术" class="headerlink" title="4. 采用分区技术"></a>4. 采用分区技术</h3><p>可以把数据根据数据量按照天或者按照周、月来分区。</p><h3 id="5-合理设置Map数量和Reduce数"><a href="#5-合理设置Map数量和Reduce数" class="headerlink" title="5. 合理设置Map数量和Reduce数"></a>5. 合理设置Map数量和Reduce数</h3><p>Hive中的SQL查询会生成执行计划，执行计划以MapReduce的方式执行，那么结合数据和集群的大小，Map和Reduce的数量就会影响到SQL的执行效率，除了要控制Hive生成的Job的数量，也要控制map和reduce的数量。</p><h4 id="Map的数量"><a href="#Map的数量" class="headerlink" title="Map的数量"></a>Map的数量</h4><p>通常情况下，作业会通过input的目录产生一个或者多个map任务。<br>主要决定因素有：input的文件总个数，input的文件大小，集群设置的文件块大小。<br>Hive中默认的<code>hive.input.format</code>是<code>org.apache.hadoop.hive.ql.io.CombineHivelnputFormat</code>，对于<code>combineHiveInputFormat</code>，它的输入的map数量由三个配置决定：<br><code>mapred.min.split.size.per.node</code> 一个节点上split的至少的大小<br><code>mapred.min.split.size.per.rack</code> 一个交换机下split 至少的大小<br><code>mapred.max.split.size</code> 一个split 最大的大小<br>主要思路是把输入目录下的大文件分成多个map的输入，并合并小文件，做为一个map的输入<br>具体的原理是下述三步：</p><p>a) 根据输入目录下的每个文件，如果其长度超过<code>mapred.max.split.size</code>，以Block 为单位分成多个Split（一个Split是一个map的输入），每个split的长度都大于<code>mapred.max.split.size</code>，因为以Block为单位，因此也会大于·<code>BlockSize</code>，此文件剩下的长度如果大于<code>mapred.min.split.size.per.node</code>，则生成一个Split，否则先暂时保留；</p><p>b) 现在剩下的都是一些长度较短的碎片，把每个rack 下碎片合并，只要长度超过<br><code>mapred.max.split.size</code>就合并成一-个 split，最后如果剩下的碎片比<code>mapred.min.split.size.per.rack</code> 大，就合并成一个split，否则暂时保留；</p><p>c) 把不同rack下的碎片合并，只要长度超过<code>mapred.max.split.size</code>就合并成一个 split，剩下的碎片无论长度，合并成一个split。</p><h4 id="Reduce的数量"><a href="#Reduce的数量" class="headerlink" title="Reduce的数量"></a>Reduce的数量</h4><p>reduce数量由以下三个参数决定：</p><ul><li><code>mapred.reduce.tasks</code>（强制指定reduce的任务数量）</li><li><code>hive.exec.reducers.bytes.per.reducer</code>（每个reduce任务处理的数据量，默认为1000^3=1G）</li><li><code>hive.exec.reducers.max</code>（每个任务最大的reduce数，默认为999）<br>计算reducer 数的公式:<br><code>N=min(hive.exec.reducers.max，总输入数据量/hive.exec.reducers.bytes.per.reducer)</code></li></ul><h3 id="6-注意Join的使用"><a href="#6-注意Join的使用" class="headerlink" title="6. 注意Join的使用"></a>6. 注意Join的使用</h3><p>把重复关联键少的表放在join前面，可以提高join效率。网上所谓的<code>hive会将join前面的表放在内存中，把小表放在前面能减少内存资源消耗</code>这种说法在现在看来其实是有异议的。用1条记录的表和3亿条记录的表做join，无论小表是放在join的前面还是join的后面，执行的时间几乎都是相同的，原因是因为Hive在早期某个版本中，底层对此进行了优化。</p><h3 id="7-小文件处理"><a href="#7-小文件处理" class="headerlink" title="7. 小文件处理"></a>7. 小文件处理</h3><p><code>HiveInputFormat</code>没有对小文件的合并功能<br>可以使用<code>Combinefileinputformat</code>，将多个小文件打包作为一个整体的inputsplit，减少map任务数<br><code>set mapred.max.split.size=256000000</code>;<br><code>set mapred.min.split.size.per.node= 256000000</code>；<br><code>set mapred.min.split.size.per.rack=256000000</code>;<br><code>set hive.input.format=org.apache.hadoop.hive.ql.io.CombineHivelnputFormat</code>;</p><p>设置hive参数，额外启动-一个MR Job打包小文件:<br><code>hive.merge.mapredfiles=false</code> 是否合并Reduce 输出文件，默认为False<br><code>hive.merge.size.per.task = 256*1000*1000</code> 合并文件的大小</p><h3 id="8-注意数据倾斜"><a href="#8-注意数据倾斜" class="headerlink" title="8. 注意数据倾斜"></a>8. 注意数据倾斜</h3><p>a) 通过 <code>hive.groupby.skewindata=true</code>控制生成两个MR Job，第一个 MR Job Map的输出结果随机分配到reduce做次预汇总，减少某些key值条数过多某些key条数过小造成的数据倾斜问题；</p><p>b) 通过<code>hive.map.aggr = true</code>（默认为true）在Map端做combiner，假如map各条数据基本上不一样，聚合没什么意义，做combiner反而画蛇添足，hive里也考虑的比较周到通过参数<br><code>hive.groupby.mapaggr.checkinterval = 100000</code>（默认）</p><p><code>hive.map.aggr.hash.min.reduction=0.5</code>（默认），预先取100000条数据聚合，如果聚合后的条数/100000&gt;0.5，则不再聚合。</p><h3 id="9-合理使用multi-insert，union-all"><a href="#9-合理使用multi-insert，union-all" class="headerlink" title="9. 合理使用multi insert，union all"></a>9. 合理使用multi insert，union all</h3><p><code>multi insert</code>适合基于同一个源表按照不同逻辑不同粒度处理插入不同表的场景，做到只需要扫描源表一次，job个数不变，减少源表扫描次数；</p><p>union all用好，可减少表的扫描次数，减少job 的个数，通常预先按不同逻辑不同条件生成的查询<code>union all</code>后，再统一<code>Group by</code>计算，不同表的<code>union all</code>相当于<code>multiple inputs</code>，同一个表的<code>union all</code>，相当map一次输出多条。</p><h3 id="10-Group优化"><a href="#10-Group优化" class="headerlink" title="10.Group优化"></a>10.Group优化</h3><p>对于Group操作，首先在map端聚合，最后在reduce端做聚合，以下是相关的参数:<br><code>hive.map.aggr=true</code>是否在Map端进行聚合，默认为True,<br><code>hive.groupby.mapaggr.checkinterval= 100000</code>在Map端进行聚合操作的条目数目。</p><h3 id="11-使用压缩"><a href="#11-使用压缩" class="headerlink" title="11. 使用压缩"></a>11. 使用压缩</h3><p>设置map端输出，中间结果压缩。不完全解决数据倾斜问题，但是减少了IO读写和网络传输，能提高很多效率。</p><p><code>set hive.exec.compress.intermediate = true;</code></p><p>对于中间数据压缩，选择一个低CPU开销的Codec要比选择一个压缩率高的Codec要重要的多。</p><p><code>SnappyCodec</code>是一个比较好的中间文件Codec，因为其很好的结合了低CPU开销和好的压缩执行效率。</p><h3 id="12-开启JVM重用"><a href="#12-开启JVM重用" class="headerlink" title="12. 开启JVM重用"></a>12. 开启JVM重用</h3><p>JVM重用是Hadoop调优参数的内容，对hive的性能具有非常大的影响，特别是对于很难避免小文件的场景或者Task特别多的场景，这类场景大多数执行时间都很短。Hadoop默认配置是使用JVM来执行map和reduce任务的，这时Jvm的启动过程可能会造成相当大的开销，尤其是执行的job包含有成千上万个task任务的情况。</p><p>JVM重用可以使得JVM实例在同一个JOB中重新使用N次，N的值可以在<code>Hadoop的mapre-site.xml</code>文件中进行设置<br><code>mapred.job.reuse.jvm.num.tasks</code><br>也可在hive的执行设置：<br><code>set mapred.job.reuse.jvm.num.tasks=10</code>;</p><p>JVM重用的一个缺点是，开启JVM重用将会一直占用使用到的task插槽，以便进行重用，直到任务完成后才能释放。如果某个不平衡的job中有几个<code>reduce task</code> 执行的时间要比其他<code>reduce task</code>消耗的时间多得多的话，那么保留的插槽就会一直空闲着却无法被其他的job使用，直到所有的task都结束了才会释放。</p><h3 id="13-使用动态分区"><a href="#13-使用动态分区" class="headerlink" title="13.使用动态分区"></a>13.使用动态分区</h3><p>在Hive中，有时候会希望根据输入的Key，把结果自动输出到不同的目录中，这可以通过动态分区来实现，就是把每一个 key当作一个 分区。<br>如果要启动动态分区，则需要进行下面的设置首先需要在hive语句中设置允许动态分区<br><code>set hive.exec.dynamic.partition=true</code>；<br><code>set hive.exec.dynamic.partition.mode=nonstrict</code>；<br>在动态分区有可能很大的情况下，还需要其他的调整<br><code>hive.exec.dynamic.partitions.pernode</code> 参数指的是每个节点上能够生成的最大分区，这个在最坏情况下应该是跟最大分区一样的值<br><code>hive.exec.dynamic.partitions.partitions</code> 参数指的是总共的最大的动态分区数<code>hive.exec.max.createdfiles</code>参数指的是能够创建的最多文件数（分区一多，文件必然就多了）<br>最后要注意的是select语句中要把distribute的key也select出来。</p><h3 id="14-使用列式存储"><a href="#14-使用列式存储" class="headerlink" title="14.使用列式存储"></a>14.使用列式存储</h3><p>根据数据的特点来进行技术选型：如果数据结构是比较扁平的，那么用<code>ORC</code> 比较合适，如果嵌套较多，就用 <code>Parquet</code>。<br>列存储主要有两个好处：数据压缩和查询性能提升，在节省了存储的同时还提升了查询性能，这个的收益是非常可观的。</p><h3 id="15-使用索引"><a href="#15-使用索引" class="headerlink" title="15.使用索引"></a>15.使用索引</h3><p>索引可以避免全表扫描和资源浪费<br>索引可以加快含有Group By语句的查询的计算速度<br><code>hive.optimize.index.filter=true</code>; 使用自动索引<br><code>hive.optimie.index.groupby=true</code>;使用聚合索引优化GROUP BY操作</p><h3 id="16-利用好EXPLAIN"><a href="#16-利用好EXPLAIN" class="headerlink" title="16.利用好EXPLAIN"></a>16.利用好EXPLAIN</h3><p>Explain命令对于优化查询语句很重要，针对某些查询语句，我们可以通过它查看各个执行计划，针对耗时的地方，采取优化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;平常工作中写HiveSQL比较多，对于一些常见的Hive问题和优化做一下总结：&lt;/p&gt;&lt;h3 id=&quot;1-MapJoin&quot;&gt;&lt;a href=&quot;#1-MapJoin&quot; class=&quot;headerlink&quot; title=&quot;1. MapJoin&quot;&gt;&lt;/a&gt;1. MapJoin&lt;/
      
    
    </summary>
    
      <category term="数据仓库" scheme="https://mapan.tech/cn/categories/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>二分查找</title>
    <link href="https://mapan.tech/cn/a77d.html"/>
    <id>https://mapan.tech/cn/a77d.html</id>
    <published>2020-03-24T23:56:24.000Z</published>
    <updated>2020-03-25T00:06:04.920Z</updated>
    
    <content type="html"><![CDATA[<p>在学习Java的最初阶段，我们应该都写过一个猜数字的小程序，随机生成一个数字，让我们输入来猜，其实里面就用到了二分查找的思想。</p><p><img src="/cn/a77d/binarysearch.png" alt="binarysearch"></p><p>二分查找的思想：</p><ol><li>首先确定该数组的中间下表 mid = (left+right)/2；</li><li>然后让需要查找的数findVal和arr[mid]比较；</li><li>若findVal&gt;arr[mid],说明要查找的数在mid的右边，因此需要递归的向右查找；</li><li>若findVal&lt;arr[mid],说明要查找的数在mid的左边，因此需要递归的向左查找；</li><li>若findVal==arr[mid],说明要查找的数找到，就返回。</li></ol><p>结束递归条件:</p><ol><li>找到要查找的数，结束递归</li><li>递归完整个数组，仍然没有找到findVal,也需要结束递归，此时left&gt;right</li></ol><p>代码实现：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr     要查找的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left    左边的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right   右边的索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> findVal 要查找的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果找到就返回下边，如果没有找到就返回-1</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right, <span class="keyword">int</span> findVal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (left &gt; right) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (findVal &gt; arr[mid]) &#123;</span><br><span class="line">            <span class="keyword">return</span> binarySearch(arr, mid + <span class="number">1</span>, right, findVal);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (findVal &lt; arr[mid]) &#123;</span><br><span class="line">            <span class="keyword">return</span> binarySearch(arr, left, mid - <span class="number">1</span>, findVal);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在学习Java的最初阶段，我们应该都写过一个猜数字的小程序，随机生成一个数字，让我们输入来猜，其实里面就用到了二分查找的思想。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cn/a77d/binarysearch.png&quot; alt=&quot;binarysearch&quot;&gt;&lt;/p&gt;&lt;p&gt;二分查找
      
    
    </summary>
    
      <category term="算法" scheme="https://mapan.tech/cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Hive的UDTF函数</title>
    <link href="https://mapan.tech/cn/6be3.html"/>
    <id>https://mapan.tech/cn/6be3.html</id>
    <published>2020-03-22T08:26:42.000Z</published>
    <updated>2020-03-23T00:02:17.119Z</updated>
    
    <content type="html"><![CDATA[<p>在一些应用场景中，需要对一个字段进行分割，形成多个字段，比如日志信息使用#号连接字段，那么在导入数据仓库的时候，使用UDTF函数就显得比较方便和得心应手了。<br>在Hive的官网上，可以看到最UDTF的介绍是这样的：</p><blockquote><h3 id="GenericUDTF-Interface"><a href="#GenericUDTF-Interface" class="headerlink" title="GenericUDTF Interface"></a>GenericUDTF Interface</h3><p>A custom UDTF can be created by extending the GenericUDTF abstract class and then implementing the initialize, process, and possibly close methods. The initialize method is called by Hive to notify the UDTF the argument types to expect. The UDTF must then return an object inspector corresponding to the row objects that the UDTF will generate. Once initialize() has been called, Hive will give rows to the UDTF using the process() method. While in process(), the UDTF can produce and forward rows to other operators by calling forward(). Lastly, Hive will call the close() method when all the rows have passed to the UDTF.</p></blockquote><p>那么自定义UDTF函数需要继承<code>GenericUDTF</code> 抽象方法，实现<code>initialize</code>，<code>process</code>，<code>close</code> 这三个方法。</p><p>其中<code>initialize</code>方法中声明了Hive中需要的参数类型。</p><p><code>process</code>方法中进行我们所期望的操作，并调用<code>forward</code>方法把内容写到hive对应的行中。</p><p>当所有的行都写完后，会执行<code>close</code>方法。</p><p>下面代码实现了输入一个String类型的字符串，输入分隔符。会按照分隔符分割，之后把内容进行输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tech.mapan.hive.udtf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDFArgumentException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.metadata.HiveException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.udf.generic.GenericUDTF;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.StructObjectInspector;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExplodUDTF</span> <span class="keyword">extends</span> <span class="title">GenericUDTF</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; outList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StructObjectInspector <span class="title">initialize</span><span class="params">(StructObjectInspector argOIs)</span> <span class="keyword">throws</span> UDFArgumentException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义输出数据的列名和类型</span></span><br><span class="line">        List&lt;String&gt; fieldNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;ObjectInspector&gt; fieldOIs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加输出数据的列名和类型</span></span><br><span class="line">        fieldNames.add(<span class="string">"lineToWord"</span>);</span><br><span class="line">        fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ObjectInspectorFactory.getStandardStructObjectInspector(fieldNames, fieldOIs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Object[] args)</span> <span class="keyword">throws</span> HiveException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取原始数据</span></span><br><span class="line">        String arg = args[<span class="number">0</span>].toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取数据传入的第二个参数，此处为分隔符</span></span><br><span class="line">        String splitKey = args[<span class="number">1</span>].toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.将原始数据按照传入的分隔符进行切分</span></span><br><span class="line">        String[] fields = arg.split(splitKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.遍历切分后的结果，并写出</span></span><br><span class="line">        <span class="keyword">for</span> (String field : fields) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//集合为复用的，首先清空集合</span></span><br><span class="line">            outList.clear();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将每一个单词添加至集合</span></span><br><span class="line">            outList.add(field);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将集合内容写出</span></span><br><span class="line">            forward(outList);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> HiveException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打好jar包并放到对应目录后，创建函数，尝试执行一句简单的，可以看到<code>1001#Jack#18#1999-01-02#Male</code>已经被按照期望的形式分割出来。其中<code>linetoword</code>是在UDTF函数中定义的列名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; create <span class="keyword">function</span> mp_explod as <span class="string">"tech.mapan.hive.udtf.ExplodUDTF"</span>;</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.03 seconds</span><br><span class="line"></span><br><span class="line">hive (default)&gt; select mp_explod(<span class="string">'1001#Jack#18#1999-01-02#Male'</span>,<span class="string">'#'</span>);</span><br><span class="line">OK</span><br><span class="line">linetoword</span><br><span class="line">1001</span><br><span class="line">Jack</span><br><span class="line">18</span><br><span class="line">1999-01-02</span><br><span class="line">Male</span><br><span class="line">Time taken: 12.29 seconds, Fetched: 5 row(s)</span><br></pre></td></tr></table></figure><p>实际上，UDF还有一种更直接的使用方法，可以直接把一个字段变成两个字段（或多个字段）输出，但这样的写法比较相对比较固定。其实在<code>initialize</code>方法里只需要多定义一个（或多个）字段即可，输出时，会自动按顺序填充到对应的字段位置上。写法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tech.mapan.hive.udtf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDFArgumentException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.metadata.HiveException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.udf.generic.GenericUDTF;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspector;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.ObjectInspectorFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.StructObjectInspector;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.serde2.objectinspector.primitive.PrimitiveObjectInspectorFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: udtf</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: UDTF函数,分割成两个字段</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: MaPan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-22 22:40</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExplodUDTF2</span> <span class="keyword">extends</span> <span class="title">GenericUDTF</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; outList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StructObjectInspector <span class="title">initialize</span><span class="params">(StructObjectInspector argOIs)</span> <span class="keyword">throws</span> UDFArgumentException </span>&#123;</span><br><span class="line">        <span class="comment">// 1.定义输出数据的列名和类型</span></span><br><span class="line">        List&lt;String&gt; fieldNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.添加输出数据的列名</span></span><br><span class="line">        fieldNames.add(<span class="string">"word1"</span>);</span><br><span class="line">        fieldNames.add(<span class="string">"word2"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.定义输出数据的类型</span></span><br><span class="line">        List&lt;ObjectInspector&gt; fieldOIs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);</span><br><span class="line">        fieldOIs.add(PrimitiveObjectInspectorFactory.javaStringObjectInspector);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ObjectInspectorFactory.getStandardStructObjectInspector(fieldNames, fieldOIs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Object[] args)</span> <span class="keyword">throws</span> HiveException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取原始数据</span></span><br><span class="line">        String arg = args[<span class="number">0</span>].toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取数据传入的第二个参数，此处为分隔符</span></span><br><span class="line">        String splitKey = args[<span class="number">1</span>].toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.将原始数据按照传入的分隔符进行切分</span></span><br><span class="line">        String[] fields = arg.split(splitKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.遍历切分后的结果，并写出</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//集合为复用的，首先清空集合</span></span><br><span class="line">        outList.clear();</span><br><span class="line">        outList.add(fields[<span class="number">0</span>]);</span><br><span class="line">        outList.add(fields[<span class="number">1</span>]);</span><br><span class="line">        forward(outList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> HiveException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行效果如下，这样就把一个字段直接拆成了两个字段。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">create <span class="keyword">function</span> mp_explod as <span class="string">"tech.mapan.hive.udtf.ExplodUDTF2"</span>;</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.029 seconds</span><br><span class="line"></span><br><span class="line">hive (prac)&gt; select * from test03;</span><br><span class="line">OK</span><br><span class="line">test03.idtest03.name</span><br><span class="line">1001jack<span class="comment">#ma</span></span><br><span class="line">1002dong<span class="comment">#liu</span></span><br><span class="line">1003poney<span class="comment">#ma</span></span><br><span class="line">Time taken: 0.522 seconds, Fetched: 3 row(s)</span><br><span class="line"></span><br><span class="line">hive (prac)&gt; select id,first_name,last_name from test03 lateral view mp_explod2(name,<span class="string">"#"</span>) temp as first_name,last_name;</span><br><span class="line">OK</span><br><span class="line">idfirst_namelast_name</span><br><span class="line">1001jackma</span><br><span class="line">1002dongliu</span><br><span class="line">1003poneyma</span><br><span class="line">Time taken: 13.393 seconds, Fetched: 3 row(s)</span><br></pre></td></tr></table></figure><p>补充一点：</p><p>关于Lateral View在官网这样介绍：</p><blockquote><h2 id="Lateral-View-Syntax"><a href="#Lateral-View-Syntax" class="headerlink" title="Lateral View Syntax"></a>Lateral View Syntax</h2><p><code>lateralView: LATERAL VIEW udtf(expression) tableAlias AS columnAlias (&#39;,&#39;columnAlias)*</code><br><code>fromClause: FROM baseTable (lateralView)*</code></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Lateral view is used in conjunction with user-defined table generating functions such as <code>explode()</code>. As mentioned in <a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF#LanguageManualUDF-Built-inTable-GeneratingFunctions(UDTF">Built-in Table-Generating Functions</a>), a UDTF generates zero or more output rows for each input row. A lateral view first applies the UDTF to each row of base table and then joins resulting output rows to the input rows to form a virtual table having the supplied table alias.</p></blockquote><p>Lateral View一般与用户自定义表生成函数（如explode()）结合使用。 如<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF#LanguageManualUDF-Built-inTable-GeneratingFunctions(UDTF">内置表生成函数</a> 中所述，UDTF为每个输入行生成零个或多个输出行。 Lateral View 首先将UDTF应用于基表的每一行，然后将结果输出行连接到输入行，以形成具有提供的表别名的虚拟表。</p><p>附：<a href="6be3/udtf-1.0-SNAPSHOT.jar" target="_blank">jar包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在一些应用场景中，需要对一个字段进行分割，形成多个字段，比如日志信息使用#号连接字段，那么在导入数据仓库的时候，使用UDTF函数就显得比较方便和得心应手了。&lt;br&gt;在Hive的官网上，可以看到最UDTF的介绍是这样的：&lt;/p&gt;&lt;blockquote&gt;&lt;h3 id=&quot;Gene
      
    
    </summary>
    
      <category term="数据仓库" scheme="https://mapan.tech/cn/categories/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>Hive的UDF函数</title>
    <link href="https://mapan.tech/cn/d960.html"/>
    <id>https://mapan.tech/cn/d960.html</id>
    <published>2020-03-21T14:36:35.000Z</published>
    <updated>2020-03-22T05:58:51.296Z</updated>
    
    <content type="html"><![CDATA[<p>Hive中给了很多系统函数，<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF" target="_blank">官网</a> 给了很多函数可以参考。但是复杂的业务中，官方函数并不一定能满足特定化的需求，这时可以自定义函数来满足需求。</p><p>参考：官网中的关于UDF部分的<a href="https://cwiki.apache.org/confluence/display/Hive/HivePlugins" target="_blank">链接</a></p><h3 id="1-在IDEA中创建一个项目，配置pom-xml-添加依赖如下："><a href="#1-在IDEA中创建一个项目，配置pom-xml-添加依赖如下：" class="headerlink" title="1.  在IDEA中创建一个项目，配置pom.xml 添加依赖如下："></a>1. 在IDEA中创建一个项目，配置pom.xml 添加依赖如下：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-exec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-创建一个类，例如创建一个把字符串全部转换为小写的UDF"><a href="#2-创建一个类，例如创建一个把字符串全部转换为小写的UDF" class="headerlink" title="2. 创建一个类，例如创建一个把字符串全部转换为小写的UDF"></a>2. 创建一个类，例如创建一个把字符串全部转换为小写的UDF</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tech.mapan.hive;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDF;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: UDF</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: UDF函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: MaPan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-22 09:13</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lower</span> <span class="keyword">extends</span> <span class="title">UDF</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">evaluate</span> <span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-打jar包，把jar包放在-opt-local-hive-lib"><a href="#3-打jar包，把jar包放在-opt-local-hive-lib" class="headerlink" title="3. 打jar包，把jar包放在 /opt/local/hive/lib"></a>3. 打jar包，把jar包放在 /opt/local/hive/lib</h3><p>这一步就不在赘述，默认大家都会</p><h3 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4. 配置环境变量"></a>4. 配置环境变量</h3><p>CDH<a href="https://docs.cloudera.com/documentation/enterprise/latest/topics/cm_mc_hive_udf.html#hive-aux-jars-dir" target="_blank">官网</a>写的在hive-site.xml中配置<code>hive.aux.jars.path</code>，但是我配置完后并没有生效，不过官网写</p><blockquote><p>The directory location is set in the environment as <code>HIVE_AUX_JARS_PATH</code> and will generally override the <code>hive.aux.jars.path</code> property set in XML files, even if <code>hive.aux.jars.path</code> is set in an advanced configuration snippet.</p></blockquote><p>意思就是环境变量的优先级要高于XML，所以建议直接配置环境变量。</p><p>在root用户下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile.d/hive.sh </span><br><span class="line"><span class="comment"># 添加如下内容并保存</span></span><br><span class="line"><span class="built_in">export</span> HIVE_AUX_JARS_PATH=/opt/<span class="built_in">local</span>/hive/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HIVE_AUX_JARS_PATH</span></span><br></pre></td></tr></table></figure><p>执行<code>source /etc/profile</code>刷新环境变量。</p><h3 id="5-进入hive-cli中，创建函数"><a href="#5-进入hive-cli中，创建函数" class="headerlink" title="5. 进入hive-cli中，创建函数"></a>5. 进入hive-cli中，创建函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; create <span class="keyword">function</span> mylower as <span class="string">"tech.mapan.hive.Lower"</span>;</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.285 seconds</span><br><span class="line"></span><br><span class="line">hive (default)&gt;  select mylower(<span class="string">"HELLO WORLD"</span>);</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">hello world</span><br><span class="line">Time taken: 0.18 seconds, Fetched: 1 row(s)</span><br></pre></td></tr></table></figure><p>这样就向系统添加了一个函数 mylower(), 退出hive-cli再次进入依然生效。</p><hr><p>随手写了几个常用的UDF函数:</p><ul><li>输入两个数，输出按位与的结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tech.mapan.hive;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDF;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: UDF</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 按位与</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: MaPan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-22 12:29</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitAnd</span> <span class="keyword">extends</span> <span class="title">UDF</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">evaluate</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">        String result;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="keyword">null</span> ||b==<span class="keyword">null</span>)&#123;</span><br><span class="line">            result = <span class="keyword">null</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i = Integer.parseInt(a);</span><br><span class="line">            <span class="keyword">int</span> j = Integer.parseInt(b);</span><br><span class="line">            result = Integer.toString(i &amp; j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输入几个数，找出这些数中最大的数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tech.mapan.hive;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDF;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: UDF</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 求一组数中的最大值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: MaPan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-22 12:49</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Greatest</span> <span class="keyword">extends</span> <span class="title">UDF</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">evaluate</span><span class="params">(String... strings)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[strings.length];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (String s : strings) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arr[i++] = Integer.parseInt(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; max) &#123;</span><br><span class="line">                max = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Integer.toString(max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>地址脱敏</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tech.mapan.hive;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDF;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: UDF</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 地址脱敏, 对长度超过15个字符串, 只保留前15个字符, 不超过15个则不截取, 全部返回。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: MaPan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-22 11:19</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaskAddress</span> <span class="keyword">extends</span> <span class="title">UDF</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">evaluate</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String result = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.length() &gt; <span class="number">15</span>) &#123;</span><br><span class="line">            result = s.substring(<span class="number">0</span>, <span class="number">14</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>邮箱脱敏</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tech.mapan.hive;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDF;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: UDF</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 邮箱脱敏，@后面全部换成*</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: MaPan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-22 13:19</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaskMail</span> <span class="keyword">extends</span> <span class="title">UDF</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">evaluate</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String res = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">            res = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String[] split = s.split(<span class="string">"@"</span>);</span><br><span class="line">            res = split[<span class="number">0</span>] + <span class="string">"@*****"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>单号脱敏</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tech.mapan.hive;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDF;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: UDF</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 单号脱敏，保留头部尾部各两位，其他全部换成*</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: MaPan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-22 13:25</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaskNo</span> <span class="keyword">extends</span> <span class="title">UDF</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">evaluate</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String res = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">            res = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res = s.substring(<span class="number">0</span>, <span class="number">2</span>) + <span class="string">"****"</span> + s.substring(s.length() - <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>手机号脱敏</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package tech.mapan.hive;</span><br><span class="line"></span><br><span class="line">import org.apache.hadoop.hive.ql.exec.UDF;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @program: UDF</span><br><span class="line"> * @description: 手机号码脱敏，手机号码后6位换成*</span><br><span class="line"> * @author: MaPan</span><br><span class="line"> * @create: 2020-03-22 13:08</span><br><span class="line"> **/</span><br><span class="line">public class MaskPhone extends UDF &#123;</span><br><span class="line">    public String evaluate(String s) &#123;</span><br><span class="line">        String res = &quot;&quot;;</span><br><span class="line">        if (s == null) &#123;</span><br><span class="line">            res = null;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            res = s.substring(0, 5) + &quot;******&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>性别归一化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tech.mapan.hive;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDF;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: UDF</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 性别归一化，不同的系统中的性别不同有的是男和女，有的是F和M有的是1和0，针对不同的性别表示方式进行归一化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: MaPan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-22 13:47</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenderETL</span> <span class="keyword">extends</span> <span class="title">UDF</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">evaluate</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String res = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">            res = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.equals(<span class="string">"男"</span>) || s.equals(<span class="string">"M"</span>) || s.equals(<span class="string">"1"</span>)) &#123;</span><br><span class="line">                res = <span class="string">"男"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">"女"</span>) || s.equals(<span class="string">"F"</span>) || s.equals(<span class="string">"0"</span>)) &#123;</span><br><span class="line">                res = <span class="string">"女"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res = <span class="string">"未知"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>附：jar包<a href="d960/UDF-1.0-SNAPSHOT.jar" target="_blank">下载</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hive中给了很多系统函数，&lt;a href=&quot;https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF&quot; target=&quot;_blank&quot;&gt;官网&lt;/a&gt; 给了很多函数可以参考。但是复杂的业务中，官方
      
    
    </summary>
    
      <category term="数据仓库" scheme="https://mapan.tech/cn/categories/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>HQL必会50题</title>
    <link href="https://mapan.tech/cn/b8f1.html"/>
    <id>https://mapan.tech/cn/b8f1.html</id>
    <published>2020-03-17T14:01:47.000Z</published>
    <updated>2020-03-21T14:14:22.345Z</updated>
    
    <content type="html"><![CDATA[<p>平常加班不多，为了提高自己的SQL能力，找了网上流传的比较广泛的SQL50题，先把题目拿过来，计划抽空作为练习用HiveSQL完成。</p><p>开始日期：2020-03-18</p><p>完成日期：2020-03-21</p><p>建表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(s_id <span class="keyword">string</span>,s_name <span class="keyword">string</span>,s_birth <span class="keyword">string</span>,s_sex <span class="keyword">string</span>) <span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course(c_id <span class="keyword">string</span>,c_name <span class="keyword">string</span>,t_id <span class="keyword">string</span>) <span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher(t_id <span class="keyword">string</span>,t_name <span class="keyword">string</span>) <span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> score(s_id <span class="keyword">string</span>,c_id <span class="keyword">string</span>,s_score <span class="built_in">int</span>) <span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure><p>数据：</p><p><a href="https://mapan.tech/cn/b8f1/student.txt" target="_blank">student.txt</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">01赵雷1990-01-01男</span><br><span class="line">02钱电1990-12-21男</span><br><span class="line">03孙风1990-05-20男</span><br><span class="line">04李云1990-08-06男</span><br><span class="line">05周梅1991-12-01女</span><br><span class="line">06吴兰1992-03-01女</span><br><span class="line">07郑竹1989-07-01女</span><br><span class="line">08王菊1990-01-20女</span><br></pre></td></tr></table></figure><p><a href="https://mapan.tech/cn/b8f1/teacher.txt" target="_blank">teacher.txt</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">01张三</span><br><span class="line">02李四</span><br><span class="line">03王五</span><br></pre></td></tr></table></figure><p><a href="https://mapan.tech/cn/b8f1/course.txt" target="_blank">course.txt</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">01语文02</span><br><span class="line">02数学01</span><br><span class="line">03英语03</span><br></pre></td></tr></table></figure><p><a href="https://mapan.tech/cn/b8f1/score.txt" target="_blank">score.txt</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">010180</span><br><span class="line">010290</span><br><span class="line">010399</span><br><span class="line">020170</span><br><span class="line">020260</span><br><span class="line">020380</span><br><span class="line">030180</span><br><span class="line">030280</span><br><span class="line">030380</span><br><span class="line">040150</span><br><span class="line">040230</span><br><span class="line">040320</span><br><span class="line">050176</span><br><span class="line">050287</span><br><span class="line">060131</span><br><span class="line">060334</span><br><span class="line">070289</span><br><span class="line">070398</span><br></pre></td></tr></table></figure><p>加载数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'~/student.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'~/course.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> course;</span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'~/teacher.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> teacher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'~/score.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> score;</span><br></pre></td></tr></table></figure><p>表之间的关系如图：</p><p><img src="/cn/b8f1/Kinship.png" alt="表关系"></p><ul><li>1、查询”01”课程比”02”课程成绩高的学生的信息及课程分数:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    T0.*,</span><br><span class="line">    T1.s_score <span class="keyword">AS</span> c01,</span><br><span class="line">    T2.s_score <span class="keyword">as</span> c02</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    student <span class="keyword">AS</span> T0,</span><br><span class="line">    (<span class="keyword">SELECT</span> s_id,s_score <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_id=<span class="string">'01'</span>) <span class="keyword">AS</span> T1,</span><br><span class="line">    (<span class="keyword">SELECT</span> s_id,s_score <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_id=<span class="string">'02'</span>) <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">WHERE</span> T0.s_id=T1.s_id</span><br><span class="line"><span class="keyword">AND</span> T0.s_id=T2.s_id</span><br><span class="line"><span class="keyword">AND</span> T1.s_score&gt;T2.s_score;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/cn/b8f1/image-20200318221755774.png" alt="image-20200318221755774"></p><ul><li>2、查询同时存在” 01 “课程和” 02 “课程的情况:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    t3.*,</span><br><span class="line">    t1.s_score <span class="keyword">as</span> c01,</span><br><span class="line">    t2.s_score <span class="keyword">as</span> c02</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    (<span class="keyword">SELECT</span> s_id,s_score <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_id=<span class="string">'01'</span>) <span class="keyword">as</span> t1, <span class="comment">-- 选修01课程的同学</span></span><br><span class="line">    (<span class="keyword">SELECT</span> s_id,s_score <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_id=<span class="string">'02'</span>) <span class="keyword">as</span> t2, <span class="comment">-- 选修01课程的同学</span></span><br><span class="line">    student <span class="keyword">as</span> t3</span><br><span class="line"><span class="keyword">WHERE</span> t1.s_id=t2.s_id</span><br><span class="line"><span class="keyword">AND</span> t2.s_id=t3.s_id;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/cn/b8f1/image-20200318224041101.png" alt="image-20200318224041101"></p><ul><li>3、查询存在” 01 “课程但<strong>可能</strong>不存在” 02 “课程的情况(不存在时显示为 null )</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    t2.*,</span><br><span class="line">    t1.s_score <span class="keyword">AS</span> c01,</span><br><span class="line">    t3.s_score <span class="keyword">AS</span> c02 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    (<span class="keyword">SELECT</span> s_id,s_score <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_id=<span class="string">'01'</span>) <span class="keyword">AS</span> t1, <span class="comment">-- 选修01课程的同学</span></span><br><span class="line">    student <span class="keyword">AS</span> t2</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> s_id,s_score <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_id=<span class="string">'02'</span>) <span class="keyword">AS</span> t3 <span class="comment">-- 选修01课程的同学</span></span><br><span class="line"><span class="keyword">ON</span> t2.s_id = t3.s_id</span><br><span class="line"><span class="keyword">WHERE</span> t1.s_id=t2.s_id;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/cn/b8f1/image-20200318225024279.png" alt="image-20200318225024279"></p><ul><li>4、查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩:<br>(包括有成绩的和无成绩的)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.s_id,</span><br><span class="line">    T1.s_name,</span><br><span class="line">    T2.avg_sc</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">JOIN</span>(<span class="keyword">SELECT</span></span><br><span class="line">        s_id,</span><br><span class="line">        <span class="keyword">avg</span>(s_score) <span class="keyword">AS</span> avg_sc </span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line">    <span class="keyword">having</span> avg_sc&lt;<span class="number">60</span>) <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">ON</span> T1.s_id=T2.s_id;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/cn/b8f1/image-20200318225822830.png" alt="image-20200318225822830"></p><ul><li>5、查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.s_id,</span><br><span class="line">    T1.s_name,</span><br><span class="line">    T2.co_cnt,</span><br><span class="line">    T3.sum_score</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> s_id,<span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">AS</span> co_cnt <span class="keyword">FROM</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id) <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">ON</span> T1.s_id=T2.s_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> s_id,<span class="keyword">sum</span>(s_score) <span class="keyword">AS</span> sum_score <span class="keyword">FROM</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id) <span class="keyword">AS</span> T3</span><br><span class="line"><span class="keyword">ON</span> T1.s_id=T3.s_id;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/cn/b8f1/image-20200318231242423.png" alt="image-20200318231242423"></p><ul><li>6、查询”李”姓老师的数量:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> t_name <span class="keyword">LIKE</span> <span class="string">"李%"</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200319073738350.png" alt="image-20200319073738350"></p><ul><li>7、查询学过”张三”老师授课的同学的信息:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    T1.*,</span><br><span class="line">    T3.c_name,</span><br><span class="line">    T4.t_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    student <span class="keyword">AS</span> T1,</span><br><span class="line">    score <span class="keyword">AS</span> T2,</span><br><span class="line">    course <span class="keyword">AS</span> T3,</span><br><span class="line">    teacher <span class="keyword">AS</span> T4</span><br><span class="line"><span class="keyword">WHERE</span> T1.s_id=T2.s_id</span><br><span class="line"><span class="keyword">AND</span> T2.c_id=T3.c_id</span><br><span class="line"><span class="keyword">AND</span> T3.t_id=T4.t_id</span><br><span class="line"><span class="keyword">AND</span> T4.t_name=<span class="string">"张三"</span>;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/cn/b8f1/image-20200319074432715.png" alt="image-20200319074432715"></p><ul><li>8、查询没学过”张三”老师授课的同学的信息:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A1.* <span class="keyword">FROM</span> student <span class="keyword">AS</span> A1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span>(<span class="keyword">SELECT</span> </span><br><span class="line">                T1.s_id</span><br><span class="line">            <span class="keyword">FROM</span></span><br><span class="line">                student <span class="keyword">AS</span> T1,</span><br><span class="line">                score <span class="keyword">AS</span> T2,</span><br><span class="line">                course <span class="keyword">AS</span> T3,</span><br><span class="line">                teacher <span class="keyword">AS</span> T4</span><br><span class="line">            <span class="keyword">WHERE</span> T1.s_id=T2.s_id</span><br><span class="line">            <span class="keyword">AND</span> T2.c_id=T3.c_id</span><br><span class="line">            <span class="keyword">AND</span> T3.t_id=T4.t_id</span><br><span class="line">            <span class="keyword">AND</span> T4.t_name=<span class="string">"张三"</span>) <span class="keyword">AS</span> A2</span><br><span class="line"><span class="keyword">ON</span> A1.s_id=A2.s_id</span><br><span class="line"><span class="keyword">WHERE</span> A2.s_id <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/cn/b8f1/image-20200319075846289.png" alt="image-20200319075846289"></p><ul><li>9、查询学过编号为”01”并且也学过编号为”02”的课程的同学的信息:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.* </span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> A</span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span></span><br><span class="line">            T1.s_id</span><br><span class="line">        <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> s_id <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_id=<span class="string">'01'</span>) <span class="keyword">AS</span> T1</span><br><span class="line">        <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> s_id <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_id=<span class="string">'02'</span>) <span class="keyword">AS</span> T2</span><br><span class="line">        <span class="keyword">ON</span> T1.s_id=T2.s_id) <span class="keyword">AS</span> B</span><br><span class="line"><span class="keyword">ON</span> A.s_id=B.s_id;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/cn/b8f1/image-20200319080655329.png" alt="image-20200319080655329"></p><ul><li>10、查询学过编号为”01”但是没有学过编号为”02”的课程的同学的信息:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.* </span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> A</span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span></span><br><span class="line">            T1.s_id</span><br><span class="line">        <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> s_id <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_id=<span class="string">'01'</span>) <span class="keyword">AS</span> T1</span><br><span class="line">        <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> s_id <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_id=<span class="string">'02'</span>) <span class="keyword">AS</span> T2</span><br><span class="line">        <span class="keyword">ON</span> T1.s_id=T2.s_id</span><br><span class="line">        <span class="keyword">WHERE</span> T2.s_id <span class="keyword">IS</span> <span class="literal">NULL</span>) <span class="keyword">AS</span> B</span><br><span class="line"><span class="keyword">ON</span> A.s_id=B.s_id;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/cn/b8f1/image-20200319080957865.png" alt="image-20200319080957865"></p><ul><li>11、查询没有学全所有课程的同学的信息:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.*,</span><br><span class="line">    T2.CNT_C</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> s_id,<span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">AS</span> CNT_C <span class="keyword">FROM</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id) <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">ON</span> T1.s_id=T2.s_id</span><br><span class="line"><span class="keyword">WHERE</span> T2.CNT_C&lt;<span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200319221856619.png" alt="image-20200319221856619"></p><ul><li>12、查询至少有一门课与学号为”01”的同学所学相同的同学的信息:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    t3.*,</span><br><span class="line">    t4.cnt </span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> t3 </span><br><span class="line"><span class="keyword">JOIN</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> s_id,</span><br><span class="line">    <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">AS</span> cnt </span><br><span class="line">    <span class="keyword">FROM</span> score <span class="keyword">AS</span> t1 </span><br><span class="line">    <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> c_id </span><br><span class="line">          <span class="keyword">FROM</span> score</span><br><span class="line">          <span class="keyword">WHERE</span> s_id =<span class="string">"01"</span>) <span class="keyword">AS</span> t2 </span><br><span class="line">    <span class="keyword">ON</span> t1.c_id = t2.c_id </span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id </span><br><span class="line">    <span class="keyword">HAVING</span> cnt&gt;<span class="number">0</span>) <span class="keyword">AS</span> t4 </span><br><span class="line"><span class="keyword">ON</span> t3.s_id=t4.s_id;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200319223531461.png" alt="image-20200319223531461"></p><ul><li>13、查询和”01”号的同学学习的课程完全相同的其他同学的信息:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    A1.*,</span><br><span class="line">    A2.CNT_C</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> A1</span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> T1.s_id,<span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">AS</span> CNT_C</span><br><span class="line">        <span class="keyword">FROM</span> score <span class="keyword">AS</span> T1</span><br><span class="line">        <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> c_id <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> s_id=<span class="string">'01'</span>) <span class="keyword">AS</span> T2</span><br><span class="line">        <span class="keyword">ON</span> T1.c_id=T2.c_id</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> T1.s_id) <span class="keyword">AS</span> A2</span><br><span class="line"><span class="keyword">ON</span> A1.s_id=A2.s_id</span><br><span class="line"><span class="keyword">AND</span> A1.S_id&lt;&gt;<span class="string">'01'</span></span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">AS</span> CNT_C <span class="keyword">FROM</span> score <span class="keyword">where</span> s_id=<span class="string">'01'</span>) <span class="keyword">AS</span> A3</span><br><span class="line"><span class="keyword">ON</span> A2.CNT_C=A3.CNT_C;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200319230518263.png" alt="image-20200319230518263"></p><ul><li>14、查询没学过”张三”老师讲授的任一门课程的学生姓名:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S1.s_name </span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> S1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span></span><br><span class="line">                A1.s_id</span><br><span class="line">            <span class="keyword">FROM</span> score <span class="keyword">AS</span> A1</span><br><span class="line">            <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> T2.c_id </span><br><span class="line">                    <span class="keyword">FROM</span> teacher <span class="keyword">AS</span> T1 </span><br><span class="line">                    <span class="keyword">JOIN</span> course <span class="keyword">AS</span> T2</span><br><span class="line">                    <span class="keyword">ON</span> T1.t_id=T2.t_id</span><br><span class="line">                    <span class="keyword">WHERE</span> T1.t_name=<span class="string">'张三'</span>) <span class="keyword">AS</span> A2</span><br><span class="line">            <span class="keyword">ON</span> A1.c_id=A2.c_id</span><br><span class="line">            <span class="keyword">GROUP</span> <span class="keyword">BY</span> A1.s_id) <span class="keyword">AS</span> S2</span><br><span class="line"><span class="keyword">ON</span> S1.s_id=S2.s_id</span><br><span class="line"><span class="keyword">WHERE</span> S2.s_id <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200319232211741.png" alt="image-20200319232211741"></p><ul><li>15、查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.s_id,</span><br><span class="line">    T1.s_name,</span><br><span class="line">    T3.AVG_C</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span></span><br><span class="line">        s_id,</span><br><span class="line">        <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">AS</span> CNT_C</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">WHERE</span> s_score&lt;<span class="number">60</span></span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line">    <span class="keyword">having</span> CNT_C&gt;=<span class="number">2</span>) <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">ON</span> T1.s_id=T2.s_id</span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span></span><br><span class="line">            s_id,</span><br><span class="line">            <span class="keyword">AVG</span>(s_score) <span class="keyword">AS</span> AVG_C</span><br><span class="line">        <span class="keyword">FROM</span> score</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id) <span class="keyword">AS</span> T3</span><br><span class="line"><span class="keyword">ON</span> T1.s_id=T3.s_id;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200320080055175.png" alt="image-20200320080055175"></p><ul><li>16、检索”01”课程分数小于60，按分数降序排列的学生信息:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.*,</span><br><span class="line">    T2.s_score</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span></span><br><span class="line">            s_id,</span><br><span class="line">            s_score</span><br><span class="line">        <span class="keyword">FROM</span> score</span><br><span class="line">        <span class="keyword">WHERE</span> c_id=<span class="string">'01'</span></span><br><span class="line">        <span class="keyword">AND</span> s_score&lt;<span class="number">60</span>) <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">ON</span> T1.S_id=T2.s_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> T2.s_score <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/cn/b8f1/image-20200320080551819.png" alt="image-20200320080551819"></p><ul><li>17、按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩:</li></ul><p>尝试用WITH的写法，相对常规写法逻辑还是比较清晰的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> T1 <span class="keyword">AS</span> (</span><br><span class="line"><span class="comment">-- 平均分</span></span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        s_id,</span><br><span class="line">        <span class="keyword">AVG</span>(s_score) <span class="keyword">AS</span> AVG_S</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line">), T2 <span class="keyword">AS</span>(</span><br><span class="line"><span class="comment">-- 语文分数</span></span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        s_id,</span><br><span class="line">        s_score</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">WHERE</span> c_id=<span class="string">'01'</span></span><br><span class="line">)</span><br><span class="line">, T3 <span class="keyword">AS</span>(</span><br><span class="line"><span class="comment">-- 数学分数</span></span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        s_id,</span><br><span class="line">        s_score</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">WHERE</span> c_id=<span class="string">'02'</span></span><br><span class="line">), T4 <span class="keyword">AS</span>(</span><br><span class="line"><span class="comment">-- 英语分数</span></span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        s_id,</span><br><span class="line">        s_score</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">WHERE</span> c_id=<span class="string">'03'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T0.s_id,</span><br><span class="line">    T0.s_name,</span><br><span class="line">    (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> T1.AVG_S <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">THEN</span> <span class="string">'0'</span> <span class="keyword">ELSE</span> <span class="keyword">round</span>(T1.AVG_S,<span class="number">2</span>) <span class="keyword">END</span>) <span class="keyword">AS</span> AVG_S,</span><br><span class="line">    (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> T2.s_score <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">THEN</span> <span class="string">'0'</span> <span class="keyword">ELSE</span> T2.s_score <span class="keyword">END</span>) <span class="keyword">AS</span> CHINESE,</span><br><span class="line">    (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> T3.s_score <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">THEN</span> <span class="string">'0'</span> <span class="keyword">ELSE</span> T3.s_score <span class="keyword">END</span>) <span class="keyword">AS</span> MATH,</span><br><span class="line">    (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> T4.s_score <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">THEN</span> <span class="string">'0'</span> <span class="keyword">ELSE</span> T4.s_score <span class="keyword">END</span>) <span class="keyword">AS</span> ENGLISH</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> T0</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> T1</span><br><span class="line"><span class="keyword">ON</span> T1.s_id=T0.s_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> T2</span><br><span class="line"><span class="keyword">ON</span> T2.s_id=T0.s_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> T3</span><br><span class="line"><span class="keyword">ON</span> T3.s_id=T0.s_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> T4</span><br><span class="line"><span class="keyword">ON</span> T4.s_id=T0.s_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> AVG_S <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321105038801.png" alt="image-20200321105038801"></p><ul><li>18.查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分， ，平均分，及格率，中等率，优良率，优秀率: （及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> A1 <span class="keyword">AS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        c_id,</span><br><span class="line">        <span class="keyword">MAX</span>(s_score) <span class="keyword">AS</span> max_c,</span><br><span class="line">        <span class="keyword">MIN</span>(s_score) <span class="keyword">AS</span> min_c,</span><br><span class="line">        <span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(s_score),<span class="number">2</span>)  <span class="keyword">AS</span> avg_c,</span><br><span class="line">        <span class="keyword">ROUND</span>(<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score&gt;=<span class="number">60</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)/<span class="keyword">count</span>(s_score),<span class="number">2</span>) <span class="keyword">AS</span> L1,</span><br><span class="line">        <span class="keyword">ROUND</span>(<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score <span class="keyword">BETWEEN</span> <span class="number">70</span> <span class="keyword">AND</span> <span class="number">79</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)/<span class="keyword">count</span>(s_score),<span class="number">2</span>)  <span class="keyword">AS</span> L2,</span><br><span class="line">        <span class="keyword">ROUND</span>(<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score <span class="keyword">BETWEEN</span> <span class="number">80</span> <span class="keyword">AND</span> <span class="number">89</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)/<span class="keyword">count</span>(s_score),<span class="number">2</span>)  <span class="keyword">AS</span> L3,</span><br><span class="line">        <span class="keyword">ROUND</span>(<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score&gt;=<span class="number">90</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)/<span class="keyword">count</span>(s_score),<span class="number">2</span>)  <span class="keyword">AS</span> L4</span><br><span class="line">    <span class="keyword">FROM</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    A0.c_id,</span><br><span class="line">    A0.c_name,</span><br><span class="line">    A1.max_c,</span><br><span class="line">    A1.min_c,</span><br><span class="line">    A1.avg_c,</span><br><span class="line">    A1.L1,</span><br><span class="line">    A1.L2,</span><br><span class="line">    A1.L3,</span><br><span class="line">    A1.L4</span><br><span class="line"><span class="keyword">FROM</span> course <span class="keyword">AS</span> A0</span><br><span class="line"><span class="keyword">JOIN</span> A1</span><br><span class="line"><span class="keyword">ON</span> A0.c_id=A1.c_id;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321153421319.png" alt="image-20200321153421319"></p><ul><li>19、按各科成绩进行排序，并显示排名:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    T1.s_id,</span><br><span class="line">    T3.s_name,</span><br><span class="line">    T1.c_id,</span><br><span class="line">    T2.c_name,</span><br><span class="line">    T1.s_score,</span><br><span class="line">    RANK() OVER (PARTITION BY T1.c_id ORDER BY T1.s_score DESC)</span><br><span class="line">FROM score AS T1</span><br><span class="line">JOIN course AS T2</span><br><span class="line">ON T1.c_id=T2.c_id</span><br><span class="line">JOIN student AS T3</span><br><span class="line">ON T1.s_id=T3.s_id;</span><br></pre></td></tr></table></figure><ul><li>20、查询学生的总成绩并进行排名:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.s_id,</span><br><span class="line">    T3.s_name,</span><br><span class="line">    <span class="keyword">sum</span>(T1.s_score) <span class="keyword">AS</span> SUM_C,</span><br><span class="line">    <span class="keyword">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">sum</span>(T1.s_score) <span class="keyword">DESC</span>)</span><br><span class="line"><span class="keyword">FROM</span> score <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">JOIN</span> student <span class="keyword">AS</span> T3</span><br><span class="line"><span class="keyword">ON</span> T1.s_id=T3.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> T1.s_id,T3.s_name;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/cn/b8f1/image-20200321181506578.png" alt="image-20200321181506578"></p><ul><li>21、查询不同老师所教不同课程平均分从高到低显示:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.c_id,</span><br><span class="line">    T3.t_name,</span><br><span class="line">    <span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(T1.s_score),<span class="number">2</span>),</span><br><span class="line">    <span class="keyword">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">AVG</span>(T1.s_score) <span class="keyword">DESC</span>)</span><br><span class="line"><span class="keyword">FROM</span> score <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">JOIN</span> course <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">ON</span> T1.c_id=T2.c_id</span><br><span class="line"><span class="keyword">JOIN</span> teacher <span class="keyword">AS</span> T3</span><br><span class="line"><span class="keyword">ON</span> T2.t_id=T3.t_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> T1.c_id,T3.t_name;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/cn/b8f1/image-20200321181609080.png" alt="image-20200321181609080"></p><ul><li>22、查询所有课程的成绩第2名到第3名的学生信息及该课程成绩:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> A1 <span class="keyword">AS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        T1.s_id,</span><br><span class="line">        T3.s_name,</span><br><span class="line">        T1.c_id,</span><br><span class="line">        T2.c_name,</span><br><span class="line">        T1.s_score,</span><br><span class="line">        <span class="keyword">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> T1.c_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> T1.s_score <span class="keyword">DESC</span>) <span class="keyword">AS</span> rk</span><br><span class="line">    <span class="keyword">FROM</span> score <span class="keyword">AS</span> T1</span><br><span class="line">    <span class="keyword">JOIN</span> course <span class="keyword">AS</span> T2</span><br><span class="line">    <span class="keyword">ON</span> T1.c_id=T2.c_id</span><br><span class="line">    <span class="keyword">JOIN</span> student <span class="keyword">AS</span> T3</span><br><span class="line">    <span class="keyword">ON</span> T1.s_id=T3.s_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> A1.*</span><br><span class="line"><span class="keyword">FROM</span> A1</span><br><span class="line"><span class="keyword">WHERE</span> A1.rk=<span class="number">2</span> <span class="keyword">OR</span> A1.rk=<span class="number">3</span>;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/cn/b8f1/image-20200321181701546.png" alt="image-20200321181701546"></p><ul><li>23、统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> A1 <span class="keyword">AS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        c_id,</span><br><span class="line">        <span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score <span class="keyword">BETWEEN</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">59</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> L0, <span class="comment">-- [0-59分的人数]</span></span><br><span class="line">        <span class="keyword">ROUND</span>(<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score <span class="keyword">BETWEEN</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">59</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)/<span class="keyword">COUNT</span>(<span class="number">1</span>),<span class="number">2</span>) <span class="keyword">AS</span> H0, <span class="comment">-- [0-59分的人数占比]</span></span><br><span class="line">        <span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score <span class="keyword">BETWEEN</span> <span class="number">60</span> <span class="keyword">AND</span> <span class="number">70</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> L1, <span class="comment">-- [60-69分的人数]</span></span><br><span class="line">        <span class="keyword">ROUND</span>(<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score <span class="keyword">BETWEEN</span> <span class="number">60</span> <span class="keyword">AND</span> <span class="number">69</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)/<span class="keyword">COUNT</span>(<span class="number">1</span>),<span class="number">2</span>) <span class="keyword">AS</span> H1, <span class="comment">-- [60-69分的人数占比]</span></span><br><span class="line">        <span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score <span class="keyword">BETWEEN</span> <span class="number">70</span> <span class="keyword">AND</span> <span class="number">85</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)  <span class="keyword">AS</span> L2, <span class="comment">-- [70-85分的人数]</span></span><br><span class="line">        <span class="keyword">ROUND</span>(<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score <span class="keyword">BETWEEN</span> <span class="number">70</span> <span class="keyword">AND</span> <span class="number">85</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)/<span class="keyword">COUNT</span>(<span class="number">1</span>),<span class="number">2</span>) <span class="keyword">AS</span> H2, <span class="comment">-- [70-85分的人数占比]</span></span><br><span class="line">        <span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score <span class="keyword">BETWEEN</span> <span class="number">86</span> <span class="keyword">AND</span> <span class="number">100</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)  <span class="keyword">AS</span> L3, <span class="comment">-- [86-100分的人数]</span></span><br><span class="line">        <span class="keyword">ROUND</span>(<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score <span class="keyword">BETWEEN</span> <span class="number">86</span> <span class="keyword">AND</span> <span class="number">100</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)/<span class="keyword">COUNT</span>(<span class="number">1</span>),<span class="number">2</span>) <span class="keyword">AS</span> H3 <span class="comment">-- [86-100分的人数占比]</span></span><br><span class="line">    <span class="keyword">FROM</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    A0.c_id,</span><br><span class="line">    A0.c_name,</span><br><span class="line">    A1.L3,</span><br><span class="line">    A1.H3,</span><br><span class="line">    A1.L2,</span><br><span class="line">    A1.H2,</span><br><span class="line">    A1.L1,</span><br><span class="line">    A1.H1,</span><br><span class="line">    A1.L0,</span><br><span class="line">    A1.H0</span><br><span class="line"><span class="keyword">FROM</span> course <span class="keyword">AS</span> A0</span><br><span class="line"><span class="keyword">JOIN</span> A1</span><br><span class="line"><span class="keyword">ON</span> A0.c_id=A1.c_id;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/cn/b8f1/image-20200321181822411.png" alt="image-20200321181822411"></p><ul><li>24、查询学生平均成绩及其名次:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.s_id,</span><br><span class="line">    T3.s_name,</span><br><span class="line">    <span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(T1.s_score),<span class="number">2</span>) <span class="keyword">AS</span> AVG_C,</span><br><span class="line">    <span class="keyword">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">sum</span>(T1.s_score) <span class="keyword">DESC</span>)</span><br><span class="line"><span class="keyword">FROM</span> score <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">JOIN</span> student <span class="keyword">AS</span> T3</span><br><span class="line"><span class="keyword">ON</span> T1.s_id=T3.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> T1.s_id,T3.s_name;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321181938010.png" alt="image-20200321181938010"></p><ul><li>25、查询各科成绩前三名的记录<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> A1 <span class="keyword">AS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        T1.s_id,</span><br><span class="line">        T3.s_name,</span><br><span class="line">        T1.c_id,</span><br><span class="line">        T2.c_name,</span><br><span class="line">        T1.s_score,</span><br><span class="line">        <span class="keyword">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> T1.c_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> T1.s_score <span class="keyword">DESC</span>) <span class="keyword">AS</span> rk</span><br><span class="line">    <span class="keyword">FROM</span> score <span class="keyword">AS</span> T1</span><br><span class="line">    <span class="keyword">JOIN</span> course <span class="keyword">AS</span> T2</span><br><span class="line">    <span class="keyword">ON</span> T1.c_id=T2.c_id</span><br><span class="line">    <span class="keyword">JOIN</span> student <span class="keyword">AS</span> T3</span><br><span class="line">    <span class="keyword">ON</span> T1.s_id=T3.s_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> A1.*</span><br><span class="line"><span class="keyword">FROM</span> A1</span><br><span class="line"><span class="keyword">WHERE</span> A1.rk&lt;=<span class="number">3</span>;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/cn/b8f1/image-20200321182026689.png" alt="image-20200321182026689"></p><ul><li>26、查询每门课程被选修的学生数:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.c_id,</span><br><span class="line">    T2.c_name,</span><br><span class="line">    <span class="keyword">COUNT</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">FROM</span> score <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">JOIN</span> course <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">ON</span> T1.c_id=T2.c_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> T1.c_id,T2.c_name</span><br></pre></td></tr></table></figure></li></ul><p><img src="/cn/b8f1/image-20200321182103466.png" alt="image-20200321182103466"></p><ul><li>27、查询出只有两门课程的全部学生的学号和姓名:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> A1 <span class="keyword">AS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        T1.s_id,</span><br><span class="line">        <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">AS</span> CNT</span><br><span class="line">    <span class="keyword">FROM</span> score <span class="keyword">AS</span> T1</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> T1.s_id</span><br><span class="line">    <span class="keyword">HAVING</span> CNT=<span class="number">2</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    A2.s_id,</span><br><span class="line">    A2.s_name,</span><br><span class="line">    A1.CNT</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> A2</span><br><span class="line"><span class="keyword">JOIN</span> A1 </span><br><span class="line"><span class="keyword">ON</span> A1.s_id=A2.s_id;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/cn/b8f1/image-20200321182151875.png" alt="image-20200321182151875"></p><ul><li>28、查询男生、女生人数:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.s_sex,</span><br><span class="line">    <span class="keyword">COUNT</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_sex;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/cn/b8f1/image-20200321182221250.png" alt="image-20200321182221250"></p><ul><li>29、查询名字中含有”风”字的学生信息:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.*</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">WHERE</span> T1.s_name <span class="keyword">LIKE</span> <span class="string">"%风%"</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/cn/b8f1/image-20200321182246186.png" alt="image-20200321182246186"></p><ul><li>30、查询同名同性学生名单，并统计同名人数:</li></ul><p>数据中发现没有同名同性的学生，先插入几条</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span></span><br><span class="line">(<span class="string">'09'</span> , <span class="string">'张三'</span> , <span class="string">'2017-12-20'</span> , <span class="string">'女'</span>),</span><br><span class="line">(<span class="string">'10'</span> , <span class="string">'李四'</span> , <span class="string">'2017-12-25'</span> , <span class="string">'女'</span>),</span><br><span class="line">(<span class="string">'11'</span> , <span class="string">'李四'</span> , <span class="string">'2012-06-06'</span> , <span class="string">'女'</span>),</span><br><span class="line">(<span class="string">'12'</span> , <span class="string">'赵六'</span> , <span class="string">'2013-06-13'</span> , <span class="string">'女'</span>),</span><br><span class="line">(<span class="string">'13'</span> , <span class="string">'孙七'</span> , <span class="string">'2014-06-01'</span> , <span class="string">'女'</span>);</span><br></pre></td></tr></table></figure><p>然后找同名同性的学生</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s_name,</span><br><span class="line">    s_sex,</span><br><span class="line">    <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">AS</span> CNT_N</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_name,s_sex</span><br><span class="line"><span class="keyword">HAVING</span> CNT_N&gt;<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321182748601.png" alt="image-20200321182748601"></p><ul><li>31、查询1990年出生的学生名单:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> s_birth <span class="keyword">BETWEEN</span> <span class="string">'1990-01-01'</span> <span class="keyword">AND</span> <span class="string">'1990-12-31'</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321182943315.png" alt="image-20200321182943315"></p><ul><li>32、查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> T1 <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        c_id,</span><br><span class="line">        <span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(s_score),<span class="number">2</span>) <span class="keyword">AS</span> AVG_C</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.c_id,</span><br><span class="line">    T0.c_name,</span><br><span class="line">    T1.AVG_C</span><br><span class="line"><span class="keyword">FROM</span> course <span class="keyword">AS</span> T0</span><br><span class="line"><span class="keyword">JOIN</span> T1</span><br><span class="line"><span class="keyword">ON</span> T0.c_id=T1.c_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> T1.AVG_C <span class="keyword">DESC</span>,T1.c_id;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321183807915.png" alt="image-20200321183807915"></p><ul><li>33、查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> T1 <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        s_id,</span><br><span class="line">        <span class="keyword">AVG</span>(s_score) <span class="keyword">AS</span> AVG_S</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line">    <span class="keyword">HAVING</span> AVG_S&gt;=<span class="number">85</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T0.s_id,</span><br><span class="line">    T0.s_name,</span><br><span class="line">    T1.AVG_S</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">as</span> T0</span><br><span class="line"><span class="keyword">JOIN</span> T1</span><br><span class="line"><span class="keyword">ON</span> T0.s_id=T1.s_id;</span><br></pre></td></tr></table></figure><ul><li>34、查询课程名称为”数学”，且分数低于60的学生姓名和分数:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> T1 <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        s_id,</span><br><span class="line">        <span class="keyword">AVG</span>(s_score) <span class="keyword">AS</span> AVG_S</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line">    <span class="keyword">HAVING</span> AVG_S&gt;=<span class="number">85</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T0.s_id,</span><br><span class="line">    T0.s_name,</span><br><span class="line">    <span class="keyword">ROUND</span>(T1.AVG_S,<span class="number">2</span>) <span class="keyword">AS</span> AVG_S</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">as</span> T0</span><br><span class="line"><span class="keyword">JOIN</span> T1</span><br><span class="line"><span class="keyword">ON</span> T0.s_id=T1.s_id;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321194621260.png" alt="image-20200321194621260"></p><ul><li>35、查询所有学生的课程及分数情况:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> T1 <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        s_id,</span><br><span class="line">        s_score</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">WHERE</span> c_id=<span class="string">'01'</span></span><br><span class="line">), T2 <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        s_id,</span><br><span class="line">        s_score</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">WHERE</span> c_id=<span class="string">'02'</span></span><br><span class="line">), T3 <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        s_id,</span><br><span class="line">        s_score</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">WHERE</span> c_id=<span class="string">'03'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T0.s_id,</span><br><span class="line">    T0.s_name,</span><br><span class="line">    (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> T1.s_score <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">THEN</span> <span class="string">"未选修"</span> <span class="keyword">ELSE</span> T1.s_score <span class="keyword">END</span>) <span class="keyword">AS</span> CHINESE,</span><br><span class="line">    (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> T2.s_score <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">THEN</span> <span class="string">"未选修"</span> <span class="keyword">ELSE</span> T2.s_score <span class="keyword">END</span>) <span class="keyword">AS</span> MATH,</span><br><span class="line">    (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> T3.s_score <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">THEN</span> <span class="string">"未选修"</span> <span class="keyword">ELSE</span> T3.s_score <span class="keyword">END</span>) <span class="keyword">AS</span> ENGLISH</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> T0</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> T1</span><br><span class="line"><span class="keyword">ON</span> T0.s_id=T1.s_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> T2</span><br><span class="line"><span class="keyword">ON</span> T0.s_id=T2.s_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> T3</span><br><span class="line"><span class="keyword">ON</span> T0.s_id=T3.s_id;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321195553301.png" alt="image-20200321195553301"></p><ul><li>36、查询任何一门课程成绩在70分以上的学生姓名、课程名称和分数:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="comment">-- T0.s_id,</span></span><br><span class="line">    T1.s_name,</span><br><span class="line">    <span class="comment">-- T0.c_id,</span></span><br><span class="line">    T2.c_name,</span><br><span class="line">    T0.s_score</span><br><span class="line"><span class="keyword">FROM</span> score <span class="keyword">AS</span> T0</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">ON</span> T0.s_id=T1.s_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> course <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">ON</span> T0.c_id=T2.c_id</span><br><span class="line"><span class="keyword">WHERE</span> T0.s_score&gt;<span class="number">70</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321200351423.png" alt="image-20200321200351423"></p><ul><li>37、查询课程不及格的学生:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="comment">-- T0.s_id,</span></span><br><span class="line">    T1.s_name,</span><br><span class="line">    <span class="comment">-- T0.c_id,</span></span><br><span class="line">    T2.c_name,</span><br><span class="line">    T0.s_score</span><br><span class="line"><span class="keyword">FROM</span> score <span class="keyword">AS</span> T0</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">ON</span> T0.s_id=T1.s_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> course <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">ON</span> T0.c_id=T2.c_id</span><br><span class="line"><span class="keyword">WHERE</span> T0.s_score&lt;<span class="number">60</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321200449627.png" alt="image-20200321200449627"></p><ul><li>38、查询课程编号为01且课程成绩在80分及以上的学生的学号和姓名:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.s_id,</span><br><span class="line">    T2.s_name</span><br><span class="line"><span class="keyword">FROM</span> score <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">JOIN</span> student <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">ON</span> T1.s_id=T2.s_id</span><br><span class="line"><span class="keyword">WHERE</span> T1.c_id=<span class="string">'01'</span></span><br><span class="line"><span class="keyword">AND</span> T1.s_score&gt;=<span class="number">80</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321201135781.png" alt="image-20200321201135781"></p><ul><li>39、求每门课程的学生人数:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> T1 <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        c_id,</span><br><span class="line">        <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">AS</span> CNT_S</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T2.c_id,</span><br><span class="line">    T2.c_name,</span><br><span class="line">    T1.CNT_S</span><br><span class="line"><span class="keyword">FROM</span> course <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">JOIN</span> T1</span><br><span class="line"><span class="keyword">ON</span> T1.c_id=T2.c_id;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321201506854.png" alt="image-20200321201506854"></p><ul><li>40、查询选修”张三”老师所授课程的学生中，成绩最高的学生信息及其成绩:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> T1 <span class="keyword">AS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        A4.*,</span><br><span class="line">        A3.s_score,</span><br><span class="line">        <span class="keyword">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> A3.s_score <span class="keyword">DESC</span>) <span class="keyword">AS</span> RK</span><br><span class="line">    <span class="keyword">FROM</span> teacher <span class="keyword">AS</span> A1</span><br><span class="line">    <span class="keyword">JOIN</span> course <span class="keyword">AS</span> A2</span><br><span class="line">    <span class="keyword">ON</span> A1.t_id=A2.t_id</span><br><span class="line">    <span class="keyword">JOIN</span> score <span class="keyword">AS</span> A3</span><br><span class="line">    <span class="keyword">ON</span> A3.c_id=A2.c_id</span><br><span class="line">    <span class="keyword">JOIN</span> student <span class="keyword">AS</span> A4</span><br><span class="line">    <span class="keyword">ON</span> A3.s_id=A4.s_id</span><br><span class="line">    <span class="keyword">WHERE</span> A1.t_name=<span class="string">'张三'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.*</span><br><span class="line"><span class="keyword">FROM</span> T1</span><br><span class="line"><span class="keyword">WHERE</span> RK=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321203900937.png" alt="image-20200321203900937"></p><ul><li>41、查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">DISTINCT</span> T1.s_id,</span><br><span class="line">    T1.c_id,</span><br><span class="line">    T3.c_name,</span><br><span class="line">    T1.s_score</span><br><span class="line"><span class="keyword">FROM</span> score <span class="keyword">AS</span> T1,score <span class="keyword">AS</span> T2,course <span class="keyword">AS</span> T3</span><br><span class="line"><span class="keyword">WHERE</span> T1.c_id &lt;&gt; T2.c_id </span><br><span class="line"><span class="keyword">AND</span> T1.s_score=T2.s_score</span><br><span class="line"><span class="keyword">AND</span> T1.c_id=T3.c_id;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321220508059.png" alt="image-20200321220508059"></p><ul><li>42、查询每门课程成绩最好的前三名:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> A1 <span class="keyword">AS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        T1.s_id,</span><br><span class="line">        T1.c_id,</span><br><span class="line">        T1.s_score,</span><br><span class="line">        <span class="keyword">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> T1.c_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> T1.s_score <span class="keyword">DESC</span>) <span class="keyword">AS</span> RK</span><br><span class="line">    <span class="keyword">FROM</span> score <span class="keyword">AS</span> T1</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    A1.s_id,</span><br><span class="line">    A3.s_name,</span><br><span class="line">    A2.c_name,</span><br><span class="line">    A1.s_score,</span><br><span class="line">    A1.RK</span><br><span class="line"><span class="keyword">FROM</span> A1</span><br><span class="line"><span class="keyword">JOIN</span> course <span class="keyword">AS</span> A2</span><br><span class="line"><span class="keyword">ON</span> A1.c_id=A2.c_id</span><br><span class="line"><span class="keyword">JOIN</span> student <span class="keyword">AS</span> A3</span><br><span class="line"><span class="keyword">ON</span> A1.s_id=A3.s_id</span><br><span class="line"><span class="keyword">WHERE</span> RK&lt;=<span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321205236979.png" alt="image-20200321205236979"></p><ul><li>43、统计每门课程的学生选修人数（超过5人的课程才统计）:要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    c_id,</span><br><span class="line">    <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">AS</span> CNT_C</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id</span><br><span class="line"><span class="keyword">HAVING</span> CNT_C&gt;=<span class="number">5</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> CNT_C <span class="keyword">DESC</span>,c_id;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321205619210.png" alt="image-20200321205619210"></p><ul><li>44、检索至少选修两门课程的学生学号:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s_id,</span><br><span class="line">    <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">AS</span> CNT_S</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line"><span class="keyword">HAVING</span> CNT_S&gt;=<span class="number">2</span></span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321205759015.png" alt="image-20200321205759015"></p><ul><li>45、查询选修了全部课程的学生信息:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> A1 <span class="keyword">AS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        T1.s_id,</span><br><span class="line">        <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">AS</span> CNT_S</span><br><span class="line">    <span class="keyword">FROM</span> score <span class="keyword">AS</span> T1</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> T1.s_id</span><br><span class="line">    <span class="keyword">HAVING</span> CNT_S=<span class="number">3</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    A0.*</span><br><span class="line"><span class="keyword">FROM</span> student A0</span><br><span class="line"><span class="keyword">JOIN</span> A1</span><br><span class="line"><span class="keyword">ON</span> A0.s_id=A1.s_id</span><br><span class="line"><span class="keyword">WHERE</span> A1.CNT_S=<span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321210907315.png" alt="image-20200321210907315"></p><ul><li>46、查询各学生的年龄(周岁):</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    s_name,</span><br><span class="line">    s_birth,</span><br><span class="line">    (YEAR(current_date())-YEAR(s_birth)-</span><br><span class="line">        (CASE WHEN MONTH(current_date())&gt;MONTH(s_birth) THEN 0 </span><br><span class="line">              WHEN MONTH(current_date())=MONTH(s_birth) THEN </span><br><span class="line">                    (CASE WHEN DAY(current_date())&gt;=DAY(s_birth) THEN 0 ELSE 1 END)</span><br><span class="line">          ELSE 1 END)</span><br><span class="line">    ) AS AGE</span><br><span class="line">FROM student;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321213703448.png" alt="image-20200321213703448"></p><ul><li>47、查询本周过生日的学生:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    s_name,</span><br><span class="line">    s_birth</span><br><span class="line">FROM student</span><br><span class="line">WHERE s_birth BETWEEN DATE_ADD(NEXT_DAY(current_date(), &apos;MON&apos;),-1) AND DATE_ADD(NEXT_DAY(current_date(), &apos;MON&apos;),-7);</span><br></pre></td></tr></table></figure><p>今天是3月21号，暂时没有本周过生日的同学，不过本题的思想是找到本周第一天和本周最后一天，HQL实现如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">        <span class="keyword">DATE_ADD</span>(NEXT_DAY(<span class="keyword">current_date</span>(), <span class="string">'MON'</span>),<span class="number">-1</span>) <span class="keyword">AS</span> SUNDAY,</span><br><span class="line">        <span class="keyword">DATE_ADD</span>(NEXT_DAY(<span class="keyword">current_date</span>(), <span class="string">'MON'</span>),<span class="number">-7</span>) <span class="keyword">AS</span> MONDAY</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321215322208.png" alt="image-20200321215322208"></p><ul><li>48、查询下周过生日的学生:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s_name,</span><br><span class="line">    s_birth</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> s_birth <span class="keyword">BETWEEN</span> NEXT_DAY(<span class="keyword">current_date</span>(), <span class="string">'MON'</span>) <span class="keyword">AND</span> <span class="keyword">DATE_ADD</span>(NEXT_DAY(<span class="keyword">current_date</span>(), <span class="string">'MON'</span>),<span class="number">6</span>);</span><br></pre></td></tr></table></figure><p>同样没有下周过生日的同学，下周一到下周日的HQL如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NEXT_DAY(<span class="keyword">current_date</span>(), <span class="string">'MON'</span>) , <span class="keyword">DATE_ADD</span>(NEXT_DAY(<span class="keyword">current_date</span>(), <span class="string">'MON'</span>),<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321215737713.png" alt="image-20200321215737713"></p><ul><li>49、查询本月过生日的学生:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s_name,</span><br><span class="line">    s_birth</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">MONTH</span>(s_birth)=<span class="keyword">MONTH</span>(<span class="keyword">current_date</span>());</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321215852433.png" alt="image-20200321215852433"></p><ul><li>50、查询12月份过生日的学生:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s_name,</span><br><span class="line">    s_birth</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">MONTH</span>(s_birth)=<span class="number">12</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321215929799.png" alt="image-20200321215929799"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;平常加班不多，为了提高自己的SQL能力，找了网上流传的比较广泛的SQL50题，先把题目拿过来，计划抽空作为练习用HiveSQL完成。&lt;/p&gt;&lt;p&gt;开始日期：2020-03-18&lt;/p&gt;&lt;p&gt;完成日期：2020-03-21&lt;/p&gt;&lt;p&gt;建表语句&lt;/p&gt;&lt;figure clas
      
    
    </summary>
    
      <category term="SQL" scheme="https://mapan.tech/cn/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>归并排序</title>
    <link href="https://mapan.tech/cn/f8df.html"/>
    <id>https://mapan.tech/cn/f8df.html</id>
    <published>2020-03-15T06:38:41.000Z</published>
    <updated>2020-03-15T07:40:49.852Z</updated>
    
    <content type="html"><![CDATA[<p>归并排序采用经典的分治策略，利用归并的思想实现的排序方法。把一个待排序的数组无限拆分，直到子数组只有一个元素，然后开始按顺序再进行合并。想象一下若一副扑克牌乱序混在一起，如何从小到大排序？</p><ol><li>把牌堆分层两份，分给两个小伙伴进行从小到大排序。</li><li>两位小伙伴排序完成，给到有序牌堆A和有序牌堆B。</li><li>每次抽取两个牌堆最顶端一张进行比较，较小的合入到整体有序的牌堆C中。</li></ol><p>那么两个小伙伴是如何把分到的扑克牌给排序完成的呢？</p><ol><li><p>把牌堆分层两份，分给两个小伙伴进行从小到大排序。</p></li><li><p>两位小伙伴排序完成，给到有序牌堆A和有序牌堆B。</p></li><li><p>每次抽取两个牌堆最顶端一张进行比较，较小的合入到整体有序的牌堆C中。</p></li></ol><p>那么两个小伙伴是如何把分到的扑克牌给排序完成的呢？</p><p>重复步骤1-3 ···</p><p>当某次分牌时，某两位小伙伴各自仅分到了一张牌，那就不能再继续分了，他俩把分到的牌按照大小顺序交上去，这样就有了有序的牌堆（2张牌），然后2张合4张，4张合8张···，到最后整副扑克牌都是有序的。</p><p>这就是归并的思想</p><p><img src="/cn/f8df/MergeSrot.png" alt="MergeSrot"></p><p>动图理解：</p><p><img src="/cn/f8df/2346780.gif" alt="2346780"></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr  带排序的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> low  数组中较低的一侧的下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> high 数组中较高的一侧的下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> middle = (high + low) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="comment">// 处理左边</span></span><br><span class="line">        mergeSort(arr, low, middle);</span><br><span class="line">        <span class="comment">// 处理右边</span></span><br><span class="line">        mergeSort(arr, middle + <span class="number">1</span>, high);</span><br><span class="line">        <span class="comment">// 合并左右两边</span></span><br><span class="line">        merge(arr, low, middle, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr    待归并的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> low    左侧数组起始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> middle 左侧数组的结束位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> high   右侧数组结束位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> middle, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 用于存储归并后的临时数组</span></span><br><span class="line">    <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[high - low + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 记录第一个数组中需要遍历的下标</span></span><br><span class="line">    <span class="keyword">int</span> i = low;</span><br><span class="line">    <span class="comment">// 记录第二个数组中需要遍历的下标</span></span><br><span class="line">    <span class="keyword">int</span> j = middle + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 用于记录在临时数组中存放的下标</span></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= middle &amp;&amp; j &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt;= arr[j]) &#123;</span><br><span class="line">            temp[index++] = arr[i++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[index++] = arr[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 一个数组中的数已经全部放入temp,剩下较长的一个子数组的数全部放进temp中</span></span><br><span class="line">    <span class="keyword">while</span> (j &lt;= high) &#123;</span><br><span class="line">        temp[index++] = arr[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= middle) &#123;</span><br><span class="line">        temp[index++] = arr[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把临时数组中的数据重新存入原来数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; temp.length; k++) &#123;</span><br><span class="line">        arr[k + low] = temp[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;归并排序采用经典的分治策略，利用归并的思想实现的排序方法。把一个待排序的数组无限拆分，直到子数组只有一个元素，然后开始按顺序再进行合并。想象一下若一副扑克牌乱序混在一起，如何从小到大排序？&lt;/p&gt;&lt;ol&gt;&lt;li&gt;把牌堆分层两份，分给两个小伙伴进行从小到大排序。&lt;/li&gt;&lt;l
      
    
    </summary>
    
      <category term="算法" scheme="https://mapan.tech/cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="https://mapan.tech/cn/2c2a.html"/>
    <id>https://mapan.tech/cn/2c2a.html</id>
    <published>2020-03-14T14:32:34.000Z</published>
    <updated>2020-03-18T12:36:27.389Z</updated>
    
    <content type="html"><![CDATA[<p>快速排序是对冒泡排序的一种改进，快速思想是使用分治法，其中有一个基准值，把一个数组中的数分为较基准值大和较基准值小的两部分（子数组），所有比基准值大的放在基准值后面，所有比基准值小的放在基准值前面，然后递归再次切分，直至子数组的大小为1或0，此时全局有序。</p><p>图示：</p><p><img src="/cn/2c2a/7789414-007520d3d4a7610c.gif" alt="7789414-007520d3d4a7610c"></p><p>快速排序是不稳定的排序，在排序后，相同值的先后顺序可能会变化，所以是不稳定的。</p><p>所谓是稳定性是指：假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，r[i]=r[j]，且r[i]在r[j]之前，而在排序后的序列中，r[i]仍在r[j]之前，则称这种排序算法是稳定的；否则称为不稳定的。</p><p>代码实现：</p><p>Java版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> low = left;</span><br><span class="line">        <span class="keyword">int</span> high = right;</span><br><span class="line">        <span class="keyword">int</span> pivot = arr[left];</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="keyword">while</span> (low &lt; high &amp;&amp; arr[high] &gt;= pivot) &#123;</span><br><span class="line">                high--;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[low] = arr[high];</span><br><span class="line">            <span class="keyword">while</span> (low &lt; high &amp;&amp; arr[low] &lt;= pivot) &#123;</span><br><span class="line">                low++;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[high] = arr[low];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[low] = pivot;</span><br><span class="line">        quickSort(arr, left, low - <span class="number">1</span>);</span><br><span class="line">        quickSort(arr, low + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Scala版本：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort</span></span>(arr: <span class="type">Array</span>[<span class="type">Int</span>], left: <span class="type">Int</span>, right: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">    <span class="keyword">var</span> low = left</span><br><span class="line">    <span class="keyword">var</span> high = right</span><br><span class="line">    <span class="keyword">val</span> pivot = arr(low)</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">      <span class="keyword">while</span> (low &lt; high &amp;&amp; arr(high) &gt;= pivot) high -= <span class="number">1</span></span><br><span class="line">      arr(low) = arr(high)</span><br><span class="line">      <span class="keyword">while</span> (low &lt; high &amp;&amp; arr(low) &lt;= pivot) low += <span class="number">1</span></span><br><span class="line">      arr(high) = arr(low)</span><br><span class="line">    &#125;</span><br><span class="line">    arr(low) = pivot</span><br><span class="line">    quickSort(arr, low + <span class="number">1</span>, right)</span><br><span class="line">    quickSort(arr, left, low - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在网上看了不少人的快速排序代码，其整体思想都是一样的，分治，递归。但是具体实现细节上则各不相同，八仙过海，大显神通。上面代码是我觉得比较好简洁，且理解相对容易的一种写法。另外Scala版本有一个十分精简的写法：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort</span></span>(list: <span class="type">List</span>[<span class="type">Int</span>]): <span class="type">List</span>[<span class="type">Int</span>] = list <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Nil</span> =&gt; <span class="type">Nil</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">List</span>() =&gt; <span class="type">List</span>()</span><br><span class="line">    <span class="keyword">case</span> head :: tail =&gt;</span><br><span class="line">      <span class="keyword">val</span> (left, right) = tail.partition(_ &lt; head)</span><br><span class="line">      quickSort(left) ::: head :: quickSort(right)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Scala这么优雅的语言，真的让人赏心悦目。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;快速排序是对冒泡排序的一种改进，快速思想是使用分治法，其中有一个基准值，把一个数组中的数分为较基准值大和较基准值小的两部分（子数组），所有比基准值大的放在基准值后面，所有比基准值小的放在基准值前面，然后递归再次切分，直至子数组的大小为1或0，此时全局有序。&lt;/p&gt;&lt;p&gt;图示
      
    
    </summary>
    
      <category term="算法" scheme="https://mapan.tech/cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>希尔排序</title>
    <link href="https://mapan.tech/cn/3c6c.html"/>
    <id>https://mapan.tech/cn/3c6c.html</id>
    <published>2020-03-14T08:01:06.000Z</published>
    <updated>2020-03-14T11:23:43.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p>希尔排序的思想是按照下标的一定增量分组，对魅族使用直接插入排序算法进行排序，随着增量逐渐减少，每组包含的关键词越来越多，当增量减少到1时，整个文件恰好被分成一组，算法终止。<br>简单来说就是按照一定步长分组，例如100个数排序，第一次分50组，每组两个数，第二次分25组，每组4个数，第三次分12组，第四次分6组，第五次分3组，第六次分1组。每一次分组后在组内进行排序。</p><p>排序流程：</p><p><img src="/cn/3c6c/srg453d.gif" alt="希尔排序"></p><p>代码实现：</p><p>首先分组，然后使用交换法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 第一个循环，对数组进行分组，直到gap=1为止</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap = arr.length / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">//交替遍历所有组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 组内排序，使用交换法</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i - gap; j &gt;= <span class="number">0</span>; j -= gap) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + gap]) &#123;</span><br><span class="line">                    arr[j] = arr[j] ^ arr[j + gap];</span><br><span class="line">                    arr[j + gap] = arr[j] ^ arr[j + gap];</span><br><span class="line">                    arr[j] = arr[j] ^ arr[j + gap];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用交换法，每次对比都要进行交换，效率比较低，内部排序的方式可以修改成直接插入排序。</p><p>分组，然后插入法（希尔排序）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort2</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 第一个循环，对数组进行分组，直到gap=1为止</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap = arr.length / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 交替遍历所有的组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[j - gap]) &#123;</span><br><span class="line">                <span class="comment">// 移动数据，等待插入</span></span><br><span class="line">                <span class="keyword">while</span> (j - gap &gt;= <span class="number">0</span> &amp;&amp; temp &lt; arr[j - gap]) &#123;</span><br><span class="line">                    arr[j] = arr[j - gap];</span><br><span class="line">                    j -= gap;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 找到待插入的位置，插入数据</span></span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>希尔排序是对直接插入排序的更高效的改进版本，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;希尔排序&quot;&gt;&lt;a href=&quot;#希尔排序&quot; class=&quot;headerlink&quot; title=&quot;希尔排序&quot;&gt;&lt;/a&gt;希尔排序&lt;/h1&gt;&lt;p&gt;希尔排序的思想是按照下标的一定增量分组，对魅族使用直接插入排序算法进行排序，随着增量逐渐减少，每组包含的关键词越来越多，当增
      
    
    </summary>
    
      <category term="算法" scheme="https://mapan.tech/cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>三大经典排序</title>
    <link href="https://mapan.tech/cn/846c.html"/>
    <id>https://mapan.tech/cn/846c.html</id>
    <published>2020-03-13T12:27:14.000Z</published>
    <updated>2020-03-14T11:35:15.804Z</updated>
    
    <content type="html"><![CDATA[<p>2018年Coding被腾讯收购后变成了腾讯开发者平台，一直不温不火。今年一月份有又要改名为新Coding，真是命途多舛，还好提供的服务一直可以满足我的需求。虽然偶尔服务器宕机，但是速度快呀，Coding pages还是真香。由于今年网站再次改版，之前的pages要停止服务了，貌似也没有通知一声，昨天修复了一下，看了下留言，我的小站还是有人浏览的。所以决定还是要好好经营下去。</p><p>最近看了一些书，有了一些新的感悟。学习是要有输出的，只有自己能把一个东西讲清楚才算真正学会了，那么就把最近研究和学习的一些东西给写下来吧。</p><h1 id="大学学过的一些很基础的排序算法"><a href="#大学学过的一些很基础的排序算法" class="headerlink" title="大学学过的一些很基础的排序算法"></a>大学学过的一些很基础的排序算法</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>掌握一种算法不是把它的实现代码给背下来，而是理解他的思想。这样就可以做到以不变应万变。<br>冒泡排序的思想是：在一个n个数的乱序数组中，遍历整个数组(n-1)轮，每次遍历位数减少1，每次选择出一个最大的数放在数组的末尾，这样在经过(n-1)轮遍历之后，数组中所有的元素都是有序的。<br>原理：<br><img src="/cn/846c/e9011afacb434ea09c8a156dc9983bfb.gif" alt="冒泡排序"></p><p>实现代码：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubble</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j + <span class="number">1</span>] &lt; arr[j]) &#123;</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>] ^ arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>] ^ arr[j];</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>] ^ arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"第"</span> + (i) + <span class="string">"趟排序:"</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面我使用了一个不引入第三个变量，实现交换两个变量的值的技巧，一个数对另一个数进行两次异或运算得到的结果是这个数本身，交换a和b的值的方法：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b;</span><br></pre></td></tr></table></figure><p></p><p>那么不管是最好的情况还是最坏的情况，实际判断的次数是不会减少的，是否可以优化呢？答案是肯定的，如果在最好的情况下，可以发现，在第一趟排序中所有的数都没有发生交换。<br>所以可以进行如下优化，当在一轮遍历中，如果没有两个数进行交换，就可以认为整体数组是有序的，优化之后的代码：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubble</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j + <span class="number">1</span>] &lt; arr[j]) &#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>] ^ arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>] ^ arr[j];</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>] ^ arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"第"</span> + (i) + <span class="string">"趟排序:"</span> + Arrays.toString(arr));</span><br><span class="line">        <span class="comment">// 在一趟排序中，若没有发生过交换，说明已经排好序了。</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序相对冒泡排序而言，交换的次数减少了，所以效率也提高了一些。选择排序的思想是：<br>经过(n-1)轮遍历，依次找到每个位置上该放的值。第1次遍历找到最小的值a，把它当到第一位；第2次遍历找到除最小值a以外的最小值b，把它放到第二位··· 直到(n-1)次遍历，找到最小值把它放到(n-1)位，即第倒数二位。此时数组为全局有序。<br>原理：<br><img src="/cn/846c/0d74357a85fb419da3fc60219b2172ac.gif" alt="选择排序"></p><p>代码实现：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 选择排序 时间复杂度O(n^2)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> minIndex = i;</span><br><span class="line">        <span class="keyword">int</span> min = arr[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; arr[j]) &#123;</span><br><span class="line">                min = arr[j];</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (minIndex != i) &#123;</span><br><span class="line">            arr[minIndex] = arr[i];</span><br><span class="line">            arr[i] = min;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>选择排序的思想是找位置，与选择排序不同，插入排序的思想是找一个有序的区间，保证这个区间内是有序的。通过一次次的遍历，逐渐扩大这个有序区间，直到区间大小等于数组大小，即数组全局有序。所谓逐渐扩大，即把待插入的数，插入到有序区间内属于这个数的恰当位置。</p><p>原理：<br><img src="/cn/846c/1167a023cbec4da0aa056ca481104d16.gif" alt="插入排序"></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义待插入的数</span></span><br><span class="line">        <span class="keyword">int</span> insertVal = arr[i];</span><br><span class="line">        <span class="comment">//即arr[i]前面这个数的下标</span></span><br><span class="line">        <span class="keyword">int</span> insertIndex = i - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给insertVal找到插入的位置</span></span><br><span class="line">        <span class="comment">//说明</span></span><br><span class="line">        <span class="comment">//1.insertIndex &gt;= 0保证在给insertVal找插入位置，不越界</span></span><br><span class="line">        <span class="comment">//2.insertVal &lt; arr[insertIndex]待插入的数，还没有找到插入位置</span></span><br><span class="line">        <span class="comment">//3.就需要将arr[insertIndex]后移</span></span><br><span class="line">        <span class="keyword">while</span> (insertIndex &gt;= <span class="number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span><br><span class="line">            arr[insertIndex + <span class="number">1</span>] = arr[insertIndex];</span><br><span class="line">            insertIndex--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当退出while循环时，说明插入的位置找到，insertIndex + 1</span></span><br><span class="line">        arr[insertIndex + <span class="number">1</span>] = insertVal;</span><br><span class="line">        System.out.println(<span class="string">"第"</span> + i + <span class="string">"轮插入"</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2018年Coding被腾讯收购后变成了腾讯开发者平台，一直不温不火。今年一月份有又要改名为新Coding，真是命途多舛，还好提供的服务一直可以满足我的需求。虽然偶尔服务器宕机，但是速度快呀，Coding pages还是真香。由于今年网站再次改版，之前的pages要停止服务
      
    
    </summary>
    
      <category term="算法" scheme="https://mapan.tech/cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>牛客网SQL题目</title>
    <link href="https://mapan.tech/cn/7b61.html"/>
    <id>https://mapan.tech/cn/7b61.html</id>
    <published>2020-01-04T03:55:40.000Z</published>
    <updated>2020-03-12T13:37:02.187Z</updated>
    
    <content type="html"><![CDATA[<p>牛客网题目 <a href="https://www.nowcoder.com/ta/sql">https://www.nowcoder.com/ta/sql</a><br>共计61道题目，现已全部完成</p><h2 id="第01题"><a href="#第01题" class="headerlink" title="第01题"></a>第01题</h2><ul><li>题目描述：查找最晚入职员工的所有信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`birth_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`hire_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th><th style="text-align:left">birth_date</th><th style="text-align:left">first_name</th><th style="text-align:left">last_name</th><th style="text-align:left">gender</th><th style="text-align:left">hire_date</th></tr></thead><tbody><tr><td style="text-align:left">10008</td><td style="text-align:left">1958-02-19</td><td style="text-align:left">Saniya</td><td style="text-align:left">Kalloufi</td><td style="text-align:left">M</td><td style="text-align:left">1994-09-15</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> hire_date=(<span class="keyword">select</span> hire_date <span class="keyword">from</span> employees <span class="keyword">order</span> <span class="keyword">by</span> hire_date <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span> )</span><br></pre></td></tr></table></figure><h2 id="第02题"><a href="#第02题" class="headerlink" title="第02题"></a>第02题</h2><ul><li>题目描述：查找入职员工时间排名倒数第三的员工所有信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`birth_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`hire_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th><th style="text-align:left">birth_date</th><th style="text-align:left">first_name</th><th style="text-align:left">last_name</th><th style="text-align:left">gender</th><th style="text-align:left">hire_date</th></tr></thead><tbody><tr><td style="text-align:left">10005</td><td style="text-align:left">1955-01-21</td><td style="text-align:left">Kyoichi</td><td style="text-align:left">Maliniak</td><td style="text-align:left">M</td><td style="text-align:left">1989-09-12</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> employees </span><br><span class="line"><span class="keyword">where</span> hire_date=(</span><br><span class="line">    <span class="keyword">select</span> hire_date </span><br><span class="line">    <span class="keyword">from</span> employees</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> hire_date </span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> hire_date <span class="keyword">desc</span></span><br><span class="line">    <span class="keyword">limit</span> <span class="number">2</span>,<span class="number">1</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="第03题"><a href="#第03题" class="headerlink" title="第03题"></a>第03题</h2><ul><li>题目描述：查找各个部门当前(to_date=’9999-01-01’)领导当前薪水详情以及其对应部门编号dept_no</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`dept_manager`</span> (</span><br><span class="line"><span class="string">`dept_no`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`dept_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th><th style="text-align:left">salary</th><th style="text-align:left">from_date</th><th style="text-align:left">to_date</th><th style="text-align:left">dept_no</th></tr></thead><tbody><tr><td style="text-align:left">10002</td><td style="text-align:left">72527</td><td style="text-align:left">2001-08-02</td><td style="text-align:left">9999-01-01</td><td style="text-align:left">d001</td></tr><tr><td style="text-align:left">10004</td><td style="text-align:left">74057</td><td style="text-align:left">2001-11-27</td><td style="text-align:left">9999-01-01</td><td style="text-align:left">d004</td></tr><tr><td style="text-align:left">10005</td><td style="text-align:left">94692</td><td style="text-align:left">2001-09-09</td><td style="text-align:left">9999-01-01</td><td style="text-align:left">d003</td></tr><tr><td style="text-align:left">10006</td><td style="text-align:left">43311</td><td style="text-align:left">2001-08-02</td><td style="text-align:left">9999-01-01</td><td style="text-align:left">d002</td></tr><tr><td style="text-align:left">10010</td><td style="text-align:left">94409</td><td style="text-align:left">2001-11-23</td><td style="text-align:left">9999-01-01</td><td style="text-align:left">d006</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    t2.*,</span><br><span class="line">    t1.dept_no</span><br><span class="line"><span class="keyword">from</span> salaries <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">join</span> dept_manager <span class="keyword">as</span> t1</span><br><span class="line"><span class="keyword">on</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">where</span> t1.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">and</span> t2.to_date=<span class="string">'9999-01-01'</span>;</span><br></pre></td></tr></table></figure><h2 id="第04题"><a href="#第04题" class="headerlink" title="第04题"></a>第04题</h2><ul><li>题目描述：查找所有已经分配部门的员工的last_name和first_name</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`dept_emp`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`dept_no`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`dept_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`birth_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`hire_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">last_name</th><th style="text-align:left">first_name</th><th style="text-align:left">dept_no</th></tr></thead><tbody><tr><td style="text-align:left">Facello</td><td style="text-align:left">Georgi</td><td style="text-align:left">d001</td></tr><tr><td style="text-align:left">省略</td><td style="text-align:left">省略</td><td style="text-align:left">省略</td></tr><tr><td style="text-align:left">Piveteau</td><td style="text-align:left">Duangkaew</td><td style="text-align:left">d006</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    t1.last_name,</span><br><span class="line">    t1.first_name,</span><br><span class="line">    t2.dept_no</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    employees <span class="keyword">as</span> t1,</span><br><span class="line">    dept_emp <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">where</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">and</span> t2.dept_no <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h2 id="第05题"><a href="#第05题" class="headerlink" title="第05题"></a>第05题</h2><ul><li>题目描述：查找所有员工的last_name和first_name以及对应部门编号dept_no，也包括展示没有分配具体部门的员工</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`dept_emp`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`dept_no`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`dept_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`birth_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`hire_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">last_name</th><th style="text-align:left">first_name</th><th style="text-align:left">dept_no</th></tr></thead><tbody><tr><td style="text-align:left">Facello</td><td style="text-align:left">Georgi</td><td style="text-align:left">d001</td></tr><tr><td style="text-align:left">省略</td><td style="text-align:left">省略</td><td style="text-align:left">省略</td></tr><tr><td style="text-align:left">Sluis</td><td style="text-align:left">Mary</td><td style="text-align:left">NULL(在sqlite中此处为空,MySQL为NULL)</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    t2.last_name,</span><br><span class="line">    t2.first_name,</span><br><span class="line">    t1.dept_no</span><br><span class="line"><span class="keyword">from</span> employees <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dept_emp <span class="keyword">as</span> t1</span><br><span class="line"><span class="keyword">on</span> t1.emp_no=t2.emp_no;</span><br></pre></td></tr></table></figure><h2 id="第06题"><a href="#第06题" class="headerlink" title="第06题"></a>第06题</h2><ul><li>题目描述：查找所有员工入职时候的薪水情况，给出emp_no以及salary， 并按照emp_no进行逆序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`birth_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`hire_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th><th style="text-align:left">salary</th></tr></thead><tbody><tr><td style="text-align:left">10011</td><td style="text-align:left">25828</td></tr><tr><td style="text-align:left">省略</td><td style="text-align:left">省略</td></tr><tr><td style="text-align:left">10001</td><td style="text-align:left">60117</td></tr></tbody></table></div><ul><li>答案：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    t1.emp_no,</span><br><span class="line">    t2.salary</span><br><span class="line"><span class="keyword">from</span> employees <span class="keyword">as</span> t1</span><br><span class="line"><span class="keyword">join</span> salaries <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">on</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">where</span> t1.hire_date=t2.from_date</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> t1.emp_no <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="第07题"><a href="#第07题" class="headerlink" title="第07题"></a>第07题</h2><ul><li>题目描述：查找薪水涨幅超过15次的员工号emp_no以及其对应的涨幅次数t</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th><th style="text-align:left">t</th></tr></thead><tbody><tr><td style="text-align:left">10001</td><td style="text-align:left">17</td></tr><tr><td style="text-align:left">10004</td><td style="text-align:left">16</td></tr><tr><td style="text-align:left">10009</td><td style="text-align:left">18</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    emp_no,</span><br><span class="line">    <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">from</span> salaries</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> emp_no</span><br><span class="line"><span class="keyword">having</span> t&gt;<span class="number">15</span>;</span><br></pre></td></tr></table></figure><h2 id="第08题"><a href="#第08题" class="headerlink" title="第08题"></a>第08题</h2><ul><li>题目描述：找出所有员工当前(to_date=’9999-01-01’)具体的薪水salary情况，对于相同的薪水只显示一次,并按照逆序显示</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">salary</th></tr></thead><tbody><tr><td style="text-align:left">94692</td></tr><tr><td style="text-align:left">94409</td></tr><tr><td style="text-align:left">88958</td></tr><tr><td style="text-align:left">88070</td></tr><tr><td style="text-align:left">74057</td></tr><tr><td style="text-align:left">72527</td></tr><tr><td style="text-align:left">59755</td></tr><tr><td style="text-align:left">43311</td></tr><tr><td style="text-align:left">25828</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">distinct</span> salary</span><br><span class="line"><span class="keyword">from</span> salaries</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">to_date</span>=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h2 id="第09题"><a href="#第09题" class="headerlink" title="第09题"></a>第09题</h2><ul><li>题目描述：获取所有部门当前manager的当前薪水情况，给出dept_no, emp_no以及salary，当前表示to_date=’9999-01-01’</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`dept_manager`</span> (</span><br><span class="line"><span class="string">`dept_no`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`dept_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">dept_no</th><th style="text-align:left">emp_no</th><th style="text-align:left">salary</th></tr></thead><tbody><tr><td style="text-align:left">d001</td><td style="text-align:left">10002</td><td style="text-align:left">72527</td></tr><tr><td style="text-align:left">d004</td><td style="text-align:left">10004</td><td style="text-align:left">74057</td></tr><tr><td style="text-align:left">d003</td><td style="text-align:left">10005</td><td style="text-align:left">94692</td></tr><tr><td style="text-align:left">d002</td><td style="text-align:left">10006</td><td style="text-align:left">43311</td></tr><tr><td style="text-align:left">d006</td><td style="text-align:left">10010</td><td style="text-align:left">94409</td></tr></tbody></table></div><ul><li>答案：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    t2.dept_no,</span><br><span class="line">    t2.emp_no,</span><br><span class="line">    t1.salary</span><br><span class="line"><span class="keyword">from</span> salaries <span class="keyword">as</span> t1</span><br><span class="line"><span class="keyword">join</span> dept_manager <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">on</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">where</span> t1.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">and</span> t2.to_date=<span class="string">'9999-01-01'</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="第10题"><a href="#第10题" class="headerlink" title="第10题"></a>第10题</h2><ul><li>题目描述：获取所有非manager的员工emp_no</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`dept_manager`</span> (</span><br><span class="line"><span class="string">`dept_no`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`dept_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`birth_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`hire_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th></tr></thead><tbody><tr><td style="text-align:left">10001</td></tr><tr><td style="text-align:left">10003</td></tr><tr><td style="text-align:left">10007</td></tr><tr><td style="text-align:left">10008</td></tr><tr><td style="text-align:left">10009</td></tr><tr><td style="text-align:left">10011</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    t1.emp_no</span><br><span class="line"><span class="keyword">from</span> employees <span class="keyword">as</span> t1</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dept_manager <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">on</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">where</span> t2.dept_no <span class="keyword">is</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h2 id="第11题"><a href="#第11题" class="headerlink" title="第11题"></a>第11题</h2><ul><li>题目描述： 获取所有员工当前的manager，如果当前的manager是自己的话结果不显示，当前表示to_date=’9999-01-01’。<br>结果第一列给出当前员工的emp_no,第二列给出其manager对应的manager_no。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`dept_emp`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`dept_no`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`dept_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`dept_manager`</span> (</span><br><span class="line"><span class="string">`dept_no`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`dept_no`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th><th style="text-align:left">manager_no</th></tr></thead><tbody><tr><td style="text-align:left">10001</td><td style="text-align:left">10002</td></tr><tr><td style="text-align:left">10003</td><td style="text-align:left">10004</td></tr><tr><td style="text-align:left">10009</td><td style="text-align:left">10010</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    t1.emp_no,</span><br><span class="line">    t2.emp_no <span class="keyword">as</span> manager_no</span><br><span class="line"><span class="keyword">from</span> dept_emp <span class="keyword">as</span> t1</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dept_manager <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">on</span> t1.dept_no=t2.dept_no</span><br><span class="line"><span class="keyword">where</span> t1.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">and</span> t2.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">and</span> t1.emp_no&lt;&gt;t2.emp_no;</span><br></pre></td></tr></table></figure><h2 id="第12题"><a href="#第12题" class="headerlink" title="第12题"></a>第12题</h2><ul><li>题目描述：获取所有部门中当前员工薪水最高的相关信息，给出dept_no, emp_no以及其对应的salary</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`dept_emp`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`dept_no`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`dept_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">dept_no</th><th style="text-align:left">emp_no</th><th style="text-align:left">salary</th></tr></thead><tbody><tr><td style="text-align:left">d001</td><td style="text-align:left">10001</td><td style="text-align:left">88958</td></tr><tr><td style="text-align:left">d002</td><td style="text-align:left">10006</td><td style="text-align:left">43311</td></tr><tr><td style="text-align:left">d003</td><td style="text-align:left">10005</td><td style="text-align:left">94692</td></tr><tr><td style="text-align:left">d004</td><td style="text-align:left">10004</td><td style="text-align:left">74057</td></tr><tr><td style="text-align:left">d005</td><td style="text-align:left">10007</td><td style="text-align:left">88070</td></tr><tr><td style="text-align:left">d006</td><td style="text-align:left">10009</td><td style="text-align:left">95409</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    t1.dept_no, </span><br><span class="line">    t1.emp_no, </span><br><span class="line">    t2.salary</span><br><span class="line"><span class="keyword">from</span> dept_emp <span class="keyword">as</span> t1 </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> salaries <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">on</span> t1.emp_no = t2.emp_no</span><br><span class="line"><span class="keyword">and</span> t1.to_date = <span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">and</span> t2.to_date = <span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">where</span> t2.salary = (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">max</span>(t3.salary)</span><br><span class="line">    <span class="keyword">from</span> dept_emp <span class="keyword">as</span> t4</span><br><span class="line">    <span class="keyword">inner</span> <span class="keyword">join</span> salaries <span class="keyword">as</span> t3</span><br><span class="line">    <span class="keyword">on</span> t3.emp_no = t4.emp_no</span><br><span class="line">    <span class="keyword">and</span> t3.to_date = <span class="string">'9999-01-01'</span></span><br><span class="line">    <span class="keyword">and</span> t4.to_date = <span class="string">'9999-01-01'</span></span><br><span class="line">    <span class="keyword">where</span> t4.dept_no = t1.dept_no</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> t4.dept_no)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> t1.dept_no;</span><br></pre></td></tr></table></figure><h2 id="第13题"><a href="#第13题" class="headerlink" title="第13题"></a>第13题</h2><ul><li>题目描述：从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">"titles"</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">title</th><th style="text-align:left">t</th></tr></thead><tbody><tr><td style="text-align:left">Assistant Engineer</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">Engineer</td><td style="text-align:left">4</td></tr><tr><td style="text-align:left">省略</td><td style="text-align:left">省略</td></tr><tr><td style="text-align:left">Staff</td><td style="text-align:left">3</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    title,</span><br><span class="line">    <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">from</span> titles</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> title</span><br><span class="line"><span class="keyword">having</span> t&gt;=<span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="第14题"><a href="#第14题" class="headerlink" title="第14题"></a>第14题</h2><ul><li>题目描述：从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。<br>注意对于重复的emp_no进行忽略。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`titles`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">title</th><th style="text-align:left">t</th></tr></thead><tbody><tr><td style="text-align:left">Assistant Engineer</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">Engineer</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left">省略</td><td style="text-align:left">省略</td></tr><tr><td style="text-align:left">Staff</td><td style="text-align:left">3</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    title,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> emp_no) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">from</span> titles</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> title;</span><br></pre></td></tr></table></figure><h2 id="第15题"><a href="#第15题" class="headerlink" title="第15题"></a>第15题</h2><ul><li>题目描述：查找employees表所有emp_no为奇数，且last_name不为Mary的员工信息，并按照hire_date逆序排列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`birth_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`hire_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th><th style="text-align:left">birth_date</th><th style="text-align:left">first_name</th><th style="text-align:left">last_name</th><th style="text-align:left">gender</th><th style="text-align:left">hire_date</th></tr></thead><tbody><tr><td style="text-align:left">10011</td><td style="text-align:left">1953-11-07</td><td style="text-align:left">Mary</td><td style="text-align:left">Sluis</td><td style="text-align:left">F</td><td style="text-align:left">1990-01-22</td></tr><tr><td style="text-align:left">10005</td><td style="text-align:left">1955-01-21</td><td style="text-align:left">Kyoichi</td><td style="text-align:left">Maliniak</td><td style="text-align:left">M</td><td style="text-align:left">1989-09-12</td></tr><tr><td style="text-align:left">10007</td><td style="text-align:left">1957-05-23</td><td style="text-align:left">Tzvetan</td><td style="text-align:left">Zielinski</td><td style="text-align:left">F</td><td style="text-align:left">1989-02-10</td></tr><tr><td style="text-align:left">10003</td><td style="text-align:left">1959-12-03</td><td style="text-align:left">Parto</td><td style="text-align:left">Bamford</td><td style="text-align:left">M</td><td style="text-align:left">1986-08-28</td></tr><tr><td style="text-align:left">10001</td><td style="text-align:left">1953-09-02</td><td style="text-align:left">Georgi</td><td style="text-align:left">Facello</td><td style="text-align:left">M</td><td style="text-align:left">1986-06-26</td></tr><tr><td style="text-align:left">10009</td><td style="text-align:left">1952-04-19</td><td style="text-align:left">Sumant</td><td style="text-align:left">Peac</td><td style="text-align:left">F</td><td style="text-align:left">1985-02-18</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> emp_no&amp;<span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">and</span> last_name&lt;&gt;<span class="string">"Mary"</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> hire_date <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h2 id="第16题"><a href="#第16题" class="headerlink" title="第16题"></a>第16题</h2><ul><li>题目描述：统计出当前各个title类型对应的员工当前（to_date=’9999-01-01’）薪水对应的平均工资。结果给出title以及平均工资avg。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">"titles"</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">title</th><th style="text-align:left">avg</th></tr></thead><tbody><tr><td style="text-align:left">Engineer</td><td style="text-align:left">94409.0</td></tr><tr><td style="text-align:left">Senior Engineer</td><td style="text-align:left">69009.2</td></tr><tr><td style="text-align:left">Senior Staff</td><td style="text-align:left">91381.0</td></tr><tr><td style="text-align:left">Staff</td><td style="text-align:left">72527.0</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    title,</span><br><span class="line">    <span class="keyword">avg</span>(salary) <span class="keyword">as</span> <span class="keyword">avg</span></span><br><span class="line"><span class="keyword">from</span> salaries <span class="keyword">as</span> t1</span><br><span class="line"><span class="keyword">join</span> titles <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">on</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">and</span> t1.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">and</span> t2.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> t2.title;</span><br></pre></td></tr></table></figure><h2 id="第17题"><a href="#第17题" class="headerlink" title="第17题"></a>第17题</h2><ul><li>题目描述：获取当前（to_date=’9999-01-01’）薪水第二多的员工的emp_no以及其对应的薪水salary</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th><th style="text-align:left">salary</th></tr></thead><tbody><tr><td style="text-align:left">10009</td><td style="text-align:left">94409</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    emp_no,</span><br><span class="line">    salary</span><br><span class="line"><span class="keyword">from</span> salaries</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">to_date</span>=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">and</span> salary=(</span><br><span class="line">    <span class="keyword">select</span> salary</span><br><span class="line">    <span class="keyword">from</span> salaries</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">to_date</span>=<span class="string">'9999-01-01'</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> salary</span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span></span><br><span class="line">    <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="第18题"><a href="#第18题" class="headerlink" title="第18题"></a>第18题</h2><ul><li>题目描述：查找当前薪水(to_date=’9999-01-01’)排名第二多的员工编号emp_no、薪水salary、last_name以及first_name，不准使用order by</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`birth_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`hire_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th><th style="text-align:left">salary</th><th style="text-align:left">last_name</th><th style="text-align:left">first_name</th></tr></thead><tbody><tr><td style="text-align:left">10009</td><td style="text-align:left">94409</td><td style="text-align:left">Peac</td><td style="text-align:left">Sumant</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    t2.emp_no,</span><br><span class="line">    t1.salary,</span><br><span class="line">    t2.last_name,</span><br><span class="line">    t2.first_name</span><br><span class="line"><span class="keyword">FROM</span> salaries <span class="keyword">AS</span> t1</span><br><span class="line"><span class="keyword">JOIN</span> employees <span class="keyword">AS</span> t2</span><br><span class="line"><span class="keyword">ON</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">AND</span> t1.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">WHERE</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> t3.salary)</span><br><span class="line">    <span class="keyword">FROM</span> salaries <span class="keyword">AS</span> t3</span><br><span class="line">    <span class="keyword">WHERE</span> t3.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line">    <span class="keyword">AND</span> t3.salary&gt;t1.salary</span><br><span class="line">)=<span class="number">1</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> salary;</span><br></pre></td></tr></table></figure><h2 id="第19题"><a href="#第19题" class="headerlink" title="第19题"></a>第19题</h2><ul><li>题目描述：查找所有员工的last_name和first_name以及对应的dept_name，也包括暂时没有分配部门的员工</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`departments`</span> (</span><br><span class="line"><span class="string">`dept_no`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`dept_name`</span> <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`dept_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`dept_emp`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`dept_no`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`dept_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`birth_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`hire_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">last_name</th><th style="text-align:left">first_name</th><th style="text-align:left">dept_name</th></tr></thead><tbody><tr><td style="text-align:left">Facello</td><td style="text-align:left">Georgi</td><td style="text-align:left">Marketing</td></tr><tr><td style="text-align:left">省略</td><td style="text-align:left">省略</td><td style="text-align:left">省略</td></tr><tr><td style="text-align:left">Sluis</td><td style="text-align:left">Mary</td><td style="text-align:left">NULL</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    last_name,</span><br><span class="line">    first_name,</span><br><span class="line">    dept_name</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> t1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> dept_emp <span class="keyword">AS</span> t2</span><br><span class="line"><span class="keyword">ON</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments <span class="keyword">AS</span> t3</span><br><span class="line"><span class="keyword">ON</span> t2.dept_no=t3.dept_no;</span><br></pre></td></tr></table></figure><h2 id="第20题"><a href="#第20题" class="headerlink" title="第20题"></a>第20题</h2><ul><li>查找员工编号emp_no为10001其自入职以来的薪水salary涨幅值growth</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">growth</th></tr></thead><tbody><tr><td style="text-align:left">28841</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(salary)-<span class="keyword">min</span>(salary) <span class="keyword">as</span> growth</span><br><span class="line"><span class="keyword">from</span> salaries</span><br><span class="line"><span class="keyword">where</span> emp_no=<span class="number">10001</span>;</span><br></pre></td></tr></table></figure><h2 id="第21题"><a href="#第21题" class="headerlink" title="第21题"></a>第21题</h2><ul><li>题目描述：查找所有员工自入职以来的薪水涨幅情况，给出员工编号emp_no以及其对应的薪水涨幅growth，并按照growth进行升序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`birth_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`hire_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th><th style="text-align:left">growth</th></tr></thead><tbody><tr><td style="text-align:left">10011</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">省略</td><td style="text-align:left">省略</td></tr><tr><td style="text-align:left">10010</td><td style="text-align:left">54496</td></tr><tr><td style="text-align:left">10004</td><td style="text-align:left">34003</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">emp_no,</span><br><span class="line">growth</span><br><span class="line"><span class="keyword">FROM</span>(<span class="keyword">SELECT</span></span><br><span class="line">a.emp_no,</span><br><span class="line">b.salary-a.salary <span class="keyword">AS</span> growth</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span></span><br><span class="line">t1.emp_no,</span><br><span class="line">salary</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">employees <span class="keyword">AS</span> t1,</span><br><span class="line">salaries <span class="keyword">AS</span> t2</span><br><span class="line"><span class="keyword">WHERE</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">AND</span> t1.hire_date=t2.from_date) <span class="keyword">AS</span> a,</span><br><span class="line">(<span class="keyword">SELECT</span></span><br><span class="line">t1.emp_no,</span><br><span class="line">salary</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">employees <span class="keyword">AS</span> t1,</span><br><span class="line">salaries <span class="keyword">AS</span> t2</span><br><span class="line"><span class="keyword">WHERE</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">AND</span> t2.to_date=<span class="string">'9999-01-01'</span>) <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.emp_no=b.emp_no)<span class="keyword">AS</span> c</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> c.growth</span><br></pre></td></tr></table></figure><h2 id="第22题"><a href="#第22题" class="headerlink" title="第22题"></a>第22题</h2><ul><li>对所有员工的当前(to_date=’9999-01-01’)薪水按照salary进行按照1-N的排名，相同salary并列且按照emp_no升序排列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th><th style="text-align:left">salary</th><th style="text-align:left">rank</th></tr></thead><tbody><tr><td style="text-align:left">10005</td><td style="text-align:left">94692</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">10009</td><td style="text-align:left">94409</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">10010</td><td style="text-align:left">94409</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">10001</td><td style="text-align:left">88958</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left">10007</td><td style="text-align:left">88070</td><td style="text-align:left">4</td></tr><tr><td style="text-align:left">10004</td><td style="text-align:left">74057</td><td style="text-align:left">5</td></tr><tr><td style="text-align:left">10002</td><td style="text-align:left">72527</td><td style="text-align:left">6</td></tr><tr><td style="text-align:left">10003</td><td style="text-align:left">43311</td><td style="text-align:left">7</td></tr><tr><td style="text-align:left">10006</td><td style="text-align:left">43311</td><td style="text-align:left">7</td></tr><tr><td style="text-align:left">10011</td><td style="text-align:left">25828</td><td style="text-align:left">8</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">emp_no,</span><br><span class="line">growth</span><br><span class="line"><span class="keyword">FROM</span>(<span class="keyword">SELECT</span></span><br><span class="line">a.emp_no,</span><br><span class="line">b.salary-a.salary <span class="keyword">AS</span> growth</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span></span><br><span class="line">t1.emp_no,</span><br><span class="line">salary</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">employees <span class="keyword">AS</span> t1,</span><br><span class="line">salaries <span class="keyword">AS</span> t2</span><br><span class="line"><span class="keyword">WHERE</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">AND</span> t1.hire_date=t2.from_date) <span class="keyword">AS</span> a,</span><br><span class="line">(<span class="keyword">SELECT</span></span><br><span class="line">t1.emp_no,</span><br><span class="line">salary</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">employees <span class="keyword">AS</span> t1,</span><br><span class="line">salaries <span class="keyword">AS</span> t2</span><br><span class="line"><span class="keyword">WHERE</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">AND</span> t2.to_date=<span class="string">'9999-01-01'</span>) <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.emp_no=b.emp_no)<span class="keyword">AS</span> c</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> c.growth</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">dept_no</th><th style="text-align:left">dept_name</th><th style="text-align:left">sum</th></tr></thead><tbody><tr><td style="text-align:left">d001</td><td style="text-align:left">Marketing</td><td style="text-align:left">24</td></tr><tr><td style="text-align:left">d002</td><td style="text-align:left">Finance</td><td style="text-align:left">14</td></tr><tr><td style="text-align:left">d003</td><td style="text-align:left">Human Resources</td><td style="text-align:left">13</td></tr><tr><td style="text-align:left">d004</td><td style="text-align:left">Production</td><td style="text-align:left">24</td></tr><tr><td style="text-align:left">d005</td><td style="text-align:left">Development</td><td style="text-align:left">25</td></tr><tr><td style="text-align:left">d006</td><td style="text-align:left">Quality Management</td><td style="text-align:left">25</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    t1.dept_no,</span><br><span class="line">    t3.dept_name,</span><br><span class="line">    <span class="keyword">count</span>(t2.salary) <span class="keyword">as</span> <span class="keyword">sum</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    dept_emp <span class="keyword">as</span> t1,</span><br><span class="line">    salaries <span class="keyword">as</span> t2,</span><br><span class="line">    departments <span class="keyword">as</span> t3</span><br><span class="line"><span class="keyword">where</span> t3.dept_no=t1.dept_no</span><br><span class="line"><span class="keyword">and</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> t1.dept_no</span><br></pre></td></tr></table></figure><h2 id="第22-61题"><a href="#第22-61题" class="headerlink" title="第22-61题"></a>第22-61题</h2><p>后面太多，就不罗列上去了，附上仓库地址</p><p><a href="https://github.com/impn/nowcoder/tree/master/%E6%95%B0%E6%8D%AE%E5%BA%93SQL%E5%AE%9E%E6%88%98" target="_blank">Github仓库</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;牛客网题目 &lt;a href=&quot;https://www.nowcoder.com/ta/sql&quot;&gt;https://www.nowcoder.com/ta/sql&lt;/a&gt;&lt;br&gt;共计61道题目，现已全部完成&lt;/p&gt;&lt;h2 id=&quot;第01题&quot;&gt;&lt;a href=&quot;#第01题&quot; cl
      
    
    </summary>
    
      <category term="SQL" scheme="https://mapan.tech/cn/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink运行架构</title>
    <link href="https://mapan.tech/cn/6799.html"/>
    <id>https://mapan.tech/cn/6799.html</id>
    <published>2019-06-18T12:57:34.000Z</published>
    <updated>2019-10-20T13:01:10.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flink运行时的组件"><a href="#Flink运行时的组件" class="headerlink" title="Flink运行时的组件"></a>Flink运行时的组件</h2><p>Flink运行时架构主要包括四个不同的组件，它们会在运行流处理应用程序时协同工作：作业管理器（JobManager）、资源管理器（ResourceManager）、任务管理器（TaskManager），以及分发器（Dispatcher）。因为Flink是用Java和Scala实现的，所以所有组件都会运行在Java虚拟机上。每个组件的职责如下：</p><h3 id="作业管理器（JobManager）"><a href="#作业管理器（JobManager）" class="headerlink" title="作业管理器（JobManager）"></a>作业管理器（JobManager）</h3><p>控制一个应用程序执行的主进程，也就是说，每个应用程序都会被一个不同的JobManager所控制执行。JobManager会先接收到要执行的应用程序，这个应用程序会包括：作业图（JobGraph）、逻辑数据流图（logical dataflow graph）和打包了所有的类、库和其它资源的JAR包。JobManager会把JobGraph转换成一个物理层面的数据流图，这个图被叫做“执行图”（ExecutionGraph），包含了所有可以并发执行的任务。JobManager会向资源管理器（ResourceManager）请求执行任务必要的资源，也就是任务管理器（TaskManager）上的插槽（slot）。一旦它获取到了足够的资源，就会将执行图分发到真正运行它们的TaskManager上。而在运行过程中，JobManager会负责所有需要中央协调的操作，比如说检查点（checkpoints）的协调。</p><h3 id="资源管理器（ResourceManager）"><a href="#资源管理器（ResourceManager）" class="headerlink" title="资源管理器（ResourceManager）"></a>资源管理器（ResourceManager）</h3><p>主要负责管理任务管理器（TaskManager）的插槽（slot），TaskManger插槽是Flink中定义的处理资源单元。Flink为不同的环境和资源管理工具提供了不同资源管理器，比如YARN、Mesos、K8s，以及standalone部署。当JobManager申请插槽资源时，ResourceManager会将有空闲插槽的TaskManager分配给JobManager。如果ResourceManager没有足够的插槽来满足JobManager的请求，它还可以向资源提供平台发起会话，以提供启动TaskManager进程的容器。另外，ResourceManager还负责终止空闲的TaskManager，释放计算资源。</p><h3 id="任务管理器（TaskManager）"><a href="#任务管理器（TaskManager）" class="headerlink" title="任务管理器（TaskManager）"></a>任务管理器（TaskManager）</h3><p>Flink中的工作进程。通常在Flink中会有多个TaskManager运行，每一个TaskManager都包含了一定数量的插槽（slots）。插槽的数量限制了TaskManager能够执行的任务数量。启动之后，TaskManager会向资源管理器注册它的插槽；收到资源管理器的指令后，TaskManager就会将一个或者多个插槽提供给JobManager调用。JobManager就可以向插槽分配任务（tasks）来执行了。在执行过程中，一个TaskManager可以跟其它运行同一应用程序的TaskManager交换数据。</p><h3 id="分发器（Dispatcher）"><a href="#分发器（Dispatcher）" class="headerlink" title="分发器（Dispatcher）"></a>分发器（Dispatcher）</h3><p>可以跨作业运行，它为应用提交提供了REST接口。当一个应用被提交执行时，分发器就会启动并将应用移交给一个JobManager。由于是REST接口，所以Dispatcher可以作为集群的一个HTTP接入点，这样就能够不受防火墙阻挡。Dispatcher也会启动一个Web UI，用来方便地展示和监控作业执行的信息。Dispatcher在架构中可能并不是必需的，这取决于应用提交运行的方式。</p><h2 id="任务提交流程"><a href="#任务提交流程" class="headerlink" title="任务提交流程"></a>任务提交流程</h2><p>我们来看看当一个应用提交执行时，Flink的各个组件是如何交互协作的：</p><p><img src="/cn/6799/clip_image001.png" alt="img"></p><p>图 任务提交和组件交互流程</p><p>上图是从一个较为高层级的视角，来看应用中各组件的交互协作。如果部署的集群环境不同（例如YARN，Mesos，Kubernetes，standalone等），其中一些步骤可以被省略，或是有些组件会运行在同一个JVM进程中。</p><p>具体地，如果我们将Flink集群部署到YARN上，那么就会有如下的提交流程：</p><p><img src="/cn/6799/clip_image002.jpg" alt="img"></p><p>图 Yarn模式任务提交流程</p><p>Flink任务提交后，Client向HDFS上传Flink的Jar包和配置，之后向Yarn ResourceManager提交任务，ResourceManager分配Container资源并通知对应的NodeManager启动ApplicationMaster，ApplicationMaster启动后加载Flink的Jar包和配置构建环境，然后启动JobManager，之后ApplicationMaster向ResourceManager申请资源启动TaskManager，ResourceManager分配Container资源后，由ApplicationMaster通知资源所在节点的NodeManager启动TaskManager，NodeManager加载Flink的Jar包和配置构建环境并启动TaskManager，TaskManager启动后向JobManager发送心跳包，并等待JobManager向其分配任务。</p><h2 id="任务调度原理"><a href="#任务调度原理" class="headerlink" title="任务调度原理"></a>任务调度原理</h2><p><img src="/cn/6799/clip_image003.png" alt="img"></p><p>图 任务调度原理</p><p>客户端不是运行时和程序执行的一部分，但它用于准备并发送dataflow(JobGraph)给Master(JobManager)，然后，客户端断开连接或者维持连接以等待接收计算结果。</p><p>当 Flink 集群启动后，首先会启动一个 JobManger 和一个或多个的 TaskManager。由 Client 提交任务给 JobManager，JobManager 再调度任务到各个 TaskManager 去执行，然后 TaskManager 将心跳和统计信息汇报给 JobManager。TaskManager 之间以流的形式进行数据的传输。上述三者均为独立的 JVM 进程。</p><p><strong>Client</strong> 为提交 Job 的客户端，可以是运行在任何机器上（与 JobManager 环境连通即可）。提交 Job 后，Client 可以结束进程（Streaming的任务），也可以不结束并等待结果返回。</p><p><strong>JobManager</strong> 主要负责调度 Job 并协调 Task 做 checkpoint，职责上很像 Storm 的 Nimbus。从 Client 处接收到 Job 和 JAR 包等资源后，会生成优化后的执行计划，并以 Task 的单元调度到各个 TaskManager 去执行。</p><p><strong>TaskManager</strong> 在启动的时候就设置好了槽位数（Slot），每个 slot 能启动一个 Task，Task 为线程。从 JobManager 处接收需要部署的 Task，部署启动后，与自己的上游建立 Netty 连接，接收数据并处理。</p><h3 id="TaskManger与Slots"><a href="#TaskManger与Slots" class="headerlink" title="TaskManger与Slots"></a>TaskManger与Slots</h3><p>Flink中每一个worker(TaskManager)都是一个<strong>JVM进程</strong>，它可能会在<strong>独立的线程</strong>上执行一个或多个subtask。为了控制一个worker能接收多少个task，worker通过task slot来进行控制（一个worker至少有一个task slot）。</p><p>每个task slot表示TaskManager拥有资源的<strong>一个固定大小的子集</strong>。假如一个TaskManager有三个slot，那么它会将其管理的内存分成三份给各个slot。资源slot化意味着一个subtask将不需要跟来自其他job的subtask竞争被管理的内存，取而代之的是它将拥有一定数量的内存储备。需要注意的是，这里不会涉及到CPU的隔离，slot目前仅仅用来隔离task的受管理的内存。</p><p>通过调整task slot的数量，允许用户定义subtask之间如何互相隔离。如果一个TaskManager一个slot，那将意味着每个task group运行在独立的JVM中（该JVM可能是通过一个特定的容器启动的），而一个TaskManager多个slot意味着更多的subtask可以共享同一个JVM。而在同一个JVM进程中的task将共享TCP连接（基于多路复用）和心跳消息。它们也可能共享数据集和数据结构，因此这减少了每个task的负载。</p><p><img src="/cn/6799/clip_image004.png" alt="img"></p><p>图 TaskManager与Slot</p><p><img src="/cn/6799/clip_image005.jpg" alt="img"></p><p>图 子任务共享Slot</p><p>默认情况下，Flink允许子任务共享slot，即使它们是不同任务的子任务（前提是它们来自同一个job）。 这样的结果是，一个slot可以保存作业的整个管道。</p><p><strong>Task Slot是静态的概念，是指TaskManager具有的并发执行能力</strong>，可以通过参数taskmanager.numberOfTaskSlots进行配置；而<strong>并行度parallelism是动态概念，即TaskManager运行程序时实际使用的并发能力</strong>，可以通过参数parallelism.default进行配置。</p><p>也就是说，假设一共有3个TaskManager，每一个TaskManager中的分配3个TaskSlot，也就是每个TaskManager可以接收3个task，一共9个TaskSlot，如果我们设置parallelism.default=1，即运行程序默认的并行度为1，9个TaskSlot只用了1个，有8个空闲，因此，设置合适的并行度才能提高效率。</p><p><img src="/cn/6799/clip_image006.jpg" alt="说明: https://img-blog.csdn.net/20170824162738505?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTY4MjIzNDI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p><img src="/cn/6799/clip_image007.jpg" alt="说明: https://img-blog.csdn.net/20170824162117401?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTY4MjIzNDI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><h3 id="程序与数据流（DataFlow）"><a href="#程序与数据流（DataFlow）" class="headerlink" title="程序与数据流（DataFlow）"></a><strong>程序与数据流（DataFlow）</strong></h3><p><img src="/cn/6799/clip_image008.png" alt="img"></p><p>所有的Flink程序都是由三部分组成的： <strong>Source</strong> 、<strong>Transformation</strong>和<strong>Sink</strong>。</p><p>Source负责读取数据源，Transformation利用各种算子进行处理加工，Sink负责输出。</p><p>在运行时，Flink上运行的程序会被映射成“逻辑数据流”（dataflows），它包含了这三部分。<strong>每一个dataflow以一个或多个sources开始以一个或多个sinks结束</strong>。dataflow类似于任意的有向无环图（DAG）。在大部分情况下，程序中的转换运算（transformations）跟dataflow中的算子（operator）是一一对应的关系，但有时候，一个transformation可能对应多个operator。</p><p><img src="/cn/6799/clip_image009.png" alt="img"></p><p>图 程序与数据流</p><h3 id="执行图（ExecutionGraph）"><a href="#执行图（ExecutionGraph）" class="headerlink" title="执行图（ExecutionGraph）"></a><strong>执行图（ExecutionGraph）</strong></h3><p>由Flink程序直接映射成的数据流图是StreamGraph，也被称为逻辑流图，因为它们表示的是计算逻辑的高级视图。为了执行一个流处理程序，Flink需要将逻辑流图转换为物理数据流图（也叫执行图），详细说明程序的执行方式。</p><p>Flink 中的执行图可以分成四层：StreamGraph -&gt; JobGraph -&gt; ExecutionGraph -&gt; 物理执行图。</p><p><strong>StreamGraph</strong>：是根据用户通过 Stream API 编写的代码生成的最初的图。用来表示程序的拓扑结构。</p><p><strong>JobGraph</strong>：StreamGraph经过优化后生成了 JobGraph，提交给 JobManager 的数据结构。主要的优化为，将多个符合条件的节点 chain 在一起作为一个节点，这样可以减少数据在节点之间流动所需要的序列化/反序列化/传输消耗。</p><p><strong>ExecutionGraph</strong>：JobManager 根据 JobGraph 生成ExecutionGraph。ExecutionGraph是JobGraph的并行化版本，是调度层最核心的数据结构。</p><p><strong>物理执行图</strong>：JobManager 根据 ExecutionGraph 对 Job 进行调度后，在各个TaskManager 上部署 Task 后形成的“图”，并不是一个具体的数据结构。</p><p><img src="/cn/6799/clip_image010.jpg" alt="img"></p><h3 id="并行度（Parallelism）"><a href="#并行度（Parallelism）" class="headerlink" title="并行度（Parallelism）"></a><strong>并行度（Parallelism）</strong></h3><p>Flink程序的执行具有<strong>并行、分布式</strong>的特性。</p><p>在执行过程中，一个流（stream）包含一个或多个分区（stream partition），而每一个算子（operator）可以包含一个或多个子任务（operator subtask），这些子任务在不同的线程、不同的物理机或不同的容器中彼此互不依赖地执行。</p><p><strong>一个特定算子的子任务（subtask）的个数被称之为其并行度（parallelism）</strong>。一般情况下，一个流程序的并行度，可以认为就是其所有算子中最大的并行度。一个程序中，不同的算子可能具有不同的并行度。</p><p><img src="/cn/6799/clip_image011.png" alt="img"></p><p>图 并行数据流</p><p>Stream在算子之间传输数据的形式可以是one-to-one(forwarding)的模式也可以是redistributing的模式，具体是哪一种形式，取决于算子的种类。</p><p><strong>One-to-one</strong>：stream(比如在source和map operator之间)维护着分区以及元素的顺序。那意味着map 算子的子任务看到的元素的个数以及顺序跟source 算子的子任务生产的元素的个数、顺序相同，map、fliter、flatMap等算子都是one-to-one的对应关系。</p><h4 id="类似于spark中的窄依赖"><a href="#类似于spark中的窄依赖" class="headerlink" title="类似于spark中的窄依赖"></a>类似于spark中的<strong>窄依赖</strong></h4><p><strong>Redistributing</strong>：stream(map()跟keyBy/window之间或者keyBy/window跟sink之间)的分区会发生改变。每一个算子的子任务依据所选择的transformation发送数据到不同的目标任务。例如，keyBy() 基于hashCode重分区、broadcast和rebalance会随机重新分区，这些算子都会引起redistribute过程，而redistribute过程就类似于Spark中的shuffle过程。</p><h4 id="类似于spark中的宽依赖"><a href="#类似于spark中的宽依赖" class="headerlink" title="类似于spark中的宽依赖"></a>类似于spark中的<strong>宽依赖</strong></h4><h3 id="任务链（Operator-Chains）"><a href="#任务链（Operator-Chains）" class="headerlink" title="任务链（Operator Chains）"></a><strong>任务链（Operator Chains）</strong></h3><p><strong>相同并行度的one to one操作</strong>，Flink这样相连的算子链接在一起形成一个task，原来的算子成为里面的一部分。将算子链接成task是非常有效的优化：它能减少线程之间的切换和基于缓存区的数据交换，在减少时延的同时提升吞吐量。链接的行为可以在编程API中进行指定。</p><p><img src="/cn/6799/clip_image012.jpg" alt="img"></p><p>图 task与operator chains</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Flink运行时的组件&quot;&gt;&lt;a href=&quot;#Flink运行时的组件&quot; class=&quot;headerlink&quot; title=&quot;Flink运行时的组件&quot;&gt;&lt;/a&gt;Flink运行时的组件&lt;/h2&gt;&lt;p&gt;Flink运行时架构主要包括四个不同的组件，它们会在运行流处理应用程
      
    
    </summary>
    
      <category term="Flink" scheme="https://mapan.tech/cn/categories/Flink/"/>
    
    
  </entry>
  
  <entry>
    <title>初识Flink</title>
    <link href="https://mapan.tech/cn/d552.html"/>
    <id>https://mapan.tech/cn/d552.html</id>
    <published>2019-05-20T06:52:06.000Z</published>
    <updated>2019-10-20T12:54:02.254Z</updated>
    
    <content type="html"><![CDATA[<p>Flink起源于Stratosphere项目，Stratosphere是在2010~2014年由3所地处柏林的大学和欧洲的一些其他的大学共同进行的研究项目，2014年4月Stratosphere的代码被复制并捐赠给了Apache软件基金会，参加这个孵化项目的初始成员是Stratosphere系统的核心开发人员，2014年12月，Flink一跃成为Apache软件基金会的顶级项目。</p><p>在德语中，Flink一词表示快速和灵巧，项目采用一只松鼠的彩色图案作为logo，这不仅是因为松鼠具有快速和灵巧的特点，还因为柏林的松鼠有一种迷人的红棕色，而Flink的松鼠logo拥有可爱的尾巴，尾巴的颜色与Apache软件基金会的logo颜色相呼应，也就是说，这是一只Apache风格的松鼠。</p><p><img src="/cn/d552/clip_image001.jpg" alt="img"></p><p><img src="/cn/d552/clip_image002.jpg" alt="img"></p><p>Flink Logo</p><p>Flink项目的理念是：“Apache Flink是为分布式、高性能、随时可用以及准确的流处理应用程序打造的开源流处理框架”。</p><p>Apache Flink是一个框架和分布式处理引擎，用于对无界和有界数据流进行有状态计算。Flink被设计在所有常见的集群环境中运行，以内存执行速度和任意规模来执行计算。</p><p><img src="/cn/d552/clip_image003.jpg" alt="img"></p><p>1.2 Flink的重要特点</p><p><strong>1.2.1</strong> <strong>事件驱动型**</strong>(Event-driven)**</p><p>事件驱动型应用是一类具有状态的应用，它从一个或多个事件流提取数据，并根据到来的事件触发计算、状态更新或其他外部动作。比较典型的就是以kafka为代表的消息队列几乎都是事件驱动型应用。</p><p>与之不同的就是SparkStreaming微批次，如图：</p><p><img src="/cn/d552/clip_image004.jpg" alt="img"></p><p>事件驱动型：</p><p><img src="/cn/d552/clip_image005.png" alt="img"></p><p><strong>1.2.2</strong> <strong>流与批的世界观</strong></p><p><strong>批处理</strong>的特点是有界、持久、大量，非常适合需要访问全套记录才能完成的计算工作，一般用于离线统计。</p><p><strong>流处理</strong>的特点是无界、实时, 无需针对整个数据集执行操作，而是对通过系统传输的每个数据项执行操作，一般用于实时统计。</p><p>在spark的世界观中，一切都是由批次组成的，离线数据是一个大批次，而实时数据是由一个一个无限的小批次组成的。</p><p>而在flink的世界观中，一切都是由流组成的，离线数据是有界限的流，实时数据是一个没有界限的流，这就是所谓的有界流和无界流。</p><p><strong>无界数据流</strong>：无界数据流有一个开始但是没有结束，它们不会在生成时终止并提供数据，必须连续处理无界流，也就是说必须在获取后立即处理event。对于无界数据流我们无法等待所有数据都到达，因为输入是无界的，并且在任何时间点都不会完成。处理无界数据通常要求以特定顺序（例如事件发生的顺序）获取event，以便能够推断结果完整性。</p><p><strong>有界数据流</strong>：有界数据流有明确定义的开始和结束，可以在执行任何计算之前通过获取所有数据来处理有界流，处理有界流不需要有序获取，因为可以始终对有界数据集进行排序，有界流的处理也称为批处理。</p><p><img src="/cn/d552/clip_image006.jpg" alt="img"></p><p>这种以流为世界观的架构，获得的最大好处就是具有极低的延迟。</p><p><strong>1.2.3</strong> <strong>分层**</strong>api**</p><p><img src="/cn/d552/clip_image007.jpg" alt="img"></p><p>最底层级的抽象仅仅提供了有状态流，它将通过过程函数（Process Function）被嵌入到DataStream API中。底层过程函数（Process Function） 与 DataStream API 相集成，使其可以对某些特定的操作进行底层的抽象，它允许用户可以自由地处理来自一个或多个数据流的事件，并使用一致的容错的状态。除此之外，用户可以注册事件时间并处理时间回调，从而使程序可以处理复杂的计算。</p><p>实际上，大多数应用并不需要上述的底层抽象，而是针对核心API（Core APIs） 进行编程，比如DataStream API（有界或无界流数据）以及DataSet API（有界数据集）。这些API为数据处理提供了通用的构建模块，比如由用户定义的多种形式的转换（transformations），连接（joins），聚合（aggregations），窗口操作（windows）等等。DataSet API 为有界数据集提供了额外的支持，例如循环与迭代。这些API处理的数据类型以类（classes）的形式由各自的编程语言所表示。</p><p>Table API 是以表为中心的声明式编程，其中表可能会动态变化（在表达流数据时）。Table API遵循（扩展的）关系模型：表有二维数据结构（schema）（类似于关系数据库中的表），同时API提供可比较的操作，例如select、project、join、group-by、aggregate等。Table API程序声明式地定义了什么逻辑操作应该执行，而不是准确地确定这些操作代码的看上去如何。</p><p>尽管Table API可以通过多种类型的用户自定义函数（UDF）进行扩展，其仍不如核心API更具表达能力，但是使用起来却更加简洁（代码量更少）。除此之外，Table API程序在执行之前会经过内置优化器进行优化。</p><p>你可以在表与 DataStream/DataSet 之间无缝切换，以允许程序将 Table API 与 DataStream 以及 DataSet 混合使用。</p><p>Flink提供的最高层级的抽象是 SQL 。这一层抽象在语法与表达能力上与 Table API 类似，但是是以SQL查询表达式的形式表现程序。SQL抽象与Table API交互密切，同时SQL查询可以直接在Table API定义的表上执行。</p><p>目前Flink作为批处理还不是主流，不如Spark成熟，所以DataSet使用的并不是很多。Flink Table API和Flink SQL也并不完善，大多都由各大厂商自己定制。所以我们主要学习DataStream API的使用。实际上Flink作为最接近Google DataFlow模型的实现，是流批统一的观点，所以基本上使用DataStream就可以了。</p><p>Flink几大模块</p><ul><li>Flink Table &amp; SQL(还没开发完)</li><li>Flink Gelly(图计算)</li><li>Flink CEP(复杂事件处理)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Flink起源于Stratosphere项目，Stratosphere是在2010~2014年由3所地处柏林的大学和欧洲的一些其他的大学共同进行的研究项目，2014年4月Stratosphere的代码被复制并捐赠给了Apache软件基金会，参加这个孵化项目的初始成员是Str
      
    
    </summary>
    
      <category term="Flink" scheme="https://mapan.tech/cn/categories/Flink/"/>
    
    
  </entry>
  
  <entry>
    <title>Frp内网穿透实现minecraft远程联机</title>
    <link href="https://mapan.tech/cn/6b1f.html"/>
    <id>https://mapan.tech/cn/6b1f.html</id>
    <published>2019-01-10T02:06:42.000Z</published>
    <updated>2019-10-20T11:46:04.562Z</updated>
    
    <content type="html"><![CDATA[<p>过年想在家玩minecraft，公网多人游戏，理论上完全可行，自己琢磨了一下，记录如何配置内网穿透</p><blockquote><ol><li>VPS搭建minecraft服务器。</li><li>内网穿透，VPS做TCP端口转发。</li></ol></blockquote><p>第一个方案，服务器端架设成功了，但是不可以加mods和插件。另外由于服务器配置太低，运行一段时间就会崩溃。以失败告终。<br>第二个方案，花点时间琢磨了一下，发现可行。下文为配置方法</p><h2 id="实现功能和原理"><a href="#实现功能和原理" class="headerlink" title="实现功能和原理"></a>实现功能和原理</h2><p>minecraft公网联机，公网服务器安装Frps，来实现转发服务。内网主机安装Frpc，来实现穿透。</p><h2 id="配置前准备"><a href="#配置前准备" class="headerlink" title="配置前准备"></a>配置前准备</h2><blockquote><p>公网服务器一台 ,假设我的服务器IP是155.155.155.156<br>内网电脑一台<br>域名一个 ，假设我的域名是baidu.com</p></blockquote><h2 id="解析域名到公网服务器的IP"><a href="#解析域名到公网服务器的IP" class="headerlink" title="解析域名到公网服务器的IP"></a>解析域名到公网服务器的IP</h2><p>添加一条A记录，主机记录自定义，我写的是router<br><img src="https://ws1.sinaimg.cn/mw690/005vwoCyly1fz1c4jfiocj30oe07ldgm.jpg" alt></p><h2 id="安装Frp"><a href="#安装Frp" class="headerlink" title="安装Frp"></a>安装Frp</h2><p><a href="https://github.com/fatedier/frp">项目地址</a></p><h3 id="公网服务器端"><a href="#公网服务器端" class="headerlink" title="公网服务器端"></a>公网服务器端</h3><p>找到与自己服务器和本地主机对应版本，下载即可。<br>我的VPS是搬瓦工的低配，如下<br><img src="https://ws1.sinaimg.cn/mw690/005vwoCyly1fz1cb2jvukj30j00dmjs8.jpg" alt><br>安装的是CentOS6_32位系统，所以就下载Linux32位的软件 frp_x.x.x_linux_386.tar.gz<br>下载并解压后得到一个文件夹，里面有七个文件，对于公网服务器来说只有frps和frps.ini是我们必需的。</p><h4 id="配置frps-ini"><a href="#配置frps-ini" class="headerlink" title="配置frps.ini"></a>配置frps.ini</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#frps.ini</span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">bind_udp_port = 7001</span><br><span class="line">vhost_http_port = 80</span><br><span class="line">vhost_https_port = 10443</span><br></pre></td></tr></table></figure><p>3，4两行是必须配置的，端口可以自定义，5，6两行是其他的服务，可以照抄或者不予理会。<br>使用下面命令运行<br><code>./frps -c ./frps.ini</code><br>我相信你可以通过Screen插件让此服务保持后台运行，此服务建议一直运行。</p><h3 id="内网电脑端"><a href="#内网电脑端" class="headerlink" title="内网电脑端"></a>内网电脑端</h3><p>打开minecraft游戏，开启局域网联机，生成一个端口号，记下来。</p><p>找到与自己电脑对应的版本，下载即可。我本地电脑win_x64系统，所以下载frp_0.22.0_windows_amd64.zip。<br>和之前一样解压得到7个文件，只有frpc.exe和frpc.ini是我们必需的。</p><h4 id="配置frpc-ini"><a href="#配置frpc-ini" class="headerlink" title="配置frpc.ini"></a>配置frpc.ini</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line"></span><br><span class="line"># x.x.x.x为公网服务器IP地址，只需设置一次</span><br><span class="line">server_addr = x.x.x.x</span><br><span class="line"></span><br><span class="line"># server_port填写上面配置的bind_port值，只需设置一次</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[range:test_tcp]</span><br><span class="line">type = tcp</span><br><span class="line"># local_ip填写我们电脑的局域网ip，每次开启游戏需要修改。</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line"></span><br><span class="line"># local_port填写刚才记下的minecraft生成的端口号，每次开启游戏需要修改。</span><br><span class="line">local_port = 10240</span><br><span class="line"></span><br><span class="line">#这里自定义，建议填写五位数的端口号，不超过65535，小伙伴开启游戏时候填这个。只需设置一次</span><br><span class="line">remote_port = 25600</span><br></pre></td></tr></table></figure><p>双击frpc.exe,弹出一个黑框，把这个黑框最小化后台。<br><img src="https://ws1.sinaimg.cn/mw690/005vwoCyly1fz1bwq6j6jj30kw08k75f.jpg" alt></p><p>在远方的小伙伴，开启游戏，选择多人游戏，直接连接，输入router.baidu.com:25600，加入服务器玩耍吧。<br><img src="https://ws1.sinaimg.cn/mw690/005vwoCyly1fz1c60athuj30nq0e4acx.jpg" alt><br>【注】：router为设置的主机记录，baidu.com为自己的域名，25600为上面设置的remote_port端口号。</p><hr><p>以后每次开游戏，先打开游戏生成端口号，然后修改frpc.ini，打开frpc.exe并后台，小伙伴联机即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;过年想在家玩minecraft，公网多人游戏，理论上完全可行，自己琢磨了一下，记录如何配置内网穿透&lt;/p&gt;&lt;blockquote&gt;&lt;ol&gt;&lt;li&gt;VPS搭建minecraft服务器。&lt;/li&gt;&lt;li&gt;内网穿透，VPS做TCP端口转发。&lt;/li&gt;&lt;/ol&gt;&lt;/blockquo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SparkSQL基本操作</title>
    <link href="https://mapan.tech/cn/bfb1.html"/>
    <id>https://mapan.tech/cn/bfb1.html</id>
    <published>2018-08-20T08:09:22.000Z</published>
    <updated>2019-10-20T12:41:47.039Z</updated>
    
    <content type="html"><![CDATA[<p>首先进入spark-shell<br></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ bin/spark-shell</span><br><span class="line"><span class="type">Using</span> <span class="type">Spark</span><span class="symbol">'s</span> <span class="keyword">default</span> log4j profile: org/apache/spark/log4j-defaults.properties</span><br><span class="line"><span class="type">Setting</span> <span class="keyword">default</span> log level to <span class="string">"WARN"</span>.</span><br><span class="line"><span class="type">To</span> adjust logging level use sc.setLogLevel(newLevel). <span class="type">For</span> <span class="type">SparkR</span>, use setLogLevel(newLevel).</span><br><span class="line"><span class="type">Spark</span> context <span class="type">Web</span> <span class="type">UI</span> available at http:<span class="comment">//192.168.1.102:4040</span></span><br><span class="line"><span class="type">Spark</span> context available as <span class="symbol">'s</span>c' (master = local[*], app id = local<span class="number">-1569915192693</span>).</span><br><span class="line"><span class="type">Spark</span> session available as <span class="symbol">'spar</span>k'.</span><br><span class="line"><span class="type">Welcome</span> to</span><br><span class="line">      ____              __</span><br><span class="line">     / __/__  ___ _____/ /__</span><br><span class="line">    _\ \/ _ \/ _ `/ __/  <span class="symbol">'_</span>/</span><br><span class="line">   /___/ .__/\_,_/_/ /_/\_\   version <span class="number">2.1</span><span class="number">.1</span></span><br><span class="line">      /_/</span><br><span class="line">         </span><br><span class="line"><span class="type">Using</span> <span class="type">Scala</span> version <span class="number">2.11</span><span class="number">.8</span> (<span class="type">Java</span> <span class="type">HotSpot</span>(<span class="type">TM</span>) <span class="number">64</span>-<span class="type">Bit</span> <span class="type">Server</span> <span class="type">VM</span>, <span class="type">Java</span> <span class="number">1.8</span><span class="number">.0</span>_144)</span><br><span class="line"><span class="type">Type</span> in expressions to have them evaluated.</span><br><span class="line"><span class="type">Type</span> :help <span class="keyword">for</span> more information.</span><br></pre></td></tr></table></figure><p></p><h2 id="创建DataFrame"><a href="#创建DataFrame" class="headerlink" title="创建DataFrame"></a>创建DataFrame</h2><ul><li>从json文件中创建DataFrame</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> df = spark.read.json(<span class="string">"./examples/src/main/resources/people.json"</span>)</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [age: bigint, name: string]</span><br><span class="line"></span><br><span class="line">scala&gt; df.show</span><br><span class="line">+----+-------+</span><br><span class="line">| age|   name|</span><br><span class="line">+----+-------+</span><br><span class="line">|<span class="literal">null</span>|<span class="type">Michael</span>|</span><br><span class="line">|  <span class="number">30</span>|   <span class="type">Andy</span>|</span><br><span class="line">|  <span class="number">19</span>| <span class="type">Justin</span>|</span><br><span class="line">+----+-------+</span><br></pre></td></tr></table></figure><ul><li>对DataFrame创建一个临时表</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.createOrReplaceTempView(<span class="string">"people"</span>)</span><br><span class="line">scala&gt; spark.sql(<span class="string">"select * from people"</span>).show</span><br><span class="line">+----+-------+</span><br><span class="line">| age|   name|</span><br><span class="line">+----+-------+</span><br><span class="line">|<span class="literal">null</span>|<span class="type">Michael</span>|</span><br><span class="line">|  <span class="number">30</span>|   <span class="type">Andy</span>|</span><br><span class="line">|  <span class="number">19</span>| <span class="type">Justin</span>|</span><br><span class="line">+----+-------+</span><br></pre></td></tr></table></figure><h2 id="方法一-RDDtoDF创建DataFrame"><a href="#方法一-RDDtoDF创建DataFrame" class="headerlink" title="方法一: RDDtoDF创建DataFrame"></a>方法一: RDDtoDF创建DataFrame</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">import</span> spark.implicits._</span><br><span class="line"><span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> peopleRDD = sc.textFile(<span class="string">"./examples/src/main/resources/people.txt"</span>)</span><br><span class="line">peopleRDD: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">String</span>] = ./examples/src/main/resources/people.txt <span class="type">MapPartitionsRDD</span>[<span class="number">34</span>] at textFile at &lt;console&gt;:<span class="number">27</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> df = peopleRDD.map&#123;x=&gt;<span class="keyword">val</span> para=x.split(<span class="string">","</span>);(para(<span class="number">0</span>),para(<span class="number">1</span>).trim.toInt)&#125;.toDF(<span class="string">"name"</span>,<span class="string">"age"</span>)</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [name: string, age: int]</span><br><span class="line"></span><br><span class="line">scala&gt; df.show</span><br><span class="line">+-------+---+</span><br><span class="line">|   name|age|</span><br><span class="line">+-------+---+</span><br><span class="line">|<span class="type">Michael</span>| <span class="number">29</span>|</span><br><span class="line">|   <span class="type">Andy</span>| <span class="number">30</span>|</span><br><span class="line">| <span class="type">Justin</span>| <span class="number">19</span>|</span><br><span class="line">+-------+---+</span><br></pre></td></tr></table></figure><h3 id="方法二-样例类转DataFrame-常用方式"><a href="#方法二-样例类转DataFrame-常用方式" class="headerlink" title="方法二 : 样例类转DataFrame(常用方式)"></a>方法二 : 样例类转DataFrame(常用方式)</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">people</span>(<span class="params">name:<span class="type">String</span>,age:<span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">people</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span> <span class="title">peopleRDD</span>.<span class="title">map</span></span>&#123;x=&gt;<span class="keyword">val</span> para=x.split(<span class="string">","</span>);people(para(<span class="number">0</span>),para(<span class="number">1</span>).trim.toInt) &#125;.toDF</span><br><span class="line">res21: org.apache.spark.sql.<span class="type">DataFrame</span> = [name: string, age: int]</span><br></pre></td></tr></table></figure><h3 id="方法三-通过schema创建DataFrame"><a href="#方法三-通过schema创建DataFrame" class="headerlink" title="方法三: 通过schema创建DataFrame"></a>方法三: 通过schema创建DataFrame</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入所需的类型</span></span><br><span class="line">scala&gt; <span class="keyword">import</span> org.apache.spark.sql.types._</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.types._</span><br><span class="line"><span class="comment">// 创建Schema</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> structType: <span class="type">StructType</span> = <span class="type">StructType</span>(<span class="type">StructField</span>(<span class="string">"name"</span>, <span class="type">StringType</span>) :: <span class="type">StructField</span>(<span class="string">"age"</span>, <span class="type">IntegerType</span>) :: <span class="type">Nil</span>)</span><br><span class="line">structType: org.apache.spark.sql.types.<span class="type">StructType</span> = <span class="type">StructType</span>(<span class="type">StructField</span>(name,<span class="type">StringType</span>,<span class="literal">true</span>), <span class="type">StructField</span>(age,<span class="type">IntegerType</span>,<span class="literal">true</span>))</span><br><span class="line"><span class="comment">// 导入所需的类型</span></span><br><span class="line">scala&gt; <span class="keyword">import</span> org.apache.spark.sql.<span class="type">Row</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">Row</span></span><br><span class="line"><span class="comment">// 根据给定的类型创建二元组RDD</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> data = peopleRDD.map&#123; x =&gt; <span class="keyword">val</span> para = x.split(<span class="string">","</span>);<span class="type">Row</span>(para(<span class="number">0</span>),para(<span class="number">1</span>).trim.toInt)&#125;</span><br><span class="line">data: org.apache.spark.rdd.<span class="type">RDD</span>[org.apache.spark.sql.<span class="type">Row</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">41</span>] at map at &lt;console&gt;:<span class="number">33</span></span><br><span class="line"><span class="comment">// 根据数据及给定的schema创建DataFrame</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> dataFrame = spark.createDataFrame(data, structType)</span><br><span class="line">dataFrame: org.apache.spark.sql.<span class="type">DataFrame</span> = [name: string, age: int]</span><br></pre></td></tr></table></figure><h2 id="创建DataSet"><a href="#创建DataSet" class="headerlink" title="创建DataSet"></a>创建DataSet</h2><h3 id="通过样例类创建DataSet"><a href="#通过样例类创建DataSet" class="headerlink" title="通过样例类创建DataSet"></a>通过样例类创建DataSet</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Long</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span> <span class="title">val</span> <span class="title">caseClassDS</span> </span>= <span class="type">Seq</span>(<span class="type">Person</span>(<span class="string">"Andy"</span>, <span class="number">32</span>)).toDS()</span><br><span class="line">caseClassDS: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">Person</span>] = [name: string, age: bigint]</span><br><span class="line"></span><br><span class="line">scala&gt; caseClassDS.show</span><br><span class="line">+----+---+</span><br><span class="line">|name|age|</span><br><span class="line">+----+---+</span><br><span class="line">|<span class="type">Andy</span>| <span class="number">32</span>|</span><br><span class="line">+----+---+</span><br></pre></td></tr></table></figure><h3 id="从RDD创建DataSet"><a href="#从RDD创建DataSet" class="headerlink" title="从RDD创建DataSet"></a>从RDD创建DataSet</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> peopleRDD = sc.textFile(<span class="string">"examples/src/main/resources/people.txt"</span>)</span><br><span class="line">peopleRDD: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">String</span>] = examples/src/main/resources/people.txt <span class="type">MapPartitionsRDD</span>[<span class="number">1</span>] at textFile at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; peopleRDD.map(line =&gt; &#123;<span class="keyword">val</span> para = line.split(<span class="string">","</span>);<span class="type">Person</span>(para(<span class="number">0</span>),para(<span class="number">1</span>).trim.toInt)&#125;).toDS</span><br><span class="line">res1: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">Person</span>] = [name: string, age: bigint]</span><br><span class="line"></span><br><span class="line">scala&gt; res1.show</span><br><span class="line">+-------+---+</span><br><span class="line">|   name|age|</span><br><span class="line">+-------+---+</span><br><span class="line">|<span class="type">Michael</span>| <span class="number">29</span>|</span><br><span class="line">|   <span class="type">Andy</span>| <span class="number">30</span>|</span><br><span class="line">| <span class="type">Justin</span>| <span class="number">19</span>|</span><br><span class="line">+-------+---+</span><br></pre></td></tr></table></figure><h2 id="DataFrame与DataSet的互相转换"><a href="#DataFrame与DataSet的互相转换" class="headerlink" title="DataFrame与DataSet的互相转换"></a>DataFrame与DataSet的互相转换</h2><h3 id="DataFreame转DataSet"><a href="#DataFreame转DataSet" class="headerlink" title="DataFreame转DataSet"></a>DataFreame转DataSet</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> df = spark.read.json(<span class="string">"examples/src/main/resources/people.json"</span>)</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [age: bigint, name: string]                </span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Long</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span> <span class="title">df</span>.<span class="title">as</span>[<span class="type">Person</span>]</span></span><br><span class="line"><span class="class"><span class="title">res3</span></span>: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">Person</span>] = [age: bigint, name: string]</span><br><span class="line"></span><br><span class="line">scala&gt; res3.show</span><br><span class="line">+----+-------+</span><br><span class="line">| age|   name|</span><br><span class="line">+----+-------+</span><br><span class="line">|<span class="literal">null</span>|<span class="type">Michael</span>|</span><br><span class="line">|  <span class="number">30</span>|   <span class="type">Andy</span>|</span><br><span class="line">|  <span class="number">19</span>| <span class="type">Justin</span>|</span><br><span class="line">+----+-------+</span><br></pre></td></tr></table></figure><h3 id="DasaSet转DataFrame"><a href="#DasaSet转DataFrame" class="headerlink" title="DasaSet转DataFrame"></a>DasaSet转DataFrame</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Long</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span> <span class="title">val</span> <span class="title">ds</span> </span>= <span class="type">Seq</span>(<span class="type">Person</span>(<span class="string">"Andy"</span>, <span class="number">32</span>)).toDS()</span><br><span class="line">ds: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">Person</span>] = [name: string, age: bigint]</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> df = ds.toDF</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [name: string, age: bigint]</span><br><span class="line"></span><br><span class="line">scala&gt; df.show</span><br><span class="line">+----+---+</span><br><span class="line">|name|age|</span><br><span class="line">+----+---+</span><br><span class="line">|<span class="type">Andy</span>| <span class="number">32</span>|</span><br><span class="line">+----+---+</span><br></pre></td></tr></table></figure><h2 id="三者的互相转换"><a href="#三者的互相转换" class="headerlink" title="三者的互相转换"></a>三者的互相转换</h2><p><img src="/cn/bfb1/1569984874237.png" alt="1569984874237"></p><p>三者的共性</p><ol><li><code>RDD</code>、<code>DataFrame</code>、<code>Dataset</code>全都是spark平台下的分布式弹性数据集，为处理超大型数据提供便利;</li><li>三者都有惰性机制，在进行创建、转换，如<code>map</code>方法时，不会立即执行，只有在遇到<code>Action</code>如<code>foreach</code>时，三者才会开始遍历运算;</li><li>三者有许多共同的函数，如filter，排序等;</li><li>在对<code>DataFrame</code>和<code>Dataset</code>进行操作许多操作都需要导入隐式转换 <code>:import spark.implicits._</code>（在创建好<code>SparkSession</code>对象后尽量直接导入）</li></ol><p>编译器中的实现<br></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// from people.scala</span></span><br><span class="line"><span class="keyword">package</span> tech.mapan.bean</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">people</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">BigInt</span></span>)</span></span><br></pre></td></tr></table></figure><p></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// from SparkSQLTest.scala</span></span><br><span class="line"><span class="keyword">package</span> tech.mapan</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"><span class="keyword">import</span> tech.mapan.bean.people</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkSQLTest</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * DataFrame、DataSet、rdd之间的转换/ sparkSQL初步应用</span></span><br><span class="line"><span class="comment">    * @param args</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().appName(<span class="string">"sparkSQL"</span>).master(<span class="string">"local[*]"</span>).getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line">    <span class="comment">// 从文件创建DataFrame</span></span><br><span class="line">    <span class="keyword">val</span> df = spark.read.json(<span class="string">"./src/main/resources/people.json"</span>)</span><br><span class="line">    df.show</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DataFrame转DataSet</span></span><br><span class="line">    <span class="keyword">val</span> ds = df.as[people]</span><br><span class="line">    ds.show</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DataFrame转rdd</span></span><br><span class="line">    <span class="keyword">val</span> rdd1 = df.rdd</span><br><span class="line">    rdd1.collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DataSet转rdd</span></span><br><span class="line">    <span class="keyword">val</span> rdd2 = ds.rdd</span><br><span class="line">    rdd2.collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建临时表</span></span><br><span class="line">    ds.createOrReplaceTempView(<span class="string">"persons"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sql查询年龄超过21岁的人。</span></span><br><span class="line">    spark.sql(<span class="string">"SELECT * FROM persons WHERE age &gt; 21"</span>).show</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// sql查询所有人年龄的和</span></span><br><span class="line">    spark.sql(<span class="string">"SELECT SUM(age) FROM persons"</span>).show</span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    spark.stop</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先进入spark-shell&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
      <category term="Spark" scheme="https://mapan.tech/cn/categories/Spark/"/>
    
    
  </entry>
  
  <entry>
    <title>SparkSQL概念</title>
    <link href="https://mapan.tech/cn/d275.html"/>
    <id>https://mapan.tech/cn/d275.html</id>
    <published>2018-08-14T00:50:38.000Z</published>
    <updated>2019-10-20T11:43:35.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Spark-SQL"><a href="#什么是Spark-SQL" class="headerlink" title="什么是Spark SQL"></a>什么是Spark SQL</h2><p>Spark SQL是Spark用来处理结构化数据的一个模块，它提供了2个编程抽象：DataFrame和DataSet，并且作为分布式SQL查询引擎的作用。</p><p>我们已经学习了Hive，它是将Hive SQL转换成MapReduce然后提交到集群上执行，大大简化了编写MapReduc的程序的复杂性，由于MapReduce这种计算模型执行效率比较慢。所有Spark SQL的应运而生，它是将Spark SQL转换成RDD，然后提交到集群执行，执行效率非常快！</p><h3 id="Spark-SQL的特点"><a href="#Spark-SQL的特点" class="headerlink" title="Spark SQL的特点"></a>Spark SQL的特点</h3><p>1）易整合<br><img src="/cn/d275/clip_image001.png" alt="img"></p><p>2）统一的数据访问方式<br><img src="/cn/d275/clip_image002.png" alt="img"></p><p>3）兼容Hive<br><img src="/cn/d275/clip_image003.png" alt="img"></p><p>4）标准的数据连接<br><img src="/cn/d275/clip_image004.png" alt="img"></p><h3 id="什么是DataFrame"><a href="#什么是DataFrame" class="headerlink" title="什么是DataFrame"></a>什么是DataFrame</h3><p>与RDD类似，DataFrame也是一个分布式数据容器。然而DataFrame更像传统数据库的二维表格，除了数据以外，还记录数据的结构信息，即schema。同时，与Hive类似，DataFrame也支持嵌套数据类型（struct、array和map）。从API易用性的角度上看，DataFrame API提供的是一套高层的关系操作，比函数式的RDD API要更加友好，门槛更低。<br><img src="/cn/d275/clip_image005.png" alt="img"></p><p>上图直观地体现了DataFrame和RDD的区别。左侧的RDD[Person]虽然以Person为类型参数，但Spark框架本身不了解Person类的内部结构。而右侧的DataFrame却提供了详细的结构信息，使得Spark SQL可以清楚地知道该数据集中包含哪些列，每列的名称和类型各是什么。DataFrame是为数据提供了Schema的视图。可以把它当做数据库中的一张表来对待，DataFrame也是懒执行的。性能上比RDD要高，主要原因：</p><p>优化的执行计划：查询计划通过Spark catalyst optimiser进行优化。<br><img src="/cn/d275/clip_image006.png" alt="img"></p><p>比如下面一个例子：</p><p><img src="/cn/d275/clip_image007.png" alt="img"><br><img src="/cn/d275/clip_image008.png" alt="img"></p><p>为了说明查询优化，我们来看上图展示的人口数据分析的示例。图中构造了两个DataFrame，将它们join之后又做了一次filter操作。如果原封不动地执行这个执行计划，最终的执行效率是不高的。因为join是一个代价较大的操作，也可能会产生一个较大的数据集。如果我们能将filter下推到 join下方，先对DataFrame进行过滤，再join过滤后的较小的结果集，便可以有效缩短执行时间。而Spark SQL的查询优化器正是这样做的。简而言之，逻辑查询计划优化就是一个利用基于关系代数的等价变换，将高成本的操作替换为低成本操作的过程。</p><h3 id="什么是DataSet"><a href="#什么是DataSet" class="headerlink" title="什么是DataSet"></a>什么是DataSet</h3><p>1）是Dataframe API的一个扩展，是Spark最新的数据抽象。<br>2）用户友好的API风格，既具有类型安全检查也具有Dataframe的查询优化特性。<br>3）Dataset支持编解码器，当需要访问非堆上的数据时可以避免反序列化整个对象，提高了效率。<br>4）样例类被用来在Dataset中定义数据的结构信息，样例类中每个属性的名称直接映射到DataSet中的字段名称。<br>5） Dataframe是Dataset的特列，DataFrame=Dataset[Row] ，所以可以通过as方法将Dataframe转换为Dataset。Row是一个类型，跟Car、Person这些的类型一样，所有的表结构信息我都用Row来表示。<br>6）DataSet是强类型的。比如可以有Dataset[Car]，Dataset[Person].<br>7）DataFrame只是知道字段，但是不知道字段的类型，所以在执行这些操作的时候是没办法在编译的时候检查是否类型失败的，比如你可以对一个String进行减法操作，在执行的时候才报错，而DataSet不仅仅知道字段，而且知道字段类型，所以有更严格的错误检查。就跟JSON对象和类对象之间的类比。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是Spark-SQL&quot;&gt;&lt;a href=&quot;#什么是Spark-SQL&quot; class=&quot;headerlink&quot; title=&quot;什么是Spark SQL&quot;&gt;&lt;/a&gt;什么是Spark SQL&lt;/h2&gt;&lt;p&gt;Spark SQL是Spark用来处理结构化数据的一个模块，
      
    
    </summary>
    
      <category term="Spark" scheme="https://mapan.tech/cn/categories/Spark/"/>
    
    
  </entry>
  
</feed>
