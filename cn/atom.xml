<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>马攀的技术栈</title>
  
  
  <link href="/cn/atom.xml" rel="self"/>
  
  <link href="https://mapan.tech/cn/"/>
  <updated>2020-03-22T03:12:13.896Z</updated>
  <id>https://mapan.tech/cn/</id>
  
  <author>
    <name>MaPan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hive的UDF函数</title>
    <link href="https://mapan.tech/cn/d960.html"/>
    <id>https://mapan.tech/cn/d960.html</id>
    <published>2020-03-21T14:36:35.000Z</published>
    <updated>2020-03-22T03:12:13.896Z</updated>
    
    <content type="html"><![CDATA[<p>Hive中给了很多系统函数，<a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF" target="_blank">官网</a> 给了很多函数可以参考。但是复杂的业务中，官方函数并不一定能满足特定化的需求，这时可以自定义函数来满足需求。</p><p>参考：官网中的关于UDF部分的<a href="https://cwiki.apache.org/confluence/display/Hive/HivePlugins" target="_blank">链接</a></p><h3 id="1-在IDEA中创建一个项目，配置pom-xml-添加依赖如下："><a href="#1-在IDEA中创建一个项目，配置pom-xml-添加依赖如下：" class="headerlink" title="1.  在IDEA中创建一个项目，配置pom.xml 添加依赖如下："></a>1. 在IDEA中创建一个项目，配置pom.xml 添加依赖如下：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hive<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hive-exec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-创建一个类，例如创建一个把字符串全部转换为小写的UDF"><a href="#2-创建一个类，例如创建一个把字符串全部转换为小写的UDF" class="headerlink" title="2. 创建一个类，例如创建一个把字符串全部转换为小写的UDF"></a>2. 创建一个类，例如创建一个把字符串全部转换为小写的UDF</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> tech.mapan.hive;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hive.ql.exec.UDF;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: UDF</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: UDF函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: MaPan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-03-22 09:13</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Lower</span> <span class="keyword">extends</span> <span class="title">UDF</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">evaluate</span> <span class="params">(String s)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.toLowerCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-打jar包，把jar包放在-opt-local-hive-lib"><a href="#3-打jar包，把jar包放在-opt-local-hive-lib" class="headerlink" title="3. 打jar包，把jar包放在 /opt/local/hive/lib"></a>3. 打jar包，把jar包放在 /opt/local/hive/lib</h3><p>这一步就不在赘述，默认大家都会</p><h3 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4. 配置环境变量"></a>4. 配置环境变量</h3><p>CDH<a href="https://docs.cloudera.com/documentation/enterprise/latest/topics/cm_mc_hive_udf.html#hive-aux-jars-dir" target="_blank">官网</a>写的在hive-site.xml中配置<code>hive.aux.jars.path</code>，但是我配置完后并没有生效，不过官网写</p><blockquote><p>The directory location is set in the environment as <code>HIVE_AUX_JARS_PATH</code> and will generally override the <code>hive.aux.jars.path</code> property set in XML files, even if <code>hive.aux.jars.path</code> is set in an advanced configuration snippet.</p></blockquote><p>意思就是环境变量的优先级要高于XML，所以建议直接配置环境变量。</p><p>在root用户下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile.d/hive.sh </span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加如下内容并保存</span></span><br><span class="line">export HIVE_AUX_JARS_PATH=/opt/local/hive/lib</span><br><span class="line">export PATH=$PATH:$HIVE_AUX_JARS_PATH</span><br></pre></td></tr></table></figure><p>执行<code>source /etc/profile</code>刷新环境变量。</p><h3 id="5-进入hive-cli中，创建函数"><a href="#5-进入hive-cli中，创建函数" class="headerlink" title="5. 进入hive-cli中，创建函数"></a>5. 进入hive-cli中，创建函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; create <span class="keyword">function</span> mylower as <span class="string">"tech.mapan.hive.Lower"</span>;</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.285 seconds</span><br><span class="line"></span><br><span class="line">hive (default)&gt;  select mylower(<span class="string">"HELLO WORLD"</span>);</span><br><span class="line">OK</span><br><span class="line">_c0</span><br><span class="line">hello world</span><br><span class="line">Time taken: 0.18 seconds, Fetched: 1 row(s)</span><br></pre></td></tr></table></figure><p>这样就向系统添加了一个函数 mylower(), 退出hive-cli再次进入依然生效。</p><p>附：jar包<a href="d960/UDF-1.0-SNAPSHOT.jar" target="_blank">下载</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hive中给了很多系统函数，&lt;a href=&quot;https://cwiki.apache.org/confluence/display/Hive/LanguageManual+UDF&quot; target=&quot;_blank&quot;&gt;官网&lt;/a&gt; 给了很多函数可以参考。但是复杂的业务中，官方
      
    
    </summary>
    
      <category term="数据仓库" scheme="https://mapan.tech/cn/categories/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>HQL必会50题</title>
    <link href="https://mapan.tech/cn/b8f1.html"/>
    <id>https://mapan.tech/cn/b8f1.html</id>
    <published>2020-03-17T14:01:47.000Z</published>
    <updated>2020-03-21T14:14:22.345Z</updated>
    
    <content type="html"><![CDATA[<p>平常加班不多，为了提高自己的SQL能力，找了网上流传的比较广泛的SQL50题，先把题目拿过来，计划抽空作为练习用HiveSQL完成。</p><p>开始日期：2020-03-18</p><p>完成日期：2020-03-21</p><p>建表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(s_id <span class="keyword">string</span>,s_name <span class="keyword">string</span>,s_birth <span class="keyword">string</span>,s_sex <span class="keyword">string</span>) <span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> course(c_id <span class="keyword">string</span>,c_name <span class="keyword">string</span>,t_id <span class="keyword">string</span>) <span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher(t_id <span class="keyword">string</span>,t_name <span class="keyword">string</span>) <span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> score(s_id <span class="keyword">string</span>,c_id <span class="keyword">string</span>,s_score <span class="built_in">int</span>) <span class="keyword">row</span> <span class="keyword">format</span> <span class="keyword">delimited</span> <span class="keyword">fields</span> <span class="keyword">terminated</span> <span class="keyword">by</span> <span class="string">'\t'</span>;</span><br></pre></td></tr></table></figure><p>数据：</p><p><a href="https://mapan.tech/cn/b8f1/student.txt" target="_blank">student.txt</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">01赵雷1990-01-01男</span><br><span class="line">02钱电1990-12-21男</span><br><span class="line">03孙风1990-05-20男</span><br><span class="line">04李云1990-08-06男</span><br><span class="line">05周梅1991-12-01女</span><br><span class="line">06吴兰1992-03-01女</span><br><span class="line">07郑竹1989-07-01女</span><br><span class="line">08王菊1990-01-20女</span><br></pre></td></tr></table></figure><p><a href="https://mapan.tech/cn/b8f1/teacher.txt" target="_blank">teacher.txt</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">01张三</span><br><span class="line">02李四</span><br><span class="line">03王五</span><br></pre></td></tr></table></figure><p><a href="https://mapan.tech/cn/b8f1/course.txt" target="_blank">course.txt</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">01语文02</span><br><span class="line">02数学01</span><br><span class="line">03英语03</span><br></pre></td></tr></table></figure><p><a href="https://mapan.tech/cn/b8f1/score.txt" target="_blank">score.txt</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">010180</span><br><span class="line">010290</span><br><span class="line">010399</span><br><span class="line">020170</span><br><span class="line">020260</span><br><span class="line">020380</span><br><span class="line">030180</span><br><span class="line">030280</span><br><span class="line">030380</span><br><span class="line">040150</span><br><span class="line">040230</span><br><span class="line">040320</span><br><span class="line">050176</span><br><span class="line">050287</span><br><span class="line">060131</span><br><span class="line">060334</span><br><span class="line">070289</span><br><span class="line">070398</span><br></pre></td></tr></table></figure><p>加载数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'~/student.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'~/course.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> course;</span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'~/teacher.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> teacher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">load</span> <span class="keyword">data</span> <span class="keyword">local</span> inpath <span class="string">'~/score.txt'</span> <span class="keyword">into</span> <span class="keyword">table</span> score;</span><br></pre></td></tr></table></figure><p>表之间的关系如图：</p><p><img src="/cn/b8f1/Kinship.png" alt="表关系"></p><ul><li>1、查询”01”课程比”02”课程成绩高的学生的信息及课程分数:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    T0.*,</span><br><span class="line">    T1.s_score <span class="keyword">AS</span> c01,</span><br><span class="line">    T2.s_score <span class="keyword">as</span> c02</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    student <span class="keyword">AS</span> T0,</span><br><span class="line">    (<span class="keyword">SELECT</span> s_id,s_score <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_id=<span class="string">'01'</span>) <span class="keyword">AS</span> T1,</span><br><span class="line">    (<span class="keyword">SELECT</span> s_id,s_score <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_id=<span class="string">'02'</span>) <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">WHERE</span> T0.s_id=T1.s_id</span><br><span class="line"><span class="keyword">AND</span> T0.s_id=T2.s_id</span><br><span class="line"><span class="keyword">AND</span> T1.s_score&gt;T2.s_score;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/cn/b8f1/image-20200318221755774.png" alt="image-20200318221755774"></p><ul><li>2、查询同时存在” 01 “课程和” 02 “课程的情况:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    t3.*,</span><br><span class="line">    t1.s_score <span class="keyword">as</span> c01,</span><br><span class="line">    t2.s_score <span class="keyword">as</span> c02</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    (<span class="keyword">SELECT</span> s_id,s_score <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_id=<span class="string">'01'</span>) <span class="keyword">as</span> t1, <span class="comment">-- 选修01课程的同学</span></span><br><span class="line">    (<span class="keyword">SELECT</span> s_id,s_score <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_id=<span class="string">'02'</span>) <span class="keyword">as</span> t2, <span class="comment">-- 选修01课程的同学</span></span><br><span class="line">    student <span class="keyword">as</span> t3</span><br><span class="line"><span class="keyword">WHERE</span> t1.s_id=t2.s_id</span><br><span class="line"><span class="keyword">AND</span> t2.s_id=t3.s_id;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/cn/b8f1/image-20200318224041101.png" alt="image-20200318224041101"></p><ul><li>3、查询存在” 01 “课程但<strong>可能</strong>不存在” 02 “课程的情况(不存在时显示为 null )</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    t2.*,</span><br><span class="line">    t1.s_score <span class="keyword">AS</span> c01,</span><br><span class="line">    t3.s_score <span class="keyword">AS</span> c02 </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    (<span class="keyword">SELECT</span> s_id,s_score <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_id=<span class="string">'01'</span>) <span class="keyword">AS</span> t1, <span class="comment">-- 选修01课程的同学</span></span><br><span class="line">    student <span class="keyword">AS</span> t2</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> s_id,s_score <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_id=<span class="string">'02'</span>) <span class="keyword">AS</span> t3 <span class="comment">-- 选修01课程的同学</span></span><br><span class="line"><span class="keyword">ON</span> t2.s_id = t3.s_id</span><br><span class="line"><span class="keyword">WHERE</span> t1.s_id=t2.s_id;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="/cn/b8f1/image-20200318225024279.png" alt="image-20200318225024279"></p><ul><li>4、查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩:<br>(包括有成绩的和无成绩的)</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.s_id,</span><br><span class="line">    T1.s_name,</span><br><span class="line">    T2.avg_sc</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">JOIN</span>(<span class="keyword">SELECT</span></span><br><span class="line">        s_id,</span><br><span class="line">        <span class="keyword">avg</span>(s_score) <span class="keyword">AS</span> avg_sc </span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line">    <span class="keyword">having</span> avg_sc&lt;<span class="number">60</span>) <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">ON</span> T1.s_id=T2.s_id;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/cn/b8f1/image-20200318225822830.png" alt="image-20200318225822830"></p><ul><li>5、查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.s_id,</span><br><span class="line">    T1.s_name,</span><br><span class="line">    T2.co_cnt,</span><br><span class="line">    T3.sum_score</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> s_id,<span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">AS</span> co_cnt <span class="keyword">FROM</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id) <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">ON</span> T1.s_id=T2.s_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> s_id,<span class="keyword">sum</span>(s_score) <span class="keyword">AS</span> sum_score <span class="keyword">FROM</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id) <span class="keyword">AS</span> T3</span><br><span class="line"><span class="keyword">ON</span> T1.s_id=T3.s_id;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/cn/b8f1/image-20200318231242423.png" alt="image-20200318231242423"></p><ul><li>6、查询”李”姓老师的数量:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> teacher <span class="keyword">WHERE</span> t_name <span class="keyword">LIKE</span> <span class="string">"李%"</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200319073738350.png" alt="image-20200319073738350"></p><ul><li>7、查询学过”张三”老师授课的同学的信息:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    T1.*,</span><br><span class="line">    T3.c_name,</span><br><span class="line">    T4.t_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    student <span class="keyword">AS</span> T1,</span><br><span class="line">    score <span class="keyword">AS</span> T2,</span><br><span class="line">    course <span class="keyword">AS</span> T3,</span><br><span class="line">    teacher <span class="keyword">AS</span> T4</span><br><span class="line"><span class="keyword">WHERE</span> T1.s_id=T2.s_id</span><br><span class="line"><span class="keyword">AND</span> T2.c_id=T3.c_id</span><br><span class="line"><span class="keyword">AND</span> T3.t_id=T4.t_id</span><br><span class="line"><span class="keyword">AND</span> T4.t_name=<span class="string">"张三"</span>;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/cn/b8f1/image-20200319074432715.png" alt="image-20200319074432715"></p><ul><li>8、查询没学过”张三”老师授课的同学的信息:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A1.* <span class="keyword">FROM</span> student <span class="keyword">AS</span> A1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span>(<span class="keyword">SELECT</span> </span><br><span class="line">                T1.s_id</span><br><span class="line">            <span class="keyword">FROM</span></span><br><span class="line">                student <span class="keyword">AS</span> T1,</span><br><span class="line">                score <span class="keyword">AS</span> T2,</span><br><span class="line">                course <span class="keyword">AS</span> T3,</span><br><span class="line">                teacher <span class="keyword">AS</span> T4</span><br><span class="line">            <span class="keyword">WHERE</span> T1.s_id=T2.s_id</span><br><span class="line">            <span class="keyword">AND</span> T2.c_id=T3.c_id</span><br><span class="line">            <span class="keyword">AND</span> T3.t_id=T4.t_id</span><br><span class="line">            <span class="keyword">AND</span> T4.t_name=<span class="string">"张三"</span>) <span class="keyword">AS</span> A2</span><br><span class="line"><span class="keyword">ON</span> A1.s_id=A2.s_id</span><br><span class="line"><span class="keyword">WHERE</span> A2.s_id <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/cn/b8f1/image-20200319075846289.png" alt="image-20200319075846289"></p><ul><li>9、查询学过编号为”01”并且也学过编号为”02”的课程的同学的信息:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.* </span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> A</span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span></span><br><span class="line">            T1.s_id</span><br><span class="line">        <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> s_id <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_id=<span class="string">'01'</span>) <span class="keyword">AS</span> T1</span><br><span class="line">        <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> s_id <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_id=<span class="string">'02'</span>) <span class="keyword">AS</span> T2</span><br><span class="line">        <span class="keyword">ON</span> T1.s_id=T2.s_id) <span class="keyword">AS</span> B</span><br><span class="line"><span class="keyword">ON</span> A.s_id=B.s_id;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/cn/b8f1/image-20200319080655329.png" alt="image-20200319080655329"></p><ul><li>10、查询学过编号为”01”但是没有学过编号为”02”的课程的同学的信息:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.* </span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> A</span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span></span><br><span class="line">            T1.s_id</span><br><span class="line">        <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> s_id <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_id=<span class="string">'01'</span>) <span class="keyword">AS</span> T1</span><br><span class="line">        <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> s_id <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> c_id=<span class="string">'02'</span>) <span class="keyword">AS</span> T2</span><br><span class="line">        <span class="keyword">ON</span> T1.s_id=T2.s_id</span><br><span class="line">        <span class="keyword">WHERE</span> T2.s_id <span class="keyword">IS</span> <span class="literal">NULL</span>) <span class="keyword">AS</span> B</span><br><span class="line"><span class="keyword">ON</span> A.s_id=B.s_id;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/cn/b8f1/image-20200319080957865.png" alt="image-20200319080957865"></p><ul><li>11、查询没有学全所有课程的同学的信息:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.*,</span><br><span class="line">    T2.CNT_C</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> s_id,<span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">AS</span> CNT_C <span class="keyword">FROM</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id) <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">ON</span> T1.s_id=T2.s_id</span><br><span class="line"><span class="keyword">WHERE</span> T2.CNT_C&lt;<span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200319221856619.png" alt="image-20200319221856619"></p><ul><li>12、查询至少有一门课与学号为”01”的同学所学相同的同学的信息:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    t3.*,</span><br><span class="line">    t4.cnt </span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> t3 </span><br><span class="line"><span class="keyword">JOIN</span>(</span><br><span class="line">    <span class="keyword">SELECT</span> s_id,</span><br><span class="line">    <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">AS</span> cnt </span><br><span class="line">    <span class="keyword">FROM</span> score <span class="keyword">AS</span> t1 </span><br><span class="line">    <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> c_id </span><br><span class="line">          <span class="keyword">FROM</span> score</span><br><span class="line">          <span class="keyword">WHERE</span> s_id =<span class="string">"01"</span>) <span class="keyword">AS</span> t2 </span><br><span class="line">    <span class="keyword">ON</span> t1.c_id = t2.c_id </span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id </span><br><span class="line">    <span class="keyword">HAVING</span> cnt&gt;<span class="number">0</span>) <span class="keyword">AS</span> t4 </span><br><span class="line"><span class="keyword">ON</span> t3.s_id=t4.s_id;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200319223531461.png" alt="image-20200319223531461"></p><ul><li>13、查询和”01”号的同学学习的课程完全相同的其他同学的信息:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    A1.*,</span><br><span class="line">    A2.CNT_C</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> A1</span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> T1.s_id,<span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">AS</span> CNT_C</span><br><span class="line">        <span class="keyword">FROM</span> score <span class="keyword">AS</span> T1</span><br><span class="line">        <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> c_id <span class="keyword">FROM</span> score <span class="keyword">WHERE</span> s_id=<span class="string">'01'</span>) <span class="keyword">AS</span> T2</span><br><span class="line">        <span class="keyword">ON</span> T1.c_id=T2.c_id</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> T1.s_id) <span class="keyword">AS</span> A2</span><br><span class="line"><span class="keyword">ON</span> A1.s_id=A2.s_id</span><br><span class="line"><span class="keyword">AND</span> A1.S_id&lt;&gt;<span class="string">'01'</span></span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">AS</span> CNT_C <span class="keyword">FROM</span> score <span class="keyword">where</span> s_id=<span class="string">'01'</span>) <span class="keyword">AS</span> A3</span><br><span class="line"><span class="keyword">ON</span> A2.CNT_C=A3.CNT_C;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200319230518263.png" alt="image-20200319230518263"></p><ul><li>14、查询没学过”张三”老师讲授的任一门课程的学生姓名:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> S1.s_name </span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> S1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span></span><br><span class="line">                A1.s_id</span><br><span class="line">            <span class="keyword">FROM</span> score <span class="keyword">AS</span> A1</span><br><span class="line">            <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> T2.c_id </span><br><span class="line">                    <span class="keyword">FROM</span> teacher <span class="keyword">AS</span> T1 </span><br><span class="line">                    <span class="keyword">JOIN</span> course <span class="keyword">AS</span> T2</span><br><span class="line">                    <span class="keyword">ON</span> T1.t_id=T2.t_id</span><br><span class="line">                    <span class="keyword">WHERE</span> T1.t_name=<span class="string">'张三'</span>) <span class="keyword">AS</span> A2</span><br><span class="line">            <span class="keyword">ON</span> A1.c_id=A2.c_id</span><br><span class="line">            <span class="keyword">GROUP</span> <span class="keyword">BY</span> A1.s_id) <span class="keyword">AS</span> S2</span><br><span class="line"><span class="keyword">ON</span> S1.s_id=S2.s_id</span><br><span class="line"><span class="keyword">WHERE</span> S2.s_id <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200319232211741.png" alt="image-20200319232211741"></p><ul><li>15、查询两门及其以上不及格课程的同学的学号，姓名及其平均成绩:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.s_id,</span><br><span class="line">    T1.s_name,</span><br><span class="line">    T3.AVG_C</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span></span><br><span class="line">        s_id,</span><br><span class="line">        <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">AS</span> CNT_C</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">WHERE</span> s_score&lt;<span class="number">60</span></span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line">    <span class="keyword">having</span> CNT_C&gt;=<span class="number">2</span>) <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">ON</span> T1.s_id=T2.s_id</span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span></span><br><span class="line">            s_id,</span><br><span class="line">            <span class="keyword">AVG</span>(s_score) <span class="keyword">AS</span> AVG_C</span><br><span class="line">        <span class="keyword">FROM</span> score</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id) <span class="keyword">AS</span> T3</span><br><span class="line"><span class="keyword">ON</span> T1.s_id=T3.s_id;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200320080055175.png" alt="image-20200320080055175"></p><ul><li>16、检索”01”课程分数小于60，按分数降序排列的学生信息:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.*,</span><br><span class="line">    T2.s_score</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">JOIN</span> (<span class="keyword">SELECT</span></span><br><span class="line">            s_id,</span><br><span class="line">            s_score</span><br><span class="line">        <span class="keyword">FROM</span> score</span><br><span class="line">        <span class="keyword">WHERE</span> c_id=<span class="string">'01'</span></span><br><span class="line">        <span class="keyword">AND</span> s_score&lt;<span class="number">60</span>) <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">ON</span> T1.S_id=T2.s_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> T2.s_score <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/cn/b8f1/image-20200320080551819.png" alt="image-20200320080551819"></p><ul><li>17、按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩:</li></ul><p>尝试用WITH的写法，相对常规写法逻辑还是比较清晰的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> T1 <span class="keyword">AS</span> (</span><br><span class="line"><span class="comment">-- 平均分</span></span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        s_id,</span><br><span class="line">        <span class="keyword">AVG</span>(s_score) <span class="keyword">AS</span> AVG_S</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line">), T2 <span class="keyword">AS</span>(</span><br><span class="line"><span class="comment">-- 语文分数</span></span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        s_id,</span><br><span class="line">        s_score</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">WHERE</span> c_id=<span class="string">'01'</span></span><br><span class="line">)</span><br><span class="line">, T3 <span class="keyword">AS</span>(</span><br><span class="line"><span class="comment">-- 数学分数</span></span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        s_id,</span><br><span class="line">        s_score</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">WHERE</span> c_id=<span class="string">'02'</span></span><br><span class="line">), T4 <span class="keyword">AS</span>(</span><br><span class="line"><span class="comment">-- 英语分数</span></span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        s_id,</span><br><span class="line">        s_score</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">WHERE</span> c_id=<span class="string">'03'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T0.s_id,</span><br><span class="line">    T0.s_name,</span><br><span class="line">    (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> T1.AVG_S <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">THEN</span> <span class="string">'0'</span> <span class="keyword">ELSE</span> <span class="keyword">round</span>(T1.AVG_S,<span class="number">2</span>) <span class="keyword">END</span>) <span class="keyword">AS</span> AVG_S,</span><br><span class="line">    (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> T2.s_score <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">THEN</span> <span class="string">'0'</span> <span class="keyword">ELSE</span> T2.s_score <span class="keyword">END</span>) <span class="keyword">AS</span> CHINESE,</span><br><span class="line">    (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> T3.s_score <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">THEN</span> <span class="string">'0'</span> <span class="keyword">ELSE</span> T3.s_score <span class="keyword">END</span>) <span class="keyword">AS</span> MATH,</span><br><span class="line">    (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> T4.s_score <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">THEN</span> <span class="string">'0'</span> <span class="keyword">ELSE</span> T4.s_score <span class="keyword">END</span>) <span class="keyword">AS</span> ENGLISH</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> T0</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> T1</span><br><span class="line"><span class="keyword">ON</span> T1.s_id=T0.s_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> T2</span><br><span class="line"><span class="keyword">ON</span> T2.s_id=T0.s_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> T3</span><br><span class="line"><span class="keyword">ON</span> T3.s_id=T0.s_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> T4</span><br><span class="line"><span class="keyword">ON</span> T4.s_id=T0.s_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> AVG_S <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321105038801.png" alt="image-20200321105038801"></p><ul><li>18.查询各科成绩最高分、最低分和平均分：以如下形式显示：课程ID，课程name，最高分， ，平均分，及格率，中等率，优良率，优秀率: （及格为&gt;=60，中等为：70-80，优良为：80-90，优秀为：&gt;=90）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> A1 <span class="keyword">AS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        c_id,</span><br><span class="line">        <span class="keyword">MAX</span>(s_score) <span class="keyword">AS</span> max_c,</span><br><span class="line">        <span class="keyword">MIN</span>(s_score) <span class="keyword">AS</span> min_c,</span><br><span class="line">        <span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(s_score),<span class="number">2</span>)  <span class="keyword">AS</span> avg_c,</span><br><span class="line">        <span class="keyword">ROUND</span>(<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score&gt;=<span class="number">60</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)/<span class="keyword">count</span>(s_score),<span class="number">2</span>) <span class="keyword">AS</span> L1,</span><br><span class="line">        <span class="keyword">ROUND</span>(<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score <span class="keyword">BETWEEN</span> <span class="number">70</span> <span class="keyword">AND</span> <span class="number">79</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)/<span class="keyword">count</span>(s_score),<span class="number">2</span>)  <span class="keyword">AS</span> L2,</span><br><span class="line">        <span class="keyword">ROUND</span>(<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score <span class="keyword">BETWEEN</span> <span class="number">80</span> <span class="keyword">AND</span> <span class="number">89</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)/<span class="keyword">count</span>(s_score),<span class="number">2</span>)  <span class="keyword">AS</span> L3,</span><br><span class="line">        <span class="keyword">ROUND</span>(<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score&gt;=<span class="number">90</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)/<span class="keyword">count</span>(s_score),<span class="number">2</span>)  <span class="keyword">AS</span> L4</span><br><span class="line">    <span class="keyword">FROM</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    A0.c_id,</span><br><span class="line">    A0.c_name,</span><br><span class="line">    A1.max_c,</span><br><span class="line">    A1.min_c,</span><br><span class="line">    A1.avg_c,</span><br><span class="line">    A1.L1,</span><br><span class="line">    A1.L2,</span><br><span class="line">    A1.L3,</span><br><span class="line">    A1.L4</span><br><span class="line"><span class="keyword">FROM</span> course <span class="keyword">AS</span> A0</span><br><span class="line"><span class="keyword">JOIN</span> A1</span><br><span class="line"><span class="keyword">ON</span> A0.c_id=A1.c_id;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321153421319.png" alt="image-20200321153421319"></p><ul><li>19、按各科成绩进行排序，并显示排名:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    T1.s_id,</span><br><span class="line">    T3.s_name,</span><br><span class="line">    T1.c_id,</span><br><span class="line">    T2.c_name,</span><br><span class="line">    T1.s_score,</span><br><span class="line">    RANK() OVER (PARTITION BY T1.c_id ORDER BY T1.s_score DESC)</span><br><span class="line">FROM score AS T1</span><br><span class="line">JOIN course AS T2</span><br><span class="line">ON T1.c_id=T2.c_id</span><br><span class="line">JOIN student AS T3</span><br><span class="line">ON T1.s_id=T3.s_id;</span><br></pre></td></tr></table></figure><ul><li>20、查询学生的总成绩并进行排名:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.s_id,</span><br><span class="line">    T3.s_name,</span><br><span class="line">    <span class="keyword">sum</span>(T1.s_score) <span class="keyword">AS</span> SUM_C,</span><br><span class="line">    <span class="keyword">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">sum</span>(T1.s_score) <span class="keyword">DESC</span>)</span><br><span class="line"><span class="keyword">FROM</span> score <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">JOIN</span> student <span class="keyword">AS</span> T3</span><br><span class="line"><span class="keyword">ON</span> T1.s_id=T3.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> T1.s_id,T3.s_name;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/cn/b8f1/image-20200321181506578.png" alt="image-20200321181506578"></p><ul><li>21、查询不同老师所教不同课程平均分从高到低显示:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.c_id,</span><br><span class="line">    T3.t_name,</span><br><span class="line">    <span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(T1.s_score),<span class="number">2</span>),</span><br><span class="line">    <span class="keyword">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">AVG</span>(T1.s_score) <span class="keyword">DESC</span>)</span><br><span class="line"><span class="keyword">FROM</span> score <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">JOIN</span> course <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">ON</span> T1.c_id=T2.c_id</span><br><span class="line"><span class="keyword">JOIN</span> teacher <span class="keyword">AS</span> T3</span><br><span class="line"><span class="keyword">ON</span> T2.t_id=T3.t_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> T1.c_id,T3.t_name;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/cn/b8f1/image-20200321181609080.png" alt="image-20200321181609080"></p><ul><li>22、查询所有课程的成绩第2名到第3名的学生信息及该课程成绩:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> A1 <span class="keyword">AS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        T1.s_id,</span><br><span class="line">        T3.s_name,</span><br><span class="line">        T1.c_id,</span><br><span class="line">        T2.c_name,</span><br><span class="line">        T1.s_score,</span><br><span class="line">        <span class="keyword">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> T1.c_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> T1.s_score <span class="keyword">DESC</span>) <span class="keyword">AS</span> rk</span><br><span class="line">    <span class="keyword">FROM</span> score <span class="keyword">AS</span> T1</span><br><span class="line">    <span class="keyword">JOIN</span> course <span class="keyword">AS</span> T2</span><br><span class="line">    <span class="keyword">ON</span> T1.c_id=T2.c_id</span><br><span class="line">    <span class="keyword">JOIN</span> student <span class="keyword">AS</span> T3</span><br><span class="line">    <span class="keyword">ON</span> T1.s_id=T3.s_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> A1.*</span><br><span class="line"><span class="keyword">FROM</span> A1</span><br><span class="line"><span class="keyword">WHERE</span> A1.rk=<span class="number">2</span> <span class="keyword">OR</span> A1.rk=<span class="number">3</span>;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/cn/b8f1/image-20200321181701546.png" alt="image-20200321181701546"></p><ul><li>23、统计各科成绩各分数段人数：课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> A1 <span class="keyword">AS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        c_id,</span><br><span class="line">        <span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score <span class="keyword">BETWEEN</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">59</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> L0, <span class="comment">-- [0-59分的人数]</span></span><br><span class="line">        <span class="keyword">ROUND</span>(<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score <span class="keyword">BETWEEN</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">59</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)/<span class="keyword">COUNT</span>(<span class="number">1</span>),<span class="number">2</span>) <span class="keyword">AS</span> H0, <span class="comment">-- [0-59分的人数占比]</span></span><br><span class="line">        <span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score <span class="keyword">BETWEEN</span> <span class="number">60</span> <span class="keyword">AND</span> <span class="number">70</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> L1, <span class="comment">-- [60-69分的人数]</span></span><br><span class="line">        <span class="keyword">ROUND</span>(<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score <span class="keyword">BETWEEN</span> <span class="number">60</span> <span class="keyword">AND</span> <span class="number">69</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)/<span class="keyword">COUNT</span>(<span class="number">1</span>),<span class="number">2</span>) <span class="keyword">AS</span> H1, <span class="comment">-- [60-69分的人数占比]</span></span><br><span class="line">        <span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score <span class="keyword">BETWEEN</span> <span class="number">70</span> <span class="keyword">AND</span> <span class="number">85</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)  <span class="keyword">AS</span> L2, <span class="comment">-- [70-85分的人数]</span></span><br><span class="line">        <span class="keyword">ROUND</span>(<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score <span class="keyword">BETWEEN</span> <span class="number">70</span> <span class="keyword">AND</span> <span class="number">85</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)/<span class="keyword">COUNT</span>(<span class="number">1</span>),<span class="number">2</span>) <span class="keyword">AS</span> H2, <span class="comment">-- [70-85分的人数占比]</span></span><br><span class="line">        <span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score <span class="keyword">BETWEEN</span> <span class="number">86</span> <span class="keyword">AND</span> <span class="number">100</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)  <span class="keyword">AS</span> L3, <span class="comment">-- [86-100分的人数]</span></span><br><span class="line">        <span class="keyword">ROUND</span>(<span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> s_score <span class="keyword">BETWEEN</span> <span class="number">86</span> <span class="keyword">AND</span> <span class="number">100</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>)/<span class="keyword">COUNT</span>(<span class="number">1</span>),<span class="number">2</span>) <span class="keyword">AS</span> H3 <span class="comment">-- [86-100分的人数占比]</span></span><br><span class="line">    <span class="keyword">FROM</span> score <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    A0.c_id,</span><br><span class="line">    A0.c_name,</span><br><span class="line">    A1.L3,</span><br><span class="line">    A1.H3,</span><br><span class="line">    A1.L2,</span><br><span class="line">    A1.H2,</span><br><span class="line">    A1.L1,</span><br><span class="line">    A1.H1,</span><br><span class="line">    A1.L0,</span><br><span class="line">    A1.H0</span><br><span class="line"><span class="keyword">FROM</span> course <span class="keyword">AS</span> A0</span><br><span class="line"><span class="keyword">JOIN</span> A1</span><br><span class="line"><span class="keyword">ON</span> A0.c_id=A1.c_id;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/cn/b8f1/image-20200321181822411.png" alt="image-20200321181822411"></p><ul><li>24、查询学生平均成绩及其名次:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.s_id,</span><br><span class="line">    T3.s_name,</span><br><span class="line">    <span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(T1.s_score),<span class="number">2</span>) <span class="keyword">AS</span> AVG_C,</span><br><span class="line">    <span class="keyword">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">sum</span>(T1.s_score) <span class="keyword">DESC</span>)</span><br><span class="line"><span class="keyword">FROM</span> score <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">JOIN</span> student <span class="keyword">AS</span> T3</span><br><span class="line"><span class="keyword">ON</span> T1.s_id=T3.s_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> T1.s_id,T3.s_name;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321181938010.png" alt="image-20200321181938010"></p><ul><li>25、查询各科成绩前三名的记录<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> A1 <span class="keyword">AS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        T1.s_id,</span><br><span class="line">        T3.s_name,</span><br><span class="line">        T1.c_id,</span><br><span class="line">        T2.c_name,</span><br><span class="line">        T1.s_score,</span><br><span class="line">        <span class="keyword">RANK</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> T1.c_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> T1.s_score <span class="keyword">DESC</span>) <span class="keyword">AS</span> rk</span><br><span class="line">    <span class="keyword">FROM</span> score <span class="keyword">AS</span> T1</span><br><span class="line">    <span class="keyword">JOIN</span> course <span class="keyword">AS</span> T2</span><br><span class="line">    <span class="keyword">ON</span> T1.c_id=T2.c_id</span><br><span class="line">    <span class="keyword">JOIN</span> student <span class="keyword">AS</span> T3</span><br><span class="line">    <span class="keyword">ON</span> T1.s_id=T3.s_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> A1.*</span><br><span class="line"><span class="keyword">FROM</span> A1</span><br><span class="line"><span class="keyword">WHERE</span> A1.rk&lt;=<span class="number">3</span>;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/cn/b8f1/image-20200321182026689.png" alt="image-20200321182026689"></p><ul><li>26、查询每门课程被选修的学生数:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.c_id,</span><br><span class="line">    T2.c_name,</span><br><span class="line">    <span class="keyword">COUNT</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">FROM</span> score <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">JOIN</span> course <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">ON</span> T1.c_id=T2.c_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> T1.c_id,T2.c_name</span><br></pre></td></tr></table></figure></li></ul><p><img src="/cn/b8f1/image-20200321182103466.png" alt="image-20200321182103466"></p><ul><li>27、查询出只有两门课程的全部学生的学号和姓名:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> A1 <span class="keyword">AS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        T1.s_id,</span><br><span class="line">        <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">AS</span> CNT</span><br><span class="line">    <span class="keyword">FROM</span> score <span class="keyword">AS</span> T1</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> T1.s_id</span><br><span class="line">    <span class="keyword">HAVING</span> CNT=<span class="number">2</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    A2.s_id,</span><br><span class="line">    A2.s_name,</span><br><span class="line">    A1.CNT</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> A2</span><br><span class="line"><span class="keyword">JOIN</span> A1 </span><br><span class="line"><span class="keyword">ON</span> A1.s_id=A2.s_id;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/cn/b8f1/image-20200321182151875.png" alt="image-20200321182151875"></p><ul><li>28、查询男生、女生人数:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.s_sex,</span><br><span class="line">    <span class="keyword">COUNT</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_sex;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/cn/b8f1/image-20200321182221250.png" alt="image-20200321182221250"></p><ul><li>29、查询名字中含有”风”字的学生信息:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.*</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">WHERE</span> T1.s_name <span class="keyword">LIKE</span> <span class="string">"%风%"</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="/cn/b8f1/image-20200321182246186.png" alt="image-20200321182246186"></p><ul><li>30、查询同名同性学生名单，并统计同名人数:</li></ul><p>数据中发现没有同名同性的学生，先插入几条</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span></span><br><span class="line">(<span class="string">'09'</span> , <span class="string">'张三'</span> , <span class="string">'2017-12-20'</span> , <span class="string">'女'</span>),</span><br><span class="line">(<span class="string">'10'</span> , <span class="string">'李四'</span> , <span class="string">'2017-12-25'</span> , <span class="string">'女'</span>),</span><br><span class="line">(<span class="string">'11'</span> , <span class="string">'李四'</span> , <span class="string">'2012-06-06'</span> , <span class="string">'女'</span>),</span><br><span class="line">(<span class="string">'12'</span> , <span class="string">'赵六'</span> , <span class="string">'2013-06-13'</span> , <span class="string">'女'</span>),</span><br><span class="line">(<span class="string">'13'</span> , <span class="string">'孙七'</span> , <span class="string">'2014-06-01'</span> , <span class="string">'女'</span>);</span><br></pre></td></tr></table></figure><p>然后找同名同性的学生</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s_name,</span><br><span class="line">    s_sex,</span><br><span class="line">    <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">AS</span> CNT_N</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_name,s_sex</span><br><span class="line"><span class="keyword">HAVING</span> CNT_N&gt;<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321182748601.png" alt="image-20200321182748601"></p><ul><li>31、查询1990年出生的学生名单:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> s_birth <span class="keyword">BETWEEN</span> <span class="string">'1990-01-01'</span> <span class="keyword">AND</span> <span class="string">'1990-12-31'</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321182943315.png" alt="image-20200321182943315"></p><ul><li>32、查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> T1 <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        c_id,</span><br><span class="line">        <span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(s_score),<span class="number">2</span>) <span class="keyword">AS</span> AVG_C</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.c_id,</span><br><span class="line">    T0.c_name,</span><br><span class="line">    T1.AVG_C</span><br><span class="line"><span class="keyword">FROM</span> course <span class="keyword">AS</span> T0</span><br><span class="line"><span class="keyword">JOIN</span> T1</span><br><span class="line"><span class="keyword">ON</span> T0.c_id=T1.c_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> T1.AVG_C <span class="keyword">DESC</span>,T1.c_id;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321183807915.png" alt="image-20200321183807915"></p><ul><li>33、查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> T1 <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        s_id,</span><br><span class="line">        <span class="keyword">AVG</span>(s_score) <span class="keyword">AS</span> AVG_S</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line">    <span class="keyword">HAVING</span> AVG_S&gt;=<span class="number">85</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T0.s_id,</span><br><span class="line">    T0.s_name,</span><br><span class="line">    T1.AVG_S</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">as</span> T0</span><br><span class="line"><span class="keyword">JOIN</span> T1</span><br><span class="line"><span class="keyword">ON</span> T0.s_id=T1.s_id;</span><br></pre></td></tr></table></figure><ul><li>34、查询课程名称为”数学”，且分数低于60的学生姓名和分数:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> T1 <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        s_id,</span><br><span class="line">        <span class="keyword">AVG</span>(s_score) <span class="keyword">AS</span> AVG_S</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line">    <span class="keyword">HAVING</span> AVG_S&gt;=<span class="number">85</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T0.s_id,</span><br><span class="line">    T0.s_name,</span><br><span class="line">    <span class="keyword">ROUND</span>(T1.AVG_S,<span class="number">2</span>) <span class="keyword">AS</span> AVG_S</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">as</span> T0</span><br><span class="line"><span class="keyword">JOIN</span> T1</span><br><span class="line"><span class="keyword">ON</span> T0.s_id=T1.s_id;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321194621260.png" alt="image-20200321194621260"></p><ul><li>35、查询所有学生的课程及分数情况:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> T1 <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        s_id,</span><br><span class="line">        s_score</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">WHERE</span> c_id=<span class="string">'01'</span></span><br><span class="line">), T2 <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        s_id,</span><br><span class="line">        s_score</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">WHERE</span> c_id=<span class="string">'02'</span></span><br><span class="line">), T3 <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> </span><br><span class="line">        s_id,</span><br><span class="line">        s_score</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">WHERE</span> c_id=<span class="string">'03'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T0.s_id,</span><br><span class="line">    T0.s_name,</span><br><span class="line">    (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> T1.s_score <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">THEN</span> <span class="string">"未选修"</span> <span class="keyword">ELSE</span> T1.s_score <span class="keyword">END</span>) <span class="keyword">AS</span> CHINESE,</span><br><span class="line">    (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> T2.s_score <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">THEN</span> <span class="string">"未选修"</span> <span class="keyword">ELSE</span> T2.s_score <span class="keyword">END</span>) <span class="keyword">AS</span> MATH,</span><br><span class="line">    (<span class="keyword">CASE</span> <span class="keyword">WHEN</span> T3.s_score <span class="keyword">IS</span> <span class="literal">NULL</span> <span class="keyword">THEN</span> <span class="string">"未选修"</span> <span class="keyword">ELSE</span> T3.s_score <span class="keyword">END</span>) <span class="keyword">AS</span> ENGLISH</span><br><span class="line"><span class="keyword">FROM</span> student <span class="keyword">AS</span> T0</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> T1</span><br><span class="line"><span class="keyword">ON</span> T0.s_id=T1.s_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> T2</span><br><span class="line"><span class="keyword">ON</span> T0.s_id=T2.s_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> T3</span><br><span class="line"><span class="keyword">ON</span> T0.s_id=T3.s_id;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321195553301.png" alt="image-20200321195553301"></p><ul><li>36、查询任何一门课程成绩在70分以上的学生姓名、课程名称和分数:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="comment">-- T0.s_id,</span></span><br><span class="line">    T1.s_name,</span><br><span class="line">    <span class="comment">-- T0.c_id,</span></span><br><span class="line">    T2.c_name,</span><br><span class="line">    T0.s_score</span><br><span class="line"><span class="keyword">FROM</span> score <span class="keyword">AS</span> T0</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">ON</span> T0.s_id=T1.s_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> course <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">ON</span> T0.c_id=T2.c_id</span><br><span class="line"><span class="keyword">WHERE</span> T0.s_score&gt;<span class="number">70</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321200351423.png" alt="image-20200321200351423"></p><ul><li>37、查询课程不及格的学生:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="comment">-- T0.s_id,</span></span><br><span class="line">    T1.s_name,</span><br><span class="line">    <span class="comment">-- T0.c_id,</span></span><br><span class="line">    T2.c_name,</span><br><span class="line">    T0.s_score</span><br><span class="line"><span class="keyword">FROM</span> score <span class="keyword">AS</span> T0</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> student <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">ON</span> T0.s_id=T1.s_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> course <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">ON</span> T0.c_id=T2.c_id</span><br><span class="line"><span class="keyword">WHERE</span> T0.s_score&lt;<span class="number">60</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321200449627.png" alt="image-20200321200449627"></p><ul><li>38、查询课程编号为01且课程成绩在80分及以上的学生的学号和姓名:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.s_id,</span><br><span class="line">    T2.s_name</span><br><span class="line"><span class="keyword">FROM</span> score <span class="keyword">AS</span> T1</span><br><span class="line"><span class="keyword">JOIN</span> student <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">ON</span> T1.s_id=T2.s_id</span><br><span class="line"><span class="keyword">WHERE</span> T1.c_id=<span class="string">'01'</span></span><br><span class="line"><span class="keyword">AND</span> T1.s_score&gt;=<span class="number">80</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321201135781.png" alt="image-20200321201135781"></p><ul><li>39、求每门课程的学生人数:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> T1 <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        c_id,</span><br><span class="line">        <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">AS</span> CNT_S</span><br><span class="line">    <span class="keyword">FROM</span> score</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T2.c_id,</span><br><span class="line">    T2.c_name,</span><br><span class="line">    T1.CNT_S</span><br><span class="line"><span class="keyword">FROM</span> course <span class="keyword">AS</span> T2</span><br><span class="line"><span class="keyword">JOIN</span> T1</span><br><span class="line"><span class="keyword">ON</span> T1.c_id=T2.c_id;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321201506854.png" alt="image-20200321201506854"></p><ul><li>40、查询选修”张三”老师所授课程的学生中，成绩最高的学生信息及其成绩:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> T1 <span class="keyword">AS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        A4.*,</span><br><span class="line">        A3.s_score,</span><br><span class="line">        <span class="keyword">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> A3.s_score <span class="keyword">DESC</span>) <span class="keyword">AS</span> RK</span><br><span class="line">    <span class="keyword">FROM</span> teacher <span class="keyword">AS</span> A1</span><br><span class="line">    <span class="keyword">JOIN</span> course <span class="keyword">AS</span> A2</span><br><span class="line">    <span class="keyword">ON</span> A1.t_id=A2.t_id</span><br><span class="line">    <span class="keyword">JOIN</span> score <span class="keyword">AS</span> A3</span><br><span class="line">    <span class="keyword">ON</span> A3.c_id=A2.c_id</span><br><span class="line">    <span class="keyword">JOIN</span> student <span class="keyword">AS</span> A4</span><br><span class="line">    <span class="keyword">ON</span> A3.s_id=A4.s_id</span><br><span class="line">    <span class="keyword">WHERE</span> A1.t_name=<span class="string">'张三'</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    T1.*</span><br><span class="line"><span class="keyword">FROM</span> T1</span><br><span class="line"><span class="keyword">WHERE</span> RK=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321203900937.png" alt="image-20200321203900937"></p><ul><li>41、查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">DISTINCT</span> T1.s_id,</span><br><span class="line">    T1.c_id,</span><br><span class="line">    T3.c_name,</span><br><span class="line">    T1.s_score</span><br><span class="line"><span class="keyword">FROM</span> score <span class="keyword">AS</span> T1,score <span class="keyword">AS</span> T2,course <span class="keyword">AS</span> T3</span><br><span class="line"><span class="keyword">WHERE</span> T1.c_id &lt;&gt; T2.c_id </span><br><span class="line"><span class="keyword">AND</span> T1.s_score=T2.s_score</span><br><span class="line"><span class="keyword">AND</span> T1.c_id=T3.c_id;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321220508059.png" alt="image-20200321220508059"></p><ul><li>42、查询每门课程成绩最好的前三名:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> A1 <span class="keyword">AS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        T1.s_id,</span><br><span class="line">        T1.c_id,</span><br><span class="line">        T1.s_score,</span><br><span class="line">        <span class="keyword">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> T1.c_id <span class="keyword">ORDER</span> <span class="keyword">BY</span> T1.s_score <span class="keyword">DESC</span>) <span class="keyword">AS</span> RK</span><br><span class="line">    <span class="keyword">FROM</span> score <span class="keyword">AS</span> T1</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    A1.s_id,</span><br><span class="line">    A3.s_name,</span><br><span class="line">    A2.c_name,</span><br><span class="line">    A1.s_score,</span><br><span class="line">    A1.RK</span><br><span class="line"><span class="keyword">FROM</span> A1</span><br><span class="line"><span class="keyword">JOIN</span> course <span class="keyword">AS</span> A2</span><br><span class="line"><span class="keyword">ON</span> A1.c_id=A2.c_id</span><br><span class="line"><span class="keyword">JOIN</span> student <span class="keyword">AS</span> A3</span><br><span class="line"><span class="keyword">ON</span> A1.s_id=A3.s_id</span><br><span class="line"><span class="keyword">WHERE</span> RK&lt;=<span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321205236979.png" alt="image-20200321205236979"></p><ul><li>43、统计每门课程的学生选修人数（超过5人的课程才统计）:要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    c_id,</span><br><span class="line">    <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">AS</span> CNT_C</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> c_id</span><br><span class="line"><span class="keyword">HAVING</span> CNT_C&gt;=<span class="number">5</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> CNT_C <span class="keyword">DESC</span>,c_id;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321205619210.png" alt="image-20200321205619210"></p><ul><li>44、检索至少选修两门课程的学生学号:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s_id,</span><br><span class="line">    <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">AS</span> CNT_S</span><br><span class="line"><span class="keyword">FROM</span> score</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> s_id</span><br><span class="line"><span class="keyword">HAVING</span> CNT_S&gt;=<span class="number">2</span></span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321205759015.png" alt="image-20200321205759015"></p><ul><li>45、查询选修了全部课程的学生信息:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> A1 <span class="keyword">AS</span>(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        T1.s_id,</span><br><span class="line">        <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">AS</span> CNT_S</span><br><span class="line">    <span class="keyword">FROM</span> score <span class="keyword">AS</span> T1</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> T1.s_id</span><br><span class="line">    <span class="keyword">HAVING</span> CNT_S=<span class="number">3</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    A0.*</span><br><span class="line"><span class="keyword">FROM</span> student A0</span><br><span class="line"><span class="keyword">JOIN</span> A1</span><br><span class="line"><span class="keyword">ON</span> A0.s_id=A1.s_id</span><br><span class="line"><span class="keyword">WHERE</span> A1.CNT_S=<span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321210907315.png" alt="image-20200321210907315"></p><ul><li>46、查询各学生的年龄(周岁):</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    s_name,</span><br><span class="line">    s_birth,</span><br><span class="line">    (YEAR(current_date())-YEAR(s_birth)-</span><br><span class="line">        (CASE WHEN MONTH(current_date())&gt;MONTH(s_birth) THEN 0 </span><br><span class="line">              WHEN MONTH(current_date())=MONTH(s_birth) THEN </span><br><span class="line">                    (CASE WHEN DAY(current_date())&gt;=DAY(s_birth) THEN 0 ELSE 1 END)</span><br><span class="line">          ELSE 1 END)</span><br><span class="line">    ) AS AGE</span><br><span class="line">FROM student;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321213703448.png" alt="image-20200321213703448"></p><ul><li>47、查询本周过生日的学生:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    s_name,</span><br><span class="line">    s_birth</span><br><span class="line">FROM student</span><br><span class="line">WHERE s_birth BETWEEN DATE_ADD(NEXT_DAY(current_date(), &apos;MON&apos;),-1) AND DATE_ADD(NEXT_DAY(current_date(), &apos;MON&apos;),-7);</span><br></pre></td></tr></table></figure><p>今天是3月21号，暂时没有本周过生日的同学，不过本题的思想是找到本周第一天和本周最后一天，HQL实现如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">        <span class="keyword">DATE_ADD</span>(NEXT_DAY(<span class="keyword">current_date</span>(), <span class="string">'MON'</span>),<span class="number">-1</span>) <span class="keyword">AS</span> SUNDAY,</span><br><span class="line">        <span class="keyword">DATE_ADD</span>(NEXT_DAY(<span class="keyword">current_date</span>(), <span class="string">'MON'</span>),<span class="number">-7</span>) <span class="keyword">AS</span> MONDAY</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321215322208.png" alt="image-20200321215322208"></p><ul><li>48、查询下周过生日的学生:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s_name,</span><br><span class="line">    s_birth</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> s_birth <span class="keyword">BETWEEN</span> NEXT_DAY(<span class="keyword">current_date</span>(), <span class="string">'MON'</span>) <span class="keyword">AND</span> <span class="keyword">DATE_ADD</span>(NEXT_DAY(<span class="keyword">current_date</span>(), <span class="string">'MON'</span>),<span class="number">6</span>);</span><br></pre></td></tr></table></figure><p>同样没有下周过生日的同学，下周一到下周日的HQL如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> NEXT_DAY(<span class="keyword">current_date</span>(), <span class="string">'MON'</span>) , <span class="keyword">DATE_ADD</span>(NEXT_DAY(<span class="keyword">current_date</span>(), <span class="string">'MON'</span>),<span class="number">6</span>)</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321215737713.png" alt="image-20200321215737713"></p><ul><li>49、查询本月过生日的学生:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s_name,</span><br><span class="line">    s_birth</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">MONTH</span>(s_birth)=<span class="keyword">MONTH</span>(<span class="keyword">current_date</span>());</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321215852433.png" alt="image-20200321215852433"></p><ul><li>50、查询12月份过生日的学生:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s_name,</span><br><span class="line">    s_birth</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">MONTH</span>(s_birth)=<span class="number">12</span>;</span><br></pre></td></tr></table></figure><p><img src="/cn/b8f1/image-20200321215929799.png" alt="image-20200321215929799"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;平常加班不多，为了提高自己的SQL能力，找了网上流传的比较广泛的SQL50题，先把题目拿过来，计划抽空作为练习用HiveSQL完成。&lt;/p&gt;&lt;p&gt;开始日期：2020-03-18&lt;/p&gt;&lt;p&gt;完成日期：2020-03-21&lt;/p&gt;&lt;p&gt;建表语句&lt;/p&gt;&lt;figure clas
      
    
    </summary>
    
      <category term="SQL" scheme="https://mapan.tech/cn/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>归并排序</title>
    <link href="https://mapan.tech/cn/f8df.html"/>
    <id>https://mapan.tech/cn/f8df.html</id>
    <published>2020-03-15T06:38:41.000Z</published>
    <updated>2020-03-15T07:40:49.852Z</updated>
    
    <content type="html"><![CDATA[<p>归并排序采用经典的分治策略，利用归并的思想实现的排序方法。把一个待排序的数组无限拆分，直到子数组只有一个元素，然后开始按顺序再进行合并。想象一下若一副扑克牌乱序混在一起，如何从小到大排序？</p><ol><li>把牌堆分层两份，分给两个小伙伴进行从小到大排序。</li><li>两位小伙伴排序完成，给到有序牌堆A和有序牌堆B。</li><li>每次抽取两个牌堆最顶端一张进行比较，较小的合入到整体有序的牌堆C中。</li></ol><p>那么两个小伙伴是如何把分到的扑克牌给排序完成的呢？</p><ol><li><p>把牌堆分层两份，分给两个小伙伴进行从小到大排序。</p></li><li><p>两位小伙伴排序完成，给到有序牌堆A和有序牌堆B。</p></li><li><p>每次抽取两个牌堆最顶端一张进行比较，较小的合入到整体有序的牌堆C中。</p></li></ol><p>那么两个小伙伴是如何把分到的扑克牌给排序完成的呢？</p><p>重复步骤1-3 ···</p><p>当某次分牌时，某两位小伙伴各自仅分到了一张牌，那就不能再继续分了，他俩把分到的牌按照大小顺序交上去，这样就有了有序的牌堆（2张牌），然后2张合4张，4张合8张···，到最后整副扑克牌都是有序的。</p><p>这就是归并的思想</p><p><img src="/cn/f8df/MergeSrot.png" alt="MergeSrot"></p><p>动图理解：</p><p><img src="/cn/f8df/2346780.gif" alt="2346780"></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr  带排序的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> low  数组中较低的一侧的下标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> high 数组中较高的一侧的下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> middle = (high + low) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="comment">// 处理左边</span></span><br><span class="line">        mergeSort(arr, low, middle);</span><br><span class="line">        <span class="comment">// 处理右边</span></span><br><span class="line">        mergeSort(arr, middle + <span class="number">1</span>, high);</span><br><span class="line">        <span class="comment">// 合并左右两边</span></span><br><span class="line">        merge(arr, low, middle, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> arr    待归并的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> low    左侧数组起始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> middle 左侧数组的结束位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> high   右侧数组结束位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> low, <span class="keyword">int</span> middle, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 用于存储归并后的临时数组</span></span><br><span class="line">    <span class="keyword">int</span>[] temp = <span class="keyword">new</span> <span class="keyword">int</span>[high - low + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 记录第一个数组中需要遍历的下标</span></span><br><span class="line">    <span class="keyword">int</span> i = low;</span><br><span class="line">    <span class="comment">// 记录第二个数组中需要遍历的下标</span></span><br><span class="line">    <span class="keyword">int</span> j = middle + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 用于记录在临时数组中存放的下标</span></span><br><span class="line">    <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= middle &amp;&amp; j &lt;= high) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt;= arr[j]) &#123;</span><br><span class="line">            temp[index++] = arr[i++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            temp[index++] = arr[j++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 一个数组中的数已经全部放入temp,剩下较长的一个子数组的数全部放进temp中</span></span><br><span class="line">    <span class="keyword">while</span> (j &lt;= high) &#123;</span><br><span class="line">        temp[index++] = arr[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= middle) &#123;</span><br><span class="line">        temp[index++] = arr[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把临时数组中的数据重新存入原来数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; temp.length; k++) &#123;</span><br><span class="line">        arr[k + low] = temp[k];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;归并排序采用经典的分治策略，利用归并的思想实现的排序方法。把一个待排序的数组无限拆分，直到子数组只有一个元素，然后开始按顺序再进行合并。想象一下若一副扑克牌乱序混在一起，如何从小到大排序？&lt;/p&gt;&lt;ol&gt;&lt;li&gt;把牌堆分层两份，分给两个小伙伴进行从小到大排序。&lt;/li&gt;&lt;l
      
    
    </summary>
    
      <category term="算法" scheme="https://mapan.tech/cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="https://mapan.tech/cn/2c2a.html"/>
    <id>https://mapan.tech/cn/2c2a.html</id>
    <published>2020-03-14T14:32:34.000Z</published>
    <updated>2020-03-18T12:36:27.389Z</updated>
    
    <content type="html"><![CDATA[<p>快速排序是对冒泡排序的一种改进，快速思想是使用分治法，其中有一个基准值，把一个数组中的数分为较基准值大和较基准值小的两部分（子数组），所有比基准值大的放在基准值后面，所有比基准值小的放在基准值前面，然后递归再次切分，直至子数组的大小为1或0，此时全局有序。</p><p>图示：</p><p><img src="/cn/2c2a/7789414-007520d3d4a7610c.gif" alt="7789414-007520d3d4a7610c"></p><p>快速排序是不稳定的排序，在排序后，相同值的先后顺序可能会变化，所以是不稳定的。</p><p>所谓是稳定性是指：假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，r[i]=r[j]，且r[i]在r[j]之前，而在排序后的序列中，r[i]仍在r[j]之前，则称这种排序算法是稳定的；否则称为不稳定的。</p><p>代码实现：</p><p>Java版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> low = left;</span><br><span class="line">        <span class="keyword">int</span> high = right;</span><br><span class="line">        <span class="keyword">int</span> pivot = arr[left];</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="keyword">while</span> (low &lt; high &amp;&amp; arr[high] &gt;= pivot) &#123;</span><br><span class="line">                high--;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[low] = arr[high];</span><br><span class="line">            <span class="keyword">while</span> (low &lt; high &amp;&amp; arr[low] &lt;= pivot) &#123;</span><br><span class="line">                low++;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[high] = arr[low];</span><br><span class="line">        &#125;</span><br><span class="line">        arr[low] = pivot;</span><br><span class="line">        quickSort(arr, left, low - <span class="number">1</span>);</span><br><span class="line">        quickSort(arr, low + <span class="number">1</span>, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Scala版本：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort</span></span>(arr: <span class="type">Array</span>[<span class="type">Int</span>], left: <span class="type">Int</span>, right: <span class="type">Int</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">    <span class="keyword">var</span> low = left</span><br><span class="line">    <span class="keyword">var</span> high = right</span><br><span class="line">    <span class="keyword">val</span> pivot = arr(low)</span><br><span class="line">    <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">      <span class="keyword">while</span> (low &lt; high &amp;&amp; arr(high) &gt;= pivot) high -= <span class="number">1</span></span><br><span class="line">      arr(low) = arr(high)</span><br><span class="line">      <span class="keyword">while</span> (low &lt; high &amp;&amp; arr(low) &lt;= pivot) low += <span class="number">1</span></span><br><span class="line">      arr(high) = arr(low)</span><br><span class="line">    &#125;</span><br><span class="line">    arr(low) = pivot</span><br><span class="line">    quickSort(arr, low + <span class="number">1</span>, right)</span><br><span class="line">    quickSort(arr, left, low - <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在网上看了不少人的快速排序代码，其整体思想都是一样的，分治，递归。但是具体实现细节上则各不相同，八仙过海，大显神通。上面代码是我觉得比较好简洁，且理解相对容易的一种写法。另外Scala版本有一个十分精简的写法：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort</span></span>(list: <span class="type">List</span>[<span class="type">Int</span>]): <span class="type">List</span>[<span class="type">Int</span>] = list <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Nil</span> =&gt; <span class="type">Nil</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">List</span>() =&gt; <span class="type">List</span>()</span><br><span class="line">    <span class="keyword">case</span> head :: tail =&gt;</span><br><span class="line">      <span class="keyword">val</span> (left, right) = tail.partition(_ &lt; head)</span><br><span class="line">      quickSort(left) ::: head :: quickSort(right)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Scala这么优雅的语言，真的让人赏心悦目。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;快速排序是对冒泡排序的一种改进，快速思想是使用分治法，其中有一个基准值，把一个数组中的数分为较基准值大和较基准值小的两部分（子数组），所有比基准值大的放在基准值后面，所有比基准值小的放在基准值前面，然后递归再次切分，直至子数组的大小为1或0，此时全局有序。&lt;/p&gt;&lt;p&gt;图示
      
    
    </summary>
    
      <category term="算法" scheme="https://mapan.tech/cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>希尔排序</title>
    <link href="https://mapan.tech/cn/3c6c.html"/>
    <id>https://mapan.tech/cn/3c6c.html</id>
    <published>2020-03-14T08:01:06.000Z</published>
    <updated>2020-03-14T11:23:43.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p>希尔排序的思想是按照下标的一定增量分组，对魅族使用直接插入排序算法进行排序，随着增量逐渐减少，每组包含的关键词越来越多，当增量减少到1时，整个文件恰好被分成一组，算法终止。<br>简单来说就是按照一定步长分组，例如100个数排序，第一次分50组，每组两个数，第二次分25组，每组4个数，第三次分12组，第四次分6组，第五次分3组，第六次分1组。每一次分组后在组内进行排序。</p><p>排序流程：</p><p><img src="/cn/3c6c/srg453d.gif" alt="希尔排序"></p><p>代码实现：</p><p>首先分组，然后使用交换法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 第一个循环，对数组进行分组，直到gap=1为止</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap = arr.length / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">//交替遍历所有组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 组内排序，使用交换法</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i - gap; j &gt;= <span class="number">0</span>; j -= gap) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &gt; arr[j + gap]) &#123;</span><br><span class="line">                    arr[j] = arr[j] ^ arr[j + gap];</span><br><span class="line">                    arr[j + gap] = arr[j] ^ arr[j + gap];</span><br><span class="line">                    arr[j] = arr[j] ^ arr[j + gap];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用交换法，每次对比都要进行交换，效率比较低，内部排序的方式可以修改成直接插入排序。</p><p>分组，然后插入法（希尔排序）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shellSort2</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 第一个循环，对数组进行分组，直到gap=1为止</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> gap = arr.length / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 交替遍历所有的组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[j];</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[j - gap]) &#123;</span><br><span class="line">                <span class="comment">// 移动数据，等待插入</span></span><br><span class="line">                <span class="keyword">while</span> (j - gap &gt;= <span class="number">0</span> &amp;&amp; temp &lt; arr[j - gap]) &#123;</span><br><span class="line">                    arr[j] = arr[j - gap];</span><br><span class="line">                    j -= gap;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 找到待插入的位置，插入数据</span></span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>希尔排序是对直接插入排序的更高效的改进版本，</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;希尔排序&quot;&gt;&lt;a href=&quot;#希尔排序&quot; class=&quot;headerlink&quot; title=&quot;希尔排序&quot;&gt;&lt;/a&gt;希尔排序&lt;/h1&gt;&lt;p&gt;希尔排序的思想是按照下标的一定增量分组，对魅族使用直接插入排序算法进行排序，随着增量逐渐减少，每组包含的关键词越来越多，当增
      
    
    </summary>
    
      <category term="算法" scheme="https://mapan.tech/cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>三大经典排序</title>
    <link href="https://mapan.tech/cn/846c.html"/>
    <id>https://mapan.tech/cn/846c.html</id>
    <published>2020-03-13T12:27:14.000Z</published>
    <updated>2020-03-14T11:35:15.804Z</updated>
    
    <content type="html"><![CDATA[<p>2018年Coding被腾讯收购后变成了腾讯开发者平台，一直不温不火。今年一月份有又要改名为新Coding，真是命途多舛，还好提供的服务一直可以满足我的需求。虽然偶尔服务器宕机，但是速度快呀，Coding pages还是真香。由于今年网站再次改版，之前的pages要停止服务了，貌似也没有通知一声，昨天修复了一下，看了下留言，我的小站还是有人浏览的。所以决定还是要好好经营下去。</p><p>最近看了一些书，有了一些新的感悟。学习是要有输出的，只有自己能把一个东西讲清楚才算真正学会了，那么就把最近研究和学习的一些东西给写下来吧。</p><h1 id="大学学过的一些很基础的排序算法"><a href="#大学学过的一些很基础的排序算法" class="headerlink" title="大学学过的一些很基础的排序算法"></a>大学学过的一些很基础的排序算法</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>掌握一种算法不是把它的实现代码给背下来，而是理解他的思想。这样就可以做到以不变应万变。<br>冒泡排序的思想是：在一个n个数的乱序数组中，遍历整个数组(n-1)轮，每次遍历位数减少1，每次选择出一个最大的数放在数组的末尾，这样在经过(n-1)轮遍历之后，数组中所有的元素都是有序的。<br>原理：<br><img src="/cn/846c/e9011afacb434ea09c8a156dc9983bfb.gif" alt="冒泡排序"></p><p>实现代码：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubble</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j + <span class="number">1</span>] &lt; arr[j]) &#123;</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>] ^ arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>] ^ arr[j];</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>] ^ arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"第"</span> + (i) + <span class="string">"趟排序:"</span> + Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p>上面我使用了一个不引入第三个变量，实现交换两个变量的值的技巧，一个数对另一个数进行两次异或运算得到的结果是这个数本身，交换a和b的值的方法：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = a ^ b;</span><br><span class="line">b = a ^ b;</span><br><span class="line">a = a ^ b;</span><br></pre></td></tr></table></figure><p></p><p>那么不管是最好的情况还是最坏的情况，实际判断的次数是不会减少的，是否可以优化呢？答案是肯定的，如果在最好的情况下，可以发现，在第一趟排序中所有的数都没有发生交换。<br>所以可以进行如下优化，当在一轮遍历中，如果没有两个数进行交换，就可以认为整体数组是有序的，优化之后的代码：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubble</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j + <span class="number">1</span>] &lt; arr[j]) &#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>] ^ arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>] ^ arr[j];</span><br><span class="line">                arr[j + <span class="number">1</span>] = arr[j + <span class="number">1</span>] ^ arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"第"</span> + (i) + <span class="string">"趟排序:"</span> + Arrays.toString(arr));</span><br><span class="line">        <span class="comment">// 在一趟排序中，若没有发生过交换，说明已经排好序了。</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序相对冒泡排序而言，交换的次数减少了，所以效率也提高了一些。选择排序的思想是：<br>经过(n-1)轮遍历，依次找到每个位置上该放的值。第1次遍历找到最小的值a，把它当到第一位；第2次遍历找到除最小值a以外的最小值b，把它放到第二位··· 直到(n-1)次遍历，找到最小值把它放到(n-1)位，即第倒数二位。此时数组为全局有序。<br>原理：<br><img src="/cn/846c/0d74357a85fb419da3fc60219b2172ac.gif" alt="选择排序"></p><p>代码实现：<br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 选择排序 时间复杂度O(n^2)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> minIndex = i;</span><br><span class="line">        <span class="keyword">int</span> min = arr[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; arr[j]) &#123;</span><br><span class="line">                min = arr[j];</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (minIndex != i) &#123;</span><br><span class="line">            arr[minIndex] = arr[i];</span><br><span class="line">            arr[i] = min;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>选择排序的思想是找位置，与选择排序不同，插入排序的思想是找一个有序的区间，保证这个区间内是有序的。通过一次次的遍历，逐渐扩大这个有序区间，直到区间大小等于数组大小，即数组全局有序。所谓逐渐扩大，即把待插入的数，插入到有序区间内属于这个数的恰当位置。</p><p>原理：<br><img src="/cn/846c/1167a023cbec4da0aa056ca481104d16.gif" alt="插入排序"></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义待插入的数</span></span><br><span class="line">        <span class="keyword">int</span> insertVal = arr[i];</span><br><span class="line">        <span class="comment">//即arr[i]前面这个数的下标</span></span><br><span class="line">        <span class="keyword">int</span> insertIndex = i - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给insertVal找到插入的位置</span></span><br><span class="line">        <span class="comment">//说明</span></span><br><span class="line">        <span class="comment">//1.insertIndex &gt;= 0保证在给insertVal找插入位置，不越界</span></span><br><span class="line">        <span class="comment">//2.insertVal &lt; arr[insertIndex]待插入的数，还没有找到插入位置</span></span><br><span class="line">        <span class="comment">//3.就需要将arr[insertIndex]后移</span></span><br><span class="line">        <span class="keyword">while</span> (insertIndex &gt;= <span class="number">0</span> &amp;&amp; insertVal &lt; arr[insertIndex]) &#123;</span><br><span class="line">            arr[insertIndex + <span class="number">1</span>] = arr[insertIndex];</span><br><span class="line">            insertIndex--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当退出while循环时，说明插入的位置找到，insertIndex + 1</span></span><br><span class="line">        arr[insertIndex + <span class="number">1</span>] = insertVal;</span><br><span class="line">        System.out.println(<span class="string">"第"</span> + i + <span class="string">"轮插入"</span>);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2018年Coding被腾讯收购后变成了腾讯开发者平台，一直不温不火。今年一月份有又要改名为新Coding，真是命途多舛，还好提供的服务一直可以满足我的需求。虽然偶尔服务器宕机，但是速度快呀，Coding pages还是真香。由于今年网站再次改版，之前的pages要停止服务
      
    
    </summary>
    
      <category term="算法" scheme="https://mapan.tech/cn/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>牛客网SQL题目</title>
    <link href="https://mapan.tech/cn/7b61.html"/>
    <id>https://mapan.tech/cn/7b61.html</id>
    <published>2020-01-04T03:55:40.000Z</published>
    <updated>2020-03-12T13:37:02.187Z</updated>
    
    <content type="html"><![CDATA[<p>牛客网题目 <a href="https://www.nowcoder.com/ta/sql">https://www.nowcoder.com/ta/sql</a><br>共计61道题目，现已全部完成</p><h2 id="第01题"><a href="#第01题" class="headerlink" title="第01题"></a>第01题</h2><ul><li>题目描述：查找最晚入职员工的所有信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`birth_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`hire_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th><th style="text-align:left">birth_date</th><th style="text-align:left">first_name</th><th style="text-align:left">last_name</th><th style="text-align:left">gender</th><th style="text-align:left">hire_date</th></tr></thead><tbody><tr><td style="text-align:left">10008</td><td style="text-align:left">1958-02-19</td><td style="text-align:left">Saniya</td><td style="text-align:left">Kalloufi</td><td style="text-align:left">M</td><td style="text-align:left">1994-09-15</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> hire_date=(<span class="keyword">select</span> hire_date <span class="keyword">from</span> employees <span class="keyword">order</span> <span class="keyword">by</span> hire_date <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">1</span> )</span><br></pre></td></tr></table></figure><h2 id="第02题"><a href="#第02题" class="headerlink" title="第02题"></a>第02题</h2><ul><li>题目描述：查找入职员工时间排名倒数第三的员工所有信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`birth_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`hire_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th><th style="text-align:left">birth_date</th><th style="text-align:left">first_name</th><th style="text-align:left">last_name</th><th style="text-align:left">gender</th><th style="text-align:left">hire_date</th></tr></thead><tbody><tr><td style="text-align:left">10005</td><td style="text-align:left">1955-01-21</td><td style="text-align:left">Kyoichi</td><td style="text-align:left">Maliniak</td><td style="text-align:left">M</td><td style="text-align:left">1989-09-12</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> employees </span><br><span class="line"><span class="keyword">where</span> hire_date=(</span><br><span class="line">    <span class="keyword">select</span> hire_date </span><br><span class="line">    <span class="keyword">from</span> employees</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> hire_date </span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> hire_date <span class="keyword">desc</span></span><br><span class="line">    <span class="keyword">limit</span> <span class="number">2</span>,<span class="number">1</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="第03题"><a href="#第03题" class="headerlink" title="第03题"></a>第03题</h2><ul><li>题目描述：查找各个部门当前(to_date=’9999-01-01’)领导当前薪水详情以及其对应部门编号dept_no</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`dept_manager`</span> (</span><br><span class="line"><span class="string">`dept_no`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`dept_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th><th style="text-align:left">salary</th><th style="text-align:left">from_date</th><th style="text-align:left">to_date</th><th style="text-align:left">dept_no</th></tr></thead><tbody><tr><td style="text-align:left">10002</td><td style="text-align:left">72527</td><td style="text-align:left">2001-08-02</td><td style="text-align:left">9999-01-01</td><td style="text-align:left">d001</td></tr><tr><td style="text-align:left">10004</td><td style="text-align:left">74057</td><td style="text-align:left">2001-11-27</td><td style="text-align:left">9999-01-01</td><td style="text-align:left">d004</td></tr><tr><td style="text-align:left">10005</td><td style="text-align:left">94692</td><td style="text-align:left">2001-09-09</td><td style="text-align:left">9999-01-01</td><td style="text-align:left">d003</td></tr><tr><td style="text-align:left">10006</td><td style="text-align:left">43311</td><td style="text-align:left">2001-08-02</td><td style="text-align:left">9999-01-01</td><td style="text-align:left">d002</td></tr><tr><td style="text-align:left">10010</td><td style="text-align:left">94409</td><td style="text-align:left">2001-11-23</td><td style="text-align:left">9999-01-01</td><td style="text-align:left">d006</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    t2.*,</span><br><span class="line">    t1.dept_no</span><br><span class="line"><span class="keyword">from</span> salaries <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">join</span> dept_manager <span class="keyword">as</span> t1</span><br><span class="line"><span class="keyword">on</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">where</span> t1.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">and</span> t2.to_date=<span class="string">'9999-01-01'</span>;</span><br></pre></td></tr></table></figure><h2 id="第04题"><a href="#第04题" class="headerlink" title="第04题"></a>第04题</h2><ul><li>题目描述：查找所有已经分配部门的员工的last_name和first_name</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`dept_emp`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`dept_no`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`dept_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`birth_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`hire_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">last_name</th><th style="text-align:left">first_name</th><th style="text-align:left">dept_no</th></tr></thead><tbody><tr><td style="text-align:left">Facello</td><td style="text-align:left">Georgi</td><td style="text-align:left">d001</td></tr><tr><td style="text-align:left">省略</td><td style="text-align:left">省略</td><td style="text-align:left">省略</td></tr><tr><td style="text-align:left">Piveteau</td><td style="text-align:left">Duangkaew</td><td style="text-align:left">d006</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    t1.last_name,</span><br><span class="line">    t1.first_name,</span><br><span class="line">    t2.dept_no</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    employees <span class="keyword">as</span> t1,</span><br><span class="line">    dept_emp <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">where</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">and</span> t2.dept_no <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h2 id="第05题"><a href="#第05题" class="headerlink" title="第05题"></a>第05题</h2><ul><li>题目描述：查找所有员工的last_name和first_name以及对应部门编号dept_no，也包括展示没有分配具体部门的员工</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`dept_emp`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`dept_no`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`dept_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`birth_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`hire_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">last_name</th><th style="text-align:left">first_name</th><th style="text-align:left">dept_no</th></tr></thead><tbody><tr><td style="text-align:left">Facello</td><td style="text-align:left">Georgi</td><td style="text-align:left">d001</td></tr><tr><td style="text-align:left">省略</td><td style="text-align:left">省略</td><td style="text-align:left">省略</td></tr><tr><td style="text-align:left">Sluis</td><td style="text-align:left">Mary</td><td style="text-align:left">NULL(在sqlite中此处为空,MySQL为NULL)</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    t2.last_name,</span><br><span class="line">    t2.first_name,</span><br><span class="line">    t1.dept_no</span><br><span class="line"><span class="keyword">from</span> employees <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dept_emp <span class="keyword">as</span> t1</span><br><span class="line"><span class="keyword">on</span> t1.emp_no=t2.emp_no;</span><br></pre></td></tr></table></figure><h2 id="第06题"><a href="#第06题" class="headerlink" title="第06题"></a>第06题</h2><ul><li>题目描述：查找所有员工入职时候的薪水情况，给出emp_no以及salary， 并按照emp_no进行逆序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`birth_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`hire_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th><th style="text-align:left">salary</th></tr></thead><tbody><tr><td style="text-align:left">10011</td><td style="text-align:left">25828</td></tr><tr><td style="text-align:left">省略</td><td style="text-align:left">省略</td></tr><tr><td style="text-align:left">10001</td><td style="text-align:left">60117</td></tr></tbody></table></div><ul><li>答案：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    t1.emp_no,</span><br><span class="line">    t2.salary</span><br><span class="line"><span class="keyword">from</span> employees <span class="keyword">as</span> t1</span><br><span class="line"><span class="keyword">join</span> salaries <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">on</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">where</span> t1.hire_date=t2.from_date</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> t1.emp_no <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="第07题"><a href="#第07题" class="headerlink" title="第07题"></a>第07题</h2><ul><li>题目描述：查找薪水涨幅超过15次的员工号emp_no以及其对应的涨幅次数t</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th><th style="text-align:left">t</th></tr></thead><tbody><tr><td style="text-align:left">10001</td><td style="text-align:left">17</td></tr><tr><td style="text-align:left">10004</td><td style="text-align:left">16</td></tr><tr><td style="text-align:left">10009</td><td style="text-align:left">18</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    emp_no,</span><br><span class="line">    <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">from</span> salaries</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> emp_no</span><br><span class="line"><span class="keyword">having</span> t&gt;<span class="number">15</span>;</span><br></pre></td></tr></table></figure><h2 id="第08题"><a href="#第08题" class="headerlink" title="第08题"></a>第08题</h2><ul><li>题目描述：找出所有员工当前(to_date=’9999-01-01’)具体的薪水salary情况，对于相同的薪水只显示一次,并按照逆序显示</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">salary</th></tr></thead><tbody><tr><td style="text-align:left">94692</td></tr><tr><td style="text-align:left">94409</td></tr><tr><td style="text-align:left">88958</td></tr><tr><td style="text-align:left">88070</td></tr><tr><td style="text-align:left">74057</td></tr><tr><td style="text-align:left">72527</td></tr><tr><td style="text-align:left">59755</td></tr><tr><td style="text-align:left">43311</td></tr><tr><td style="text-align:left">25828</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="keyword">distinct</span> salary</span><br><span class="line"><span class="keyword">from</span> salaries</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">to_date</span>=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h2 id="第09题"><a href="#第09题" class="headerlink" title="第09题"></a>第09题</h2><ul><li>题目描述：获取所有部门当前manager的当前薪水情况，给出dept_no, emp_no以及salary，当前表示to_date=’9999-01-01’</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`dept_manager`</span> (</span><br><span class="line"><span class="string">`dept_no`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`dept_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">dept_no</th><th style="text-align:left">emp_no</th><th style="text-align:left">salary</th></tr></thead><tbody><tr><td style="text-align:left">d001</td><td style="text-align:left">10002</td><td style="text-align:left">72527</td></tr><tr><td style="text-align:left">d004</td><td style="text-align:left">10004</td><td style="text-align:left">74057</td></tr><tr><td style="text-align:left">d003</td><td style="text-align:left">10005</td><td style="text-align:left">94692</td></tr><tr><td style="text-align:left">d002</td><td style="text-align:left">10006</td><td style="text-align:left">43311</td></tr><tr><td style="text-align:left">d006</td><td style="text-align:left">10010</td><td style="text-align:left">94409</td></tr></tbody></table></div><ul><li>答案：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    t2.dept_no,</span><br><span class="line">    t2.emp_no,</span><br><span class="line">    t1.salary</span><br><span class="line"><span class="keyword">from</span> salaries <span class="keyword">as</span> t1</span><br><span class="line"><span class="keyword">join</span> dept_manager <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">on</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">where</span> t1.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">and</span> t2.to_date=<span class="string">'9999-01-01'</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="第10题"><a href="#第10题" class="headerlink" title="第10题"></a>第10题</h2><ul><li>题目描述：获取所有非manager的员工emp_no</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`dept_manager`</span> (</span><br><span class="line"><span class="string">`dept_no`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`dept_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`birth_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`hire_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th></tr></thead><tbody><tr><td style="text-align:left">10001</td></tr><tr><td style="text-align:left">10003</td></tr><tr><td style="text-align:left">10007</td></tr><tr><td style="text-align:left">10008</td></tr><tr><td style="text-align:left">10009</td></tr><tr><td style="text-align:left">10011</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    t1.emp_no</span><br><span class="line"><span class="keyword">from</span> employees <span class="keyword">as</span> t1</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dept_manager <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">on</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">where</span> t2.dept_no <span class="keyword">is</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h2 id="第11题"><a href="#第11题" class="headerlink" title="第11题"></a>第11题</h2><ul><li>题目描述： 获取所有员工当前的manager，如果当前的manager是自己的话结果不显示，当前表示to_date=’9999-01-01’。<br>结果第一列给出当前员工的emp_no,第二列给出其manager对应的manager_no。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`dept_emp`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`dept_no`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`dept_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`dept_manager`</span> (</span><br><span class="line"><span class="string">`dept_no`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`dept_no`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th><th style="text-align:left">manager_no</th></tr></thead><tbody><tr><td style="text-align:left">10001</td><td style="text-align:left">10002</td></tr><tr><td style="text-align:left">10003</td><td style="text-align:left">10004</td></tr><tr><td style="text-align:left">10009</td><td style="text-align:left">10010</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    t1.emp_no,</span><br><span class="line">    t2.emp_no <span class="keyword">as</span> manager_no</span><br><span class="line"><span class="keyword">from</span> dept_emp <span class="keyword">as</span> t1</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> dept_manager <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">on</span> t1.dept_no=t2.dept_no</span><br><span class="line"><span class="keyword">where</span> t1.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">and</span> t2.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">and</span> t1.emp_no&lt;&gt;t2.emp_no;</span><br></pre></td></tr></table></figure><h2 id="第12题"><a href="#第12题" class="headerlink" title="第12题"></a>第12题</h2><ul><li>题目描述：获取所有部门中当前员工薪水最高的相关信息，给出dept_no, emp_no以及其对应的salary</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`dept_emp`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`dept_no`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`dept_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">dept_no</th><th style="text-align:left">emp_no</th><th style="text-align:left">salary</th></tr></thead><tbody><tr><td style="text-align:left">d001</td><td style="text-align:left">10001</td><td style="text-align:left">88958</td></tr><tr><td style="text-align:left">d002</td><td style="text-align:left">10006</td><td style="text-align:left">43311</td></tr><tr><td style="text-align:left">d003</td><td style="text-align:left">10005</td><td style="text-align:left">94692</td></tr><tr><td style="text-align:left">d004</td><td style="text-align:left">10004</td><td style="text-align:left">74057</td></tr><tr><td style="text-align:left">d005</td><td style="text-align:left">10007</td><td style="text-align:left">88070</td></tr><tr><td style="text-align:left">d006</td><td style="text-align:left">10009</td><td style="text-align:left">95409</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    t1.dept_no, </span><br><span class="line">    t1.emp_no, </span><br><span class="line">    t2.salary</span><br><span class="line"><span class="keyword">from</span> dept_emp <span class="keyword">as</span> t1 </span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> salaries <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">on</span> t1.emp_no = t2.emp_no</span><br><span class="line"><span class="keyword">and</span> t1.to_date = <span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">and</span> t2.to_date = <span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">where</span> t2.salary = (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">max</span>(t3.salary)</span><br><span class="line">    <span class="keyword">from</span> dept_emp <span class="keyword">as</span> t4</span><br><span class="line">    <span class="keyword">inner</span> <span class="keyword">join</span> salaries <span class="keyword">as</span> t3</span><br><span class="line">    <span class="keyword">on</span> t3.emp_no = t4.emp_no</span><br><span class="line">    <span class="keyword">and</span> t3.to_date = <span class="string">'9999-01-01'</span></span><br><span class="line">    <span class="keyword">and</span> t4.to_date = <span class="string">'9999-01-01'</span></span><br><span class="line">    <span class="keyword">where</span> t4.dept_no = t1.dept_no</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> t4.dept_no)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> t1.dept_no;</span><br></pre></td></tr></table></figure><h2 id="第13题"><a href="#第13题" class="headerlink" title="第13题"></a>第13题</h2><ul><li>题目描述：从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">"titles"</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">title</th><th style="text-align:left">t</th></tr></thead><tbody><tr><td style="text-align:left">Assistant Engineer</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">Engineer</td><td style="text-align:left">4</td></tr><tr><td style="text-align:left">省略</td><td style="text-align:left">省略</td></tr><tr><td style="text-align:left">Staff</td><td style="text-align:left">3</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    title,</span><br><span class="line">    <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">from</span> titles</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> title</span><br><span class="line"><span class="keyword">having</span> t&gt;=<span class="number">2</span>;</span><br></pre></td></tr></table></figure><h2 id="第14题"><a href="#第14题" class="headerlink" title="第14题"></a>第14题</h2><ul><li>题目描述：从titles表获取按照title进行分组，每组个数大于等于2，给出title以及对应的数目t。<br>注意对于重复的emp_no进行忽略。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`titles`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">title</th><th style="text-align:left">t</th></tr></thead><tbody><tr><td style="text-align:left">Assistant Engineer</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">Engineer</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left">省略</td><td style="text-align:left">省略</td></tr><tr><td style="text-align:left">Staff</td><td style="text-align:left">3</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    title,</span><br><span class="line">    <span class="keyword">count</span>(<span class="keyword">distinct</span> emp_no) <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">from</span> titles</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> title;</span><br></pre></td></tr></table></figure><h2 id="第15题"><a href="#第15题" class="headerlink" title="第15题"></a>第15题</h2><ul><li>题目描述：查找employees表所有emp_no为奇数，且last_name不为Mary的员工信息，并按照hire_date逆序排列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`birth_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`hire_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th><th style="text-align:left">birth_date</th><th style="text-align:left">first_name</th><th style="text-align:left">last_name</th><th style="text-align:left">gender</th><th style="text-align:left">hire_date</th></tr></thead><tbody><tr><td style="text-align:left">10011</td><td style="text-align:left">1953-11-07</td><td style="text-align:left">Mary</td><td style="text-align:left">Sluis</td><td style="text-align:left">F</td><td style="text-align:left">1990-01-22</td></tr><tr><td style="text-align:left">10005</td><td style="text-align:left">1955-01-21</td><td style="text-align:left">Kyoichi</td><td style="text-align:left">Maliniak</td><td style="text-align:left">M</td><td style="text-align:left">1989-09-12</td></tr><tr><td style="text-align:left">10007</td><td style="text-align:left">1957-05-23</td><td style="text-align:left">Tzvetan</td><td style="text-align:left">Zielinski</td><td style="text-align:left">F</td><td style="text-align:left">1989-02-10</td></tr><tr><td style="text-align:left">10003</td><td style="text-align:left">1959-12-03</td><td style="text-align:left">Parto</td><td style="text-align:left">Bamford</td><td style="text-align:left">M</td><td style="text-align:left">1986-08-28</td></tr><tr><td style="text-align:left">10001</td><td style="text-align:left">1953-09-02</td><td style="text-align:left">Georgi</td><td style="text-align:left">Facello</td><td style="text-align:left">M</td><td style="text-align:left">1986-06-26</td></tr><tr><td style="text-align:left">10009</td><td style="text-align:left">1952-04-19</td><td style="text-align:left">Sumant</td><td style="text-align:left">Peac</td><td style="text-align:left">F</td><td style="text-align:left">1985-02-18</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *</span><br><span class="line"><span class="keyword">from</span> employees</span><br><span class="line"><span class="keyword">where</span> emp_no&amp;<span class="number">1</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">and</span> last_name&lt;&gt;<span class="string">"Mary"</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> hire_date <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h2 id="第16题"><a href="#第16题" class="headerlink" title="第16题"></a>第16题</h2><ul><li>题目描述：统计出当前各个title类型对应的员工当前（to_date=’9999-01-01’）薪水对应的平均工资。结果给出title以及平均工资avg。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">"titles"</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">title</th><th style="text-align:left">avg</th></tr></thead><tbody><tr><td style="text-align:left">Engineer</td><td style="text-align:left">94409.0</td></tr><tr><td style="text-align:left">Senior Engineer</td><td style="text-align:left">69009.2</td></tr><tr><td style="text-align:left">Senior Staff</td><td style="text-align:left">91381.0</td></tr><tr><td style="text-align:left">Staff</td><td style="text-align:left">72527.0</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    title,</span><br><span class="line">    <span class="keyword">avg</span>(salary) <span class="keyword">as</span> <span class="keyword">avg</span></span><br><span class="line"><span class="keyword">from</span> salaries <span class="keyword">as</span> t1</span><br><span class="line"><span class="keyword">join</span> titles <span class="keyword">as</span> t2</span><br><span class="line"><span class="keyword">on</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">and</span> t1.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">and</span> t2.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> t2.title;</span><br></pre></td></tr></table></figure><h2 id="第17题"><a href="#第17题" class="headerlink" title="第17题"></a>第17题</h2><ul><li>题目描述：获取当前（to_date=’9999-01-01’）薪水第二多的员工的emp_no以及其对应的薪水salary</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th><th style="text-align:left">salary</th></tr></thead><tbody><tr><td style="text-align:left">10009</td><td style="text-align:left">94409</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    emp_no,</span><br><span class="line">    salary</span><br><span class="line"><span class="keyword">from</span> salaries</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">to_date</span>=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">and</span> salary=(</span><br><span class="line">    <span class="keyword">select</span> salary</span><br><span class="line">    <span class="keyword">from</span> salaries</span><br><span class="line">    <span class="keyword">where</span> <span class="keyword">to_date</span>=<span class="string">'9999-01-01'</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> salary</span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span></span><br><span class="line">    <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="第18题"><a href="#第18题" class="headerlink" title="第18题"></a>第18题</h2><ul><li>题目描述：查找当前薪水(to_date=’9999-01-01’)排名第二多的员工编号emp_no、薪水salary、last_name以及first_name，不准使用order by</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`birth_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`hire_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th><th style="text-align:left">salary</th><th style="text-align:left">last_name</th><th style="text-align:left">first_name</th></tr></thead><tbody><tr><td style="text-align:left">10009</td><td style="text-align:left">94409</td><td style="text-align:left">Peac</td><td style="text-align:left">Sumant</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    t2.emp_no,</span><br><span class="line">    t1.salary,</span><br><span class="line">    t2.last_name,</span><br><span class="line">    t2.first_name</span><br><span class="line"><span class="keyword">FROM</span> salaries <span class="keyword">AS</span> t1</span><br><span class="line"><span class="keyword">JOIN</span> employees <span class="keyword">AS</span> t2</span><br><span class="line"><span class="keyword">ON</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">AND</span> t1.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line"><span class="keyword">WHERE</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> t3.salary)</span><br><span class="line">    <span class="keyword">FROM</span> salaries <span class="keyword">AS</span> t3</span><br><span class="line">    <span class="keyword">WHERE</span> t3.to_date=<span class="string">'9999-01-01'</span></span><br><span class="line">    <span class="keyword">AND</span> t3.salary&gt;t1.salary</span><br><span class="line">)=<span class="number">1</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> salary;</span><br></pre></td></tr></table></figure><h2 id="第19题"><a href="#第19题" class="headerlink" title="第19题"></a>第19题</h2><ul><li>题目描述：查找所有员工的last_name和first_name以及对应的dept_name，也包括暂时没有分配部门的员工</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`departments`</span> (</span><br><span class="line"><span class="string">`dept_no`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`dept_name`</span> <span class="built_in">varchar</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`dept_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`dept_emp`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`dept_no`</span> <span class="built_in">char</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`dept_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`birth_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`hire_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">last_name</th><th style="text-align:left">first_name</th><th style="text-align:left">dept_name</th></tr></thead><tbody><tr><td style="text-align:left">Facello</td><td style="text-align:left">Georgi</td><td style="text-align:left">Marketing</td></tr><tr><td style="text-align:left">省略</td><td style="text-align:left">省略</td><td style="text-align:left">省略</td></tr><tr><td style="text-align:left">Sluis</td><td style="text-align:left">Mary</td><td style="text-align:left">NULL</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    last_name,</span><br><span class="line">    first_name,</span><br><span class="line">    dept_name</span><br><span class="line"><span class="keyword">FROM</span> employees <span class="keyword">AS</span> t1</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> dept_emp <span class="keyword">AS</span> t2</span><br><span class="line"><span class="keyword">ON</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> departments <span class="keyword">AS</span> t3</span><br><span class="line"><span class="keyword">ON</span> t2.dept_no=t3.dept_no;</span><br></pre></td></tr></table></figure><h2 id="第20题"><a href="#第20题" class="headerlink" title="第20题"></a>第20题</h2><ul><li>查找员工编号emp_no为10001其自入职以来的薪水salary涨幅值growth</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">growth</th></tr></thead><tbody><tr><td style="text-align:left">28841</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">max</span>(salary)-<span class="keyword">min</span>(salary) <span class="keyword">as</span> growth</span><br><span class="line"><span class="keyword">from</span> salaries</span><br><span class="line"><span class="keyword">where</span> emp_no=<span class="number">10001</span>;</span><br></pre></td></tr></table></figure><h2 id="第21题"><a href="#第21题" class="headerlink" title="第21题"></a>第21题</h2><ul><li>题目描述：查找所有员工自入职以来的薪水涨幅情况，给出员工编号emp_no以及其对应的薪水涨幅growth，并按照growth进行升序</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employees`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`birth_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`first_name`</span> <span class="built_in">varchar</span>(<span class="number">14</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`last_name`</span> <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`gender`</span> <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`hire_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>));</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th><th style="text-align:left">growth</th></tr></thead><tbody><tr><td style="text-align:left">10011</td><td style="text-align:left">0</td></tr><tr><td style="text-align:left">省略</td><td style="text-align:left">省略</td></tr><tr><td style="text-align:left">10010</td><td style="text-align:left">54496</td></tr><tr><td style="text-align:left">10004</td><td style="text-align:left">34003</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">emp_no,</span><br><span class="line">growth</span><br><span class="line"><span class="keyword">FROM</span>(<span class="keyword">SELECT</span></span><br><span class="line">a.emp_no,</span><br><span class="line">b.salary-a.salary <span class="keyword">AS</span> growth</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span></span><br><span class="line">t1.emp_no,</span><br><span class="line">salary</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">employees <span class="keyword">AS</span> t1,</span><br><span class="line">salaries <span class="keyword">AS</span> t2</span><br><span class="line"><span class="keyword">WHERE</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">AND</span> t1.hire_date=t2.from_date) <span class="keyword">AS</span> a,</span><br><span class="line">(<span class="keyword">SELECT</span></span><br><span class="line">t1.emp_no,</span><br><span class="line">salary</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">employees <span class="keyword">AS</span> t1,</span><br><span class="line">salaries <span class="keyword">AS</span> t2</span><br><span class="line"><span class="keyword">WHERE</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">AND</span> t2.to_date=<span class="string">'9999-01-01'</span>) <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.emp_no=b.emp_no)<span class="keyword">AS</span> c</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> c.growth</span><br></pre></td></tr></table></figure><h2 id="第22题"><a href="#第22题" class="headerlink" title="第22题"></a>第22题</h2><ul><li>对所有员工的当前(to_date=’9999-01-01’)薪水按照salary进行按照1-N的排名，相同salary并列且按照emp_no升序排列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`salaries`</span> (</span><br><span class="line"><span class="string">`emp_no`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`salary`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`from_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="string">`to_date`</span> <span class="built_in">date</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`emp_no`</span>,<span class="string">`from_date`</span>));</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">emp_no</th><th style="text-align:left">salary</th><th style="text-align:left">rank</th></tr></thead><tbody><tr><td style="text-align:left">10005</td><td style="text-align:left">94692</td><td style="text-align:left">1</td></tr><tr><td style="text-align:left">10009</td><td style="text-align:left">94409</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">10010</td><td style="text-align:left">94409</td><td style="text-align:left">2</td></tr><tr><td style="text-align:left">10001</td><td style="text-align:left">88958</td><td style="text-align:left">3</td></tr><tr><td style="text-align:left">10007</td><td style="text-align:left">88070</td><td style="text-align:left">4</td></tr><tr><td style="text-align:left">10004</td><td style="text-align:left">74057</td><td style="text-align:left">5</td></tr><tr><td style="text-align:left">10002</td><td style="text-align:left">72527</td><td style="text-align:left">6</td></tr><tr><td style="text-align:left">10003</td><td style="text-align:left">43311</td><td style="text-align:left">7</td></tr><tr><td style="text-align:left">10006</td><td style="text-align:left">43311</td><td style="text-align:left">7</td></tr><tr><td style="text-align:left">10011</td><td style="text-align:left">25828</td><td style="text-align:left">8</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">emp_no,</span><br><span class="line">growth</span><br><span class="line"><span class="keyword">FROM</span>(<span class="keyword">SELECT</span></span><br><span class="line">a.emp_no,</span><br><span class="line">b.salary-a.salary <span class="keyword">AS</span> growth</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span></span><br><span class="line">t1.emp_no,</span><br><span class="line">salary</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">employees <span class="keyword">AS</span> t1,</span><br><span class="line">salaries <span class="keyword">AS</span> t2</span><br><span class="line"><span class="keyword">WHERE</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">AND</span> t1.hire_date=t2.from_date) <span class="keyword">AS</span> a,</span><br><span class="line">(<span class="keyword">SELECT</span></span><br><span class="line">t1.emp_no,</span><br><span class="line">salary</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">employees <span class="keyword">AS</span> t1,</span><br><span class="line">salaries <span class="keyword">AS</span> t2</span><br><span class="line"><span class="keyword">WHERE</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">AND</span> t2.to_date=<span class="string">'9999-01-01'</span>) <span class="keyword">AS</span> b</span><br><span class="line"><span class="keyword">WHERE</span> a.emp_no=b.emp_no)<span class="keyword">AS</span> c</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> c.growth</span><br></pre></td></tr></table></figure><ul><li>输出示例：</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left">dept_no</th><th style="text-align:left">dept_name</th><th style="text-align:left">sum</th></tr></thead><tbody><tr><td style="text-align:left">d001</td><td style="text-align:left">Marketing</td><td style="text-align:left">24</td></tr><tr><td style="text-align:left">d002</td><td style="text-align:left">Finance</td><td style="text-align:left">14</td></tr><tr><td style="text-align:left">d003</td><td style="text-align:left">Human Resources</td><td style="text-align:left">13</td></tr><tr><td style="text-align:left">d004</td><td style="text-align:left">Production</td><td style="text-align:left">24</td></tr><tr><td style="text-align:left">d005</td><td style="text-align:left">Development</td><td style="text-align:left">25</td></tr><tr><td style="text-align:left">d006</td><td style="text-align:left">Quality Management</td><td style="text-align:left">25</td></tr></tbody></table></div><ul><li>答案：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    t1.dept_no,</span><br><span class="line">    t3.dept_name,</span><br><span class="line">    <span class="keyword">count</span>(t2.salary) <span class="keyword">as</span> <span class="keyword">sum</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    dept_emp <span class="keyword">as</span> t1,</span><br><span class="line">    salaries <span class="keyword">as</span> t2,</span><br><span class="line">    departments <span class="keyword">as</span> t3</span><br><span class="line"><span class="keyword">where</span> t3.dept_no=t1.dept_no</span><br><span class="line"><span class="keyword">and</span> t1.emp_no=t2.emp_no</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> t1.dept_no</span><br></pre></td></tr></table></figure><h2 id="第22-61题"><a href="#第22-61题" class="headerlink" title="第22-61题"></a>第22-61题</h2><p>后面太多，就不罗列上去了，附上仓库地址</p><p><a href="https://github.com/impn/nowcoder/tree/master/%E6%95%B0%E6%8D%AE%E5%BA%93SQL%E5%AE%9E%E6%88%98" target="_blank">Github仓库</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;牛客网题目 &lt;a href=&quot;https://www.nowcoder.com/ta/sql&quot;&gt;https://www.nowcoder.com/ta/sql&lt;/a&gt;&lt;br&gt;共计61道题目，现已全部完成&lt;/p&gt;&lt;h2 id=&quot;第01题&quot;&gt;&lt;a href=&quot;#第01题&quot; cl
      
    
    </summary>
    
      <category term="SQL" scheme="https://mapan.tech/cn/categories/SQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Flink运行架构</title>
    <link href="https://mapan.tech/cn/6799.html"/>
    <id>https://mapan.tech/cn/6799.html</id>
    <published>2019-06-18T12:57:34.000Z</published>
    <updated>2019-10-20T13:01:10.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flink运行时的组件"><a href="#Flink运行时的组件" class="headerlink" title="Flink运行时的组件"></a>Flink运行时的组件</h2><p>Flink运行时架构主要包括四个不同的组件，它们会在运行流处理应用程序时协同工作：作业管理器（JobManager）、资源管理器（ResourceManager）、任务管理器（TaskManager），以及分发器（Dispatcher）。因为Flink是用Java和Scala实现的，所以所有组件都会运行在Java虚拟机上。每个组件的职责如下：</p><h3 id="作业管理器（JobManager）"><a href="#作业管理器（JobManager）" class="headerlink" title="作业管理器（JobManager）"></a>作业管理器（JobManager）</h3><p>控制一个应用程序执行的主进程，也就是说，每个应用程序都会被一个不同的JobManager所控制执行。JobManager会先接收到要执行的应用程序，这个应用程序会包括：作业图（JobGraph）、逻辑数据流图（logical dataflow graph）和打包了所有的类、库和其它资源的JAR包。JobManager会把JobGraph转换成一个物理层面的数据流图，这个图被叫做“执行图”（ExecutionGraph），包含了所有可以并发执行的任务。JobManager会向资源管理器（ResourceManager）请求执行任务必要的资源，也就是任务管理器（TaskManager）上的插槽（slot）。一旦它获取到了足够的资源，就会将执行图分发到真正运行它们的TaskManager上。而在运行过程中，JobManager会负责所有需要中央协调的操作，比如说检查点（checkpoints）的协调。</p><h3 id="资源管理器（ResourceManager）"><a href="#资源管理器（ResourceManager）" class="headerlink" title="资源管理器（ResourceManager）"></a>资源管理器（ResourceManager）</h3><p>主要负责管理任务管理器（TaskManager）的插槽（slot），TaskManger插槽是Flink中定义的处理资源单元。Flink为不同的环境和资源管理工具提供了不同资源管理器，比如YARN、Mesos、K8s，以及standalone部署。当JobManager申请插槽资源时，ResourceManager会将有空闲插槽的TaskManager分配给JobManager。如果ResourceManager没有足够的插槽来满足JobManager的请求，它还可以向资源提供平台发起会话，以提供启动TaskManager进程的容器。另外，ResourceManager还负责终止空闲的TaskManager，释放计算资源。</p><h3 id="任务管理器（TaskManager）"><a href="#任务管理器（TaskManager）" class="headerlink" title="任务管理器（TaskManager）"></a>任务管理器（TaskManager）</h3><p>Flink中的工作进程。通常在Flink中会有多个TaskManager运行，每一个TaskManager都包含了一定数量的插槽（slots）。插槽的数量限制了TaskManager能够执行的任务数量。启动之后，TaskManager会向资源管理器注册它的插槽；收到资源管理器的指令后，TaskManager就会将一个或者多个插槽提供给JobManager调用。JobManager就可以向插槽分配任务（tasks）来执行了。在执行过程中，一个TaskManager可以跟其它运行同一应用程序的TaskManager交换数据。</p><h3 id="分发器（Dispatcher）"><a href="#分发器（Dispatcher）" class="headerlink" title="分发器（Dispatcher）"></a>分发器（Dispatcher）</h3><p>可以跨作业运行，它为应用提交提供了REST接口。当一个应用被提交执行时，分发器就会启动并将应用移交给一个JobManager。由于是REST接口，所以Dispatcher可以作为集群的一个HTTP接入点，这样就能够不受防火墙阻挡。Dispatcher也会启动一个Web UI，用来方便地展示和监控作业执行的信息。Dispatcher在架构中可能并不是必需的，这取决于应用提交运行的方式。</p><h2 id="任务提交流程"><a href="#任务提交流程" class="headerlink" title="任务提交流程"></a>任务提交流程</h2><p>我们来看看当一个应用提交执行时，Flink的各个组件是如何交互协作的：</p><p><img src="/cn/6799/clip_image001.png" alt="img"></p><p>图 任务提交和组件交互流程</p><p>上图是从一个较为高层级的视角，来看应用中各组件的交互协作。如果部署的集群环境不同（例如YARN，Mesos，Kubernetes，standalone等），其中一些步骤可以被省略，或是有些组件会运行在同一个JVM进程中。</p><p>具体地，如果我们将Flink集群部署到YARN上，那么就会有如下的提交流程：</p><p><img src="/cn/6799/clip_image002.jpg" alt="img"></p><p>图 Yarn模式任务提交流程</p><p>Flink任务提交后，Client向HDFS上传Flink的Jar包和配置，之后向Yarn ResourceManager提交任务，ResourceManager分配Container资源并通知对应的NodeManager启动ApplicationMaster，ApplicationMaster启动后加载Flink的Jar包和配置构建环境，然后启动JobManager，之后ApplicationMaster向ResourceManager申请资源启动TaskManager，ResourceManager分配Container资源后，由ApplicationMaster通知资源所在节点的NodeManager启动TaskManager，NodeManager加载Flink的Jar包和配置构建环境并启动TaskManager，TaskManager启动后向JobManager发送心跳包，并等待JobManager向其分配任务。</p><h2 id="任务调度原理"><a href="#任务调度原理" class="headerlink" title="任务调度原理"></a>任务调度原理</h2><p><img src="/cn/6799/clip_image003.png" alt="img"></p><p>图 任务调度原理</p><p>客户端不是运行时和程序执行的一部分，但它用于准备并发送dataflow(JobGraph)给Master(JobManager)，然后，客户端断开连接或者维持连接以等待接收计算结果。</p><p>当 Flink 集群启动后，首先会启动一个 JobManger 和一个或多个的 TaskManager。由 Client 提交任务给 JobManager，JobManager 再调度任务到各个 TaskManager 去执行，然后 TaskManager 将心跳和统计信息汇报给 JobManager。TaskManager 之间以流的形式进行数据的传输。上述三者均为独立的 JVM 进程。</p><p><strong>Client</strong> 为提交 Job 的客户端，可以是运行在任何机器上（与 JobManager 环境连通即可）。提交 Job 后，Client 可以结束进程（Streaming的任务），也可以不结束并等待结果返回。</p><p><strong>JobManager</strong> 主要负责调度 Job 并协调 Task 做 checkpoint，职责上很像 Storm 的 Nimbus。从 Client 处接收到 Job 和 JAR 包等资源后，会生成优化后的执行计划，并以 Task 的单元调度到各个 TaskManager 去执行。</p><p><strong>TaskManager</strong> 在启动的时候就设置好了槽位数（Slot），每个 slot 能启动一个 Task，Task 为线程。从 JobManager 处接收需要部署的 Task，部署启动后，与自己的上游建立 Netty 连接，接收数据并处理。</p><h3 id="TaskManger与Slots"><a href="#TaskManger与Slots" class="headerlink" title="TaskManger与Slots"></a>TaskManger与Slots</h3><p>Flink中每一个worker(TaskManager)都是一个<strong>JVM进程</strong>，它可能会在<strong>独立的线程</strong>上执行一个或多个subtask。为了控制一个worker能接收多少个task，worker通过task slot来进行控制（一个worker至少有一个task slot）。</p><p>每个task slot表示TaskManager拥有资源的<strong>一个固定大小的子集</strong>。假如一个TaskManager有三个slot，那么它会将其管理的内存分成三份给各个slot。资源slot化意味着一个subtask将不需要跟来自其他job的subtask竞争被管理的内存，取而代之的是它将拥有一定数量的内存储备。需要注意的是，这里不会涉及到CPU的隔离，slot目前仅仅用来隔离task的受管理的内存。</p><p>通过调整task slot的数量，允许用户定义subtask之间如何互相隔离。如果一个TaskManager一个slot，那将意味着每个task group运行在独立的JVM中（该JVM可能是通过一个特定的容器启动的），而一个TaskManager多个slot意味着更多的subtask可以共享同一个JVM。而在同一个JVM进程中的task将共享TCP连接（基于多路复用）和心跳消息。它们也可能共享数据集和数据结构，因此这减少了每个task的负载。</p><p><img src="/cn/6799/clip_image004.png" alt="img"></p><p>图 TaskManager与Slot</p><p><img src="/cn/6799/clip_image005.jpg" alt="img"></p><p>图 子任务共享Slot</p><p>默认情况下，Flink允许子任务共享slot，即使它们是不同任务的子任务（前提是它们来自同一个job）。 这样的结果是，一个slot可以保存作业的整个管道。</p><p><strong>Task Slot是静态的概念，是指TaskManager具有的并发执行能力</strong>，可以通过参数taskmanager.numberOfTaskSlots进行配置；而<strong>并行度parallelism是动态概念，即TaskManager运行程序时实际使用的并发能力</strong>，可以通过参数parallelism.default进行配置。</p><p>也就是说，假设一共有3个TaskManager，每一个TaskManager中的分配3个TaskSlot，也就是每个TaskManager可以接收3个task，一共9个TaskSlot，如果我们设置parallelism.default=1，即运行程序默认的并行度为1，9个TaskSlot只用了1个，有8个空闲，因此，设置合适的并行度才能提高效率。</p><p><img src="/cn/6799/clip_image006.jpg" alt="说明: https://img-blog.csdn.net/20170824162738505?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTY4MjIzNDI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><p><img src="/cn/6799/clip_image007.jpg" alt="说明: https://img-blog.csdn.net/20170824162117401?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTY4MjIzNDI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center"></p><h3 id="程序与数据流（DataFlow）"><a href="#程序与数据流（DataFlow）" class="headerlink" title="程序与数据流（DataFlow）"></a><strong>程序与数据流（DataFlow）</strong></h3><p><img src="/cn/6799/clip_image008.png" alt="img"></p><p>所有的Flink程序都是由三部分组成的： <strong>Source</strong> 、<strong>Transformation</strong>和<strong>Sink</strong>。</p><p>Source负责读取数据源，Transformation利用各种算子进行处理加工，Sink负责输出。</p><p>在运行时，Flink上运行的程序会被映射成“逻辑数据流”（dataflows），它包含了这三部分。<strong>每一个dataflow以一个或多个sources开始以一个或多个sinks结束</strong>。dataflow类似于任意的有向无环图（DAG）。在大部分情况下，程序中的转换运算（transformations）跟dataflow中的算子（operator）是一一对应的关系，但有时候，一个transformation可能对应多个operator。</p><p><img src="/cn/6799/clip_image009.png" alt="img"></p><p>图 程序与数据流</p><h3 id="执行图（ExecutionGraph）"><a href="#执行图（ExecutionGraph）" class="headerlink" title="执行图（ExecutionGraph）"></a><strong>执行图（ExecutionGraph）</strong></h3><p>由Flink程序直接映射成的数据流图是StreamGraph，也被称为逻辑流图，因为它们表示的是计算逻辑的高级视图。为了执行一个流处理程序，Flink需要将逻辑流图转换为物理数据流图（也叫执行图），详细说明程序的执行方式。</p><p>Flink 中的执行图可以分成四层：StreamGraph -&gt; JobGraph -&gt; ExecutionGraph -&gt; 物理执行图。</p><p><strong>StreamGraph</strong>：是根据用户通过 Stream API 编写的代码生成的最初的图。用来表示程序的拓扑结构。</p><p><strong>JobGraph</strong>：StreamGraph经过优化后生成了 JobGraph，提交给 JobManager 的数据结构。主要的优化为，将多个符合条件的节点 chain 在一起作为一个节点，这样可以减少数据在节点之间流动所需要的序列化/反序列化/传输消耗。</p><p><strong>ExecutionGraph</strong>：JobManager 根据 JobGraph 生成ExecutionGraph。ExecutionGraph是JobGraph的并行化版本，是调度层最核心的数据结构。</p><p><strong>物理执行图</strong>：JobManager 根据 ExecutionGraph 对 Job 进行调度后，在各个TaskManager 上部署 Task 后形成的“图”，并不是一个具体的数据结构。</p><p><img src="/cn/6799/clip_image010.jpg" alt="img"></p><h3 id="并行度（Parallelism）"><a href="#并行度（Parallelism）" class="headerlink" title="并行度（Parallelism）"></a><strong>并行度（Parallelism）</strong></h3><p>Flink程序的执行具有<strong>并行、分布式</strong>的特性。</p><p>在执行过程中，一个流（stream）包含一个或多个分区（stream partition），而每一个算子（operator）可以包含一个或多个子任务（operator subtask），这些子任务在不同的线程、不同的物理机或不同的容器中彼此互不依赖地执行。</p><p><strong>一个特定算子的子任务（subtask）的个数被称之为其并行度（parallelism）</strong>。一般情况下，一个流程序的并行度，可以认为就是其所有算子中最大的并行度。一个程序中，不同的算子可能具有不同的并行度。</p><p><img src="/cn/6799/clip_image011.png" alt="img"></p><p>图 并行数据流</p><p>Stream在算子之间传输数据的形式可以是one-to-one(forwarding)的模式也可以是redistributing的模式，具体是哪一种形式，取决于算子的种类。</p><p><strong>One-to-one</strong>：stream(比如在source和map operator之间)维护着分区以及元素的顺序。那意味着map 算子的子任务看到的元素的个数以及顺序跟source 算子的子任务生产的元素的个数、顺序相同，map、fliter、flatMap等算子都是one-to-one的对应关系。</p><h4 id="类似于spark中的窄依赖"><a href="#类似于spark中的窄依赖" class="headerlink" title="类似于spark中的窄依赖"></a>类似于spark中的<strong>窄依赖</strong></h4><p><strong>Redistributing</strong>：stream(map()跟keyBy/window之间或者keyBy/window跟sink之间)的分区会发生改变。每一个算子的子任务依据所选择的transformation发送数据到不同的目标任务。例如，keyBy() 基于hashCode重分区、broadcast和rebalance会随机重新分区，这些算子都会引起redistribute过程，而redistribute过程就类似于Spark中的shuffle过程。</p><h4 id="类似于spark中的宽依赖"><a href="#类似于spark中的宽依赖" class="headerlink" title="类似于spark中的宽依赖"></a>类似于spark中的<strong>宽依赖</strong></h4><h3 id="任务链（Operator-Chains）"><a href="#任务链（Operator-Chains）" class="headerlink" title="任务链（Operator Chains）"></a><strong>任务链（Operator Chains）</strong></h3><p><strong>相同并行度的one to one操作</strong>，Flink这样相连的算子链接在一起形成一个task，原来的算子成为里面的一部分。将算子链接成task是非常有效的优化：它能减少线程之间的切换和基于缓存区的数据交换，在减少时延的同时提升吞吐量。链接的行为可以在编程API中进行指定。</p><p><img src="/cn/6799/clip_image012.jpg" alt="img"></p><p>图 task与operator chains</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Flink运行时的组件&quot;&gt;&lt;a href=&quot;#Flink运行时的组件&quot; class=&quot;headerlink&quot; title=&quot;Flink运行时的组件&quot;&gt;&lt;/a&gt;Flink运行时的组件&lt;/h2&gt;&lt;p&gt;Flink运行时架构主要包括四个不同的组件，它们会在运行流处理应用程
      
    
    </summary>
    
      <category term="Flink" scheme="https://mapan.tech/cn/categories/Flink/"/>
    
    
  </entry>
  
  <entry>
    <title>初识Flink</title>
    <link href="https://mapan.tech/cn/d552.html"/>
    <id>https://mapan.tech/cn/d552.html</id>
    <published>2019-05-20T06:52:06.000Z</published>
    <updated>2019-10-20T12:54:02.254Z</updated>
    
    <content type="html"><![CDATA[<p>Flink起源于Stratosphere项目，Stratosphere是在2010~2014年由3所地处柏林的大学和欧洲的一些其他的大学共同进行的研究项目，2014年4月Stratosphere的代码被复制并捐赠给了Apache软件基金会，参加这个孵化项目的初始成员是Stratosphere系统的核心开发人员，2014年12月，Flink一跃成为Apache软件基金会的顶级项目。</p><p>在德语中，Flink一词表示快速和灵巧，项目采用一只松鼠的彩色图案作为logo，这不仅是因为松鼠具有快速和灵巧的特点，还因为柏林的松鼠有一种迷人的红棕色，而Flink的松鼠logo拥有可爱的尾巴，尾巴的颜色与Apache软件基金会的logo颜色相呼应，也就是说，这是一只Apache风格的松鼠。</p><p><img src="/cn/d552/clip_image001.jpg" alt="img"></p><p><img src="/cn/d552/clip_image002.jpg" alt="img"></p><p>Flink Logo</p><p>Flink项目的理念是：“Apache Flink是为分布式、高性能、随时可用以及准确的流处理应用程序打造的开源流处理框架”。</p><p>Apache Flink是一个框架和分布式处理引擎，用于对无界和有界数据流进行有状态计算。Flink被设计在所有常见的集群环境中运行，以内存执行速度和任意规模来执行计算。</p><p><img src="/cn/d552/clip_image003.jpg" alt="img"></p><p>1.2 Flink的重要特点</p><p><strong>1.2.1</strong> <strong>事件驱动型**</strong>(Event-driven)**</p><p>事件驱动型应用是一类具有状态的应用，它从一个或多个事件流提取数据，并根据到来的事件触发计算、状态更新或其他外部动作。比较典型的就是以kafka为代表的消息队列几乎都是事件驱动型应用。</p><p>与之不同的就是SparkStreaming微批次，如图：</p><p><img src="/cn/d552/clip_image004.jpg" alt="img"></p><p>事件驱动型：</p><p><img src="/cn/d552/clip_image005.png" alt="img"></p><p><strong>1.2.2</strong> <strong>流与批的世界观</strong></p><p><strong>批处理</strong>的特点是有界、持久、大量，非常适合需要访问全套记录才能完成的计算工作，一般用于离线统计。</p><p><strong>流处理</strong>的特点是无界、实时, 无需针对整个数据集执行操作，而是对通过系统传输的每个数据项执行操作，一般用于实时统计。</p><p>在spark的世界观中，一切都是由批次组成的，离线数据是一个大批次，而实时数据是由一个一个无限的小批次组成的。</p><p>而在flink的世界观中，一切都是由流组成的，离线数据是有界限的流，实时数据是一个没有界限的流，这就是所谓的有界流和无界流。</p><p><strong>无界数据流</strong>：无界数据流有一个开始但是没有结束，它们不会在生成时终止并提供数据，必须连续处理无界流，也就是说必须在获取后立即处理event。对于无界数据流我们无法等待所有数据都到达，因为输入是无界的，并且在任何时间点都不会完成。处理无界数据通常要求以特定顺序（例如事件发生的顺序）获取event，以便能够推断结果完整性。</p><p><strong>有界数据流</strong>：有界数据流有明确定义的开始和结束，可以在执行任何计算之前通过获取所有数据来处理有界流，处理有界流不需要有序获取，因为可以始终对有界数据集进行排序，有界流的处理也称为批处理。</p><p><img src="/cn/d552/clip_image006.jpg" alt="img"></p><p>这种以流为世界观的架构，获得的最大好处就是具有极低的延迟。</p><p><strong>1.2.3</strong> <strong>分层**</strong>api**</p><p><img src="/cn/d552/clip_image007.jpg" alt="img"></p><p>最底层级的抽象仅仅提供了有状态流，它将通过过程函数（Process Function）被嵌入到DataStream API中。底层过程函数（Process Function） 与 DataStream API 相集成，使其可以对某些特定的操作进行底层的抽象，它允许用户可以自由地处理来自一个或多个数据流的事件，并使用一致的容错的状态。除此之外，用户可以注册事件时间并处理时间回调，从而使程序可以处理复杂的计算。</p><p>实际上，大多数应用并不需要上述的底层抽象，而是针对核心API（Core APIs） 进行编程，比如DataStream API（有界或无界流数据）以及DataSet API（有界数据集）。这些API为数据处理提供了通用的构建模块，比如由用户定义的多种形式的转换（transformations），连接（joins），聚合（aggregations），窗口操作（windows）等等。DataSet API 为有界数据集提供了额外的支持，例如循环与迭代。这些API处理的数据类型以类（classes）的形式由各自的编程语言所表示。</p><p>Table API 是以表为中心的声明式编程，其中表可能会动态变化（在表达流数据时）。Table API遵循（扩展的）关系模型：表有二维数据结构（schema）（类似于关系数据库中的表），同时API提供可比较的操作，例如select、project、join、group-by、aggregate等。Table API程序声明式地定义了什么逻辑操作应该执行，而不是准确地确定这些操作代码的看上去如何。</p><p>尽管Table API可以通过多种类型的用户自定义函数（UDF）进行扩展，其仍不如核心API更具表达能力，但是使用起来却更加简洁（代码量更少）。除此之外，Table API程序在执行之前会经过内置优化器进行优化。</p><p>你可以在表与 DataStream/DataSet 之间无缝切换，以允许程序将 Table API 与 DataStream 以及 DataSet 混合使用。</p><p>Flink提供的最高层级的抽象是 SQL 。这一层抽象在语法与表达能力上与 Table API 类似，但是是以SQL查询表达式的形式表现程序。SQL抽象与Table API交互密切，同时SQL查询可以直接在Table API定义的表上执行。</p><p>目前Flink作为批处理还不是主流，不如Spark成熟，所以DataSet使用的并不是很多。Flink Table API和Flink SQL也并不完善，大多都由各大厂商自己定制。所以我们主要学习DataStream API的使用。实际上Flink作为最接近Google DataFlow模型的实现，是流批统一的观点，所以基本上使用DataStream就可以了。</p><p>Flink几大模块</p><ul><li>Flink Table &amp; SQL(还没开发完)</li><li>Flink Gelly(图计算)</li><li>Flink CEP(复杂事件处理)</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Flink起源于Stratosphere项目，Stratosphere是在2010~2014年由3所地处柏林的大学和欧洲的一些其他的大学共同进行的研究项目，2014年4月Stratosphere的代码被复制并捐赠给了Apache软件基金会，参加这个孵化项目的初始成员是Str
      
    
    </summary>
    
      <category term="Flink" scheme="https://mapan.tech/cn/categories/Flink/"/>
    
    
  </entry>
  
  <entry>
    <title>Frp内网穿透实现minecraft远程联机</title>
    <link href="https://mapan.tech/cn/6b1f.html"/>
    <id>https://mapan.tech/cn/6b1f.html</id>
    <published>2019-01-10T02:06:42.000Z</published>
    <updated>2019-10-20T11:46:04.562Z</updated>
    
    <content type="html"><![CDATA[<p>过年想在家玩minecraft，公网多人游戏，理论上完全可行，自己琢磨了一下，记录如何配置内网穿透</p><blockquote><ol><li>VPS搭建minecraft服务器。</li><li>内网穿透，VPS做TCP端口转发。</li></ol></blockquote><p>第一个方案，服务器端架设成功了，但是不可以加mods和插件。另外由于服务器配置太低，运行一段时间就会崩溃。以失败告终。<br>第二个方案，花点时间琢磨了一下，发现可行。下文为配置方法</p><h2 id="实现功能和原理"><a href="#实现功能和原理" class="headerlink" title="实现功能和原理"></a>实现功能和原理</h2><p>minecraft公网联机，公网服务器安装Frps，来实现转发服务。内网主机安装Frpc，来实现穿透。</p><h2 id="配置前准备"><a href="#配置前准备" class="headerlink" title="配置前准备"></a>配置前准备</h2><blockquote><p>公网服务器一台 ,假设我的服务器IP是155.155.155.156<br>内网电脑一台<br>域名一个 ，假设我的域名是baidu.com</p></blockquote><h2 id="解析域名到公网服务器的IP"><a href="#解析域名到公网服务器的IP" class="headerlink" title="解析域名到公网服务器的IP"></a>解析域名到公网服务器的IP</h2><p>添加一条A记录，主机记录自定义，我写的是router<br><img src="https://ws1.sinaimg.cn/mw690/005vwoCyly1fz1c4jfiocj30oe07ldgm.jpg" alt></p><h2 id="安装Frp"><a href="#安装Frp" class="headerlink" title="安装Frp"></a>安装Frp</h2><p><a href="https://github.com/fatedier/frp">项目地址</a></p><h3 id="公网服务器端"><a href="#公网服务器端" class="headerlink" title="公网服务器端"></a>公网服务器端</h3><p>找到与自己服务器和本地主机对应版本，下载即可。<br>我的VPS是搬瓦工的低配，如下<br><img src="https://ws1.sinaimg.cn/mw690/005vwoCyly1fz1cb2jvukj30j00dmjs8.jpg" alt><br>安装的是CentOS6_32位系统，所以就下载Linux32位的软件 frp_x.x.x_linux_386.tar.gz<br>下载并解压后得到一个文件夹，里面有七个文件，对于公网服务器来说只有frps和frps.ini是我们必需的。</p><h4 id="配置frps-ini"><a href="#配置frps-ini" class="headerlink" title="配置frps.ini"></a>配置frps.ini</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#frps.ini</span><br><span class="line">[common]</span><br><span class="line">bind_port = 7000</span><br><span class="line">bind_udp_port = 7001</span><br><span class="line">vhost_http_port = 80</span><br><span class="line">vhost_https_port = 10443</span><br></pre></td></tr></table></figure><p>3，4两行是必须配置的，端口可以自定义，5，6两行是其他的服务，可以照抄或者不予理会。<br>使用下面命令运行<br><code>./frps -c ./frps.ini</code><br>我相信你可以通过Screen插件让此服务保持后台运行，此服务建议一直运行。</p><h3 id="内网电脑端"><a href="#内网电脑端" class="headerlink" title="内网电脑端"></a>内网电脑端</h3><p>打开minecraft游戏，开启局域网联机，生成一个端口号，记下来。</p><p>找到与自己电脑对应的版本，下载即可。我本地电脑win_x64系统，所以下载frp_0.22.0_windows_amd64.zip。<br>和之前一样解压得到7个文件，只有frpc.exe和frpc.ini是我们必需的。</p><h4 id="配置frpc-ini"><a href="#配置frpc-ini" class="headerlink" title="配置frpc.ini"></a>配置frpc.ini</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line"></span><br><span class="line"># x.x.x.x为公网服务器IP地址，只需设置一次</span><br><span class="line">server_addr = x.x.x.x</span><br><span class="line"></span><br><span class="line"># server_port填写上面配置的bind_port值，只需设置一次</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[range:test_tcp]</span><br><span class="line">type = tcp</span><br><span class="line"># local_ip填写我们电脑的局域网ip，每次开启游戏需要修改。</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line"></span><br><span class="line"># local_port填写刚才记下的minecraft生成的端口号，每次开启游戏需要修改。</span><br><span class="line">local_port = 10240</span><br><span class="line"></span><br><span class="line">#这里自定义，建议填写五位数的端口号，不超过65535，小伙伴开启游戏时候填这个。只需设置一次</span><br><span class="line">remote_port = 25600</span><br></pre></td></tr></table></figure><p>双击frpc.exe,弹出一个黑框，把这个黑框最小化后台。<br><img src="https://ws1.sinaimg.cn/mw690/005vwoCyly1fz1bwq6j6jj30kw08k75f.jpg" alt></p><p>在远方的小伙伴，开启游戏，选择多人游戏，直接连接，输入router.baidu.com:25600，加入服务器玩耍吧。<br><img src="https://ws1.sinaimg.cn/mw690/005vwoCyly1fz1c60athuj30nq0e4acx.jpg" alt><br>【注】：router为设置的主机记录，baidu.com为自己的域名，25600为上面设置的remote_port端口号。</p><hr><p>以后每次开游戏，先打开游戏生成端口号，然后修改frpc.ini，打开frpc.exe并后台，小伙伴联机即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;过年想在家玩minecraft，公网多人游戏，理论上完全可行，自己琢磨了一下，记录如何配置内网穿透&lt;/p&gt;&lt;blockquote&gt;&lt;ol&gt;&lt;li&gt;VPS搭建minecraft服务器。&lt;/li&gt;&lt;li&gt;内网穿透，VPS做TCP端口转发。&lt;/li&gt;&lt;/ol&gt;&lt;/blockquo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SparkSQL基本操作</title>
    <link href="https://mapan.tech/cn/bfb1.html"/>
    <id>https://mapan.tech/cn/bfb1.html</id>
    <published>2018-08-20T08:09:22.000Z</published>
    <updated>2019-10-20T12:41:47.039Z</updated>
    
    <content type="html"><![CDATA[<p>首先进入spark-shell<br></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ bin/spark-shell</span><br><span class="line"><span class="type">Using</span> <span class="type">Spark</span><span class="symbol">'s</span> <span class="keyword">default</span> log4j profile: org/apache/spark/log4j-defaults.properties</span><br><span class="line"><span class="type">Setting</span> <span class="keyword">default</span> log level to <span class="string">"WARN"</span>.</span><br><span class="line"><span class="type">To</span> adjust logging level use sc.setLogLevel(newLevel). <span class="type">For</span> <span class="type">SparkR</span>, use setLogLevel(newLevel).</span><br><span class="line"><span class="type">Spark</span> context <span class="type">Web</span> <span class="type">UI</span> available at http:<span class="comment">//192.168.1.102:4040</span></span><br><span class="line"><span class="type">Spark</span> context available as <span class="symbol">'s</span>c' (master = local[*], app id = local<span class="number">-1569915192693</span>).</span><br><span class="line"><span class="type">Spark</span> session available as <span class="symbol">'spar</span>k'.</span><br><span class="line"><span class="type">Welcome</span> to</span><br><span class="line">      ____              __</span><br><span class="line">     / __/__  ___ _____/ /__</span><br><span class="line">    _\ \/ _ \/ _ `/ __/  <span class="symbol">'_</span>/</span><br><span class="line">   /___/ .__/\_,_/_/ /_/\_\   version <span class="number">2.1</span><span class="number">.1</span></span><br><span class="line">      /_/</span><br><span class="line">         </span><br><span class="line"><span class="type">Using</span> <span class="type">Scala</span> version <span class="number">2.11</span><span class="number">.8</span> (<span class="type">Java</span> <span class="type">HotSpot</span>(<span class="type">TM</span>) <span class="number">64</span>-<span class="type">Bit</span> <span class="type">Server</span> <span class="type">VM</span>, <span class="type">Java</span> <span class="number">1.8</span><span class="number">.0</span>_144)</span><br><span class="line"><span class="type">Type</span> in expressions to have them evaluated.</span><br><span class="line"><span class="type">Type</span> :help <span class="keyword">for</span> more information.</span><br></pre></td></tr></table></figure><p></p><h2 id="创建DataFrame"><a href="#创建DataFrame" class="headerlink" title="创建DataFrame"></a>创建DataFrame</h2><ul><li>从json文件中创建DataFrame</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> df = spark.read.json(<span class="string">"./examples/src/main/resources/people.json"</span>)</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [age: bigint, name: string]</span><br><span class="line"></span><br><span class="line">scala&gt; df.show</span><br><span class="line">+----+-------+</span><br><span class="line">| age|   name|</span><br><span class="line">+----+-------+</span><br><span class="line">|<span class="literal">null</span>|<span class="type">Michael</span>|</span><br><span class="line">|  <span class="number">30</span>|   <span class="type">Andy</span>|</span><br><span class="line">|  <span class="number">19</span>| <span class="type">Justin</span>|</span><br><span class="line">+----+-------+</span><br></pre></td></tr></table></figure><ul><li>对DataFrame创建一个临时表</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; df.createOrReplaceTempView(<span class="string">"people"</span>)</span><br><span class="line">scala&gt; spark.sql(<span class="string">"select * from people"</span>).show</span><br><span class="line">+----+-------+</span><br><span class="line">| age|   name|</span><br><span class="line">+----+-------+</span><br><span class="line">|<span class="literal">null</span>|<span class="type">Michael</span>|</span><br><span class="line">|  <span class="number">30</span>|   <span class="type">Andy</span>|</span><br><span class="line">|  <span class="number">19</span>| <span class="type">Justin</span>|</span><br><span class="line">+----+-------+</span><br></pre></td></tr></table></figure><h2 id="方法一-RDDtoDF创建DataFrame"><a href="#方法一-RDDtoDF创建DataFrame" class="headerlink" title="方法一: RDDtoDF创建DataFrame"></a>方法一: RDDtoDF创建DataFrame</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">import</span> spark.implicits._</span><br><span class="line"><span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> peopleRDD = sc.textFile(<span class="string">"./examples/src/main/resources/people.txt"</span>)</span><br><span class="line">peopleRDD: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">String</span>] = ./examples/src/main/resources/people.txt <span class="type">MapPartitionsRDD</span>[<span class="number">34</span>] at textFile at &lt;console&gt;:<span class="number">27</span></span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> df = peopleRDD.map&#123;x=&gt;<span class="keyword">val</span> para=x.split(<span class="string">","</span>);(para(<span class="number">0</span>),para(<span class="number">1</span>).trim.toInt)&#125;.toDF(<span class="string">"name"</span>,<span class="string">"age"</span>)</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [name: string, age: int]</span><br><span class="line"></span><br><span class="line">scala&gt; df.show</span><br><span class="line">+-------+---+</span><br><span class="line">|   name|age|</span><br><span class="line">+-------+---+</span><br><span class="line">|<span class="type">Michael</span>| <span class="number">29</span>|</span><br><span class="line">|   <span class="type">Andy</span>| <span class="number">30</span>|</span><br><span class="line">| <span class="type">Justin</span>| <span class="number">19</span>|</span><br><span class="line">+-------+---+</span><br></pre></td></tr></table></figure><h3 id="方法二-样例类转DataFrame-常用方式"><a href="#方法二-样例类转DataFrame-常用方式" class="headerlink" title="方法二 : 样例类转DataFrame(常用方式)"></a>方法二 : 样例类转DataFrame(常用方式)</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">people</span>(<span class="params">name:<span class="type">String</span>,age:<span class="type">Int</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">people</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span> <span class="title">peopleRDD</span>.<span class="title">map</span></span>&#123;x=&gt;<span class="keyword">val</span> para=x.split(<span class="string">","</span>);people(para(<span class="number">0</span>),para(<span class="number">1</span>).trim.toInt) &#125;.toDF</span><br><span class="line">res21: org.apache.spark.sql.<span class="type">DataFrame</span> = [name: string, age: int]</span><br></pre></td></tr></table></figure><h3 id="方法三-通过schema创建DataFrame"><a href="#方法三-通过schema创建DataFrame" class="headerlink" title="方法三: 通过schema创建DataFrame"></a>方法三: 通过schema创建DataFrame</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入所需的类型</span></span><br><span class="line">scala&gt; <span class="keyword">import</span> org.apache.spark.sql.types._</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.types._</span><br><span class="line"><span class="comment">// 创建Schema</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> structType: <span class="type">StructType</span> = <span class="type">StructType</span>(<span class="type">StructField</span>(<span class="string">"name"</span>, <span class="type">StringType</span>) :: <span class="type">StructField</span>(<span class="string">"age"</span>, <span class="type">IntegerType</span>) :: <span class="type">Nil</span>)</span><br><span class="line">structType: org.apache.spark.sql.types.<span class="type">StructType</span> = <span class="type">StructType</span>(<span class="type">StructField</span>(name,<span class="type">StringType</span>,<span class="literal">true</span>), <span class="type">StructField</span>(age,<span class="type">IntegerType</span>,<span class="literal">true</span>))</span><br><span class="line"><span class="comment">// 导入所需的类型</span></span><br><span class="line">scala&gt; <span class="keyword">import</span> org.apache.spark.sql.<span class="type">Row</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">Row</span></span><br><span class="line"><span class="comment">// 根据给定的类型创建二元组RDD</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> data = peopleRDD.map&#123; x =&gt; <span class="keyword">val</span> para = x.split(<span class="string">","</span>);<span class="type">Row</span>(para(<span class="number">0</span>),para(<span class="number">1</span>).trim.toInt)&#125;</span><br><span class="line">data: org.apache.spark.rdd.<span class="type">RDD</span>[org.apache.spark.sql.<span class="type">Row</span>] = <span class="type">MapPartitionsRDD</span>[<span class="number">41</span>] at map at &lt;console&gt;:<span class="number">33</span></span><br><span class="line"><span class="comment">// 根据数据及给定的schema创建DataFrame</span></span><br><span class="line">scala&gt; <span class="keyword">val</span> dataFrame = spark.createDataFrame(data, structType)</span><br><span class="line">dataFrame: org.apache.spark.sql.<span class="type">DataFrame</span> = [name: string, age: int]</span><br></pre></td></tr></table></figure><h2 id="创建DataSet"><a href="#创建DataSet" class="headerlink" title="创建DataSet"></a>创建DataSet</h2><h3 id="通过样例类创建DataSet"><a href="#通过样例类创建DataSet" class="headerlink" title="通过样例类创建DataSet"></a>通过样例类创建DataSet</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Long</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span> <span class="title">val</span> <span class="title">caseClassDS</span> </span>= <span class="type">Seq</span>(<span class="type">Person</span>(<span class="string">"Andy"</span>, <span class="number">32</span>)).toDS()</span><br><span class="line">caseClassDS: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">Person</span>] = [name: string, age: bigint]</span><br><span class="line"></span><br><span class="line">scala&gt; caseClassDS.show</span><br><span class="line">+----+---+</span><br><span class="line">|name|age|</span><br><span class="line">+----+---+</span><br><span class="line">|<span class="type">Andy</span>| <span class="number">32</span>|</span><br><span class="line">+----+---+</span><br></pre></td></tr></table></figure><h3 id="从RDD创建DataSet"><a href="#从RDD创建DataSet" class="headerlink" title="从RDD创建DataSet"></a>从RDD创建DataSet</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> peopleRDD = sc.textFile(<span class="string">"examples/src/main/resources/people.txt"</span>)</span><br><span class="line">peopleRDD: org.apache.spark.rdd.<span class="type">RDD</span>[<span class="type">String</span>] = examples/src/main/resources/people.txt <span class="type">MapPartitionsRDD</span>[<span class="number">1</span>] at textFile at &lt;console&gt;:<span class="number">24</span></span><br><span class="line"></span><br><span class="line">scala&gt; peopleRDD.map(line =&gt; &#123;<span class="keyword">val</span> para = line.split(<span class="string">","</span>);<span class="type">Person</span>(para(<span class="number">0</span>),para(<span class="number">1</span>).trim.toInt)&#125;).toDS</span><br><span class="line">res1: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">Person</span>] = [name: string, age: bigint]</span><br><span class="line"></span><br><span class="line">scala&gt; res1.show</span><br><span class="line">+-------+---+</span><br><span class="line">|   name|age|</span><br><span class="line">+-------+---+</span><br><span class="line">|<span class="type">Michael</span>| <span class="number">29</span>|</span><br><span class="line">|   <span class="type">Andy</span>| <span class="number">30</span>|</span><br><span class="line">| <span class="type">Justin</span>| <span class="number">19</span>|</span><br><span class="line">+-------+---+</span><br></pre></td></tr></table></figure><h2 id="DataFrame与DataSet的互相转换"><a href="#DataFrame与DataSet的互相转换" class="headerlink" title="DataFrame与DataSet的互相转换"></a>DataFrame与DataSet的互相转换</h2><h3 id="DataFreame转DataSet"><a href="#DataFreame转DataSet" class="headerlink" title="DataFreame转DataSet"></a>DataFreame转DataSet</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">val</span> df = spark.read.json(<span class="string">"examples/src/main/resources/people.json"</span>)</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [age: bigint, name: string]                </span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Long</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span> <span class="title">df</span>.<span class="title">as</span>[<span class="type">Person</span>]</span></span><br><span class="line"><span class="class"><span class="title">res3</span></span>: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">Person</span>] = [age: bigint, name: string]</span><br><span class="line"></span><br><span class="line">scala&gt; res3.show</span><br><span class="line">+----+-------+</span><br><span class="line">| age|   name|</span><br><span class="line">+----+-------+</span><br><span class="line">|<span class="literal">null</span>|<span class="type">Michael</span>|</span><br><span class="line">|  <span class="number">30</span>|   <span class="type">Andy</span>|</span><br><span class="line">|  <span class="number">19</span>| <span class="type">Justin</span>|</span><br><span class="line">+----+-------+</span><br></pre></td></tr></table></figure><h3 id="DasaSet转DataFrame"><a href="#DasaSet转DataFrame" class="headerlink" title="DasaSet转DataFrame"></a>DasaSet转DataFrame</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">Long</span></span>)</span></span><br><span class="line"><span class="class"><span class="title">defined</span> <span class="title">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">scala&gt;</span> <span class="title">val</span> <span class="title">ds</span> </span>= <span class="type">Seq</span>(<span class="type">Person</span>(<span class="string">"Andy"</span>, <span class="number">32</span>)).toDS()</span><br><span class="line">ds: org.apache.spark.sql.<span class="type">Dataset</span>[<span class="type">Person</span>] = [name: string, age: bigint]</span><br><span class="line"></span><br><span class="line">scala&gt; <span class="keyword">val</span> df = ds.toDF</span><br><span class="line">df: org.apache.spark.sql.<span class="type">DataFrame</span> = [name: string, age: bigint]</span><br><span class="line"></span><br><span class="line">scala&gt; df.show</span><br><span class="line">+----+---+</span><br><span class="line">|name|age|</span><br><span class="line">+----+---+</span><br><span class="line">|<span class="type">Andy</span>| <span class="number">32</span>|</span><br><span class="line">+----+---+</span><br></pre></td></tr></table></figure><h2 id="三者的互相转换"><a href="#三者的互相转换" class="headerlink" title="三者的互相转换"></a>三者的互相转换</h2><p><img src="/cn/bfb1/1569984874237.png" alt="1569984874237"></p><p>三者的共性</p><ol><li><code>RDD</code>、<code>DataFrame</code>、<code>Dataset</code>全都是spark平台下的分布式弹性数据集，为处理超大型数据提供便利;</li><li>三者都有惰性机制，在进行创建、转换，如<code>map</code>方法时，不会立即执行，只有在遇到<code>Action</code>如<code>foreach</code>时，三者才会开始遍历运算;</li><li>三者有许多共同的函数，如filter，排序等;</li><li>在对<code>DataFrame</code>和<code>Dataset</code>进行操作许多操作都需要导入隐式转换 <code>:import spark.implicits._</code>（在创建好<code>SparkSession</code>对象后尽量直接导入）</li></ol><p>编译器中的实现<br></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// from people.scala</span></span><br><span class="line"><span class="keyword">package</span> tech.mapan.bean</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">people</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">BigInt</span></span>)</span></span><br></pre></td></tr></table></figure><p></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// from SparkSQLTest.scala</span></span><br><span class="line"><span class="keyword">package</span> tech.mapan</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"><span class="keyword">import</span> tech.mapan.bean.people</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkSQLTest</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * DataFrame、DataSet、rdd之间的转换/ sparkSQL初步应用</span></span><br><span class="line"><span class="comment">    * @param args</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span>.builder().appName(<span class="string">"sparkSQL"</span>).master(<span class="string">"local[*]"</span>).getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line">    <span class="comment">// 从文件创建DataFrame</span></span><br><span class="line">    <span class="keyword">val</span> df = spark.read.json(<span class="string">"./src/main/resources/people.json"</span>)</span><br><span class="line">    df.show</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DataFrame转DataSet</span></span><br><span class="line">    <span class="keyword">val</span> ds = df.as[people]</span><br><span class="line">    ds.show</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DataFrame转rdd</span></span><br><span class="line">    <span class="keyword">val</span> rdd1 = df.rdd</span><br><span class="line">    rdd1.collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DataSet转rdd</span></span><br><span class="line">    <span class="keyword">val</span> rdd2 = ds.rdd</span><br><span class="line">    rdd2.collect().foreach(println)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建临时表</span></span><br><span class="line">    ds.createOrReplaceTempView(<span class="string">"persons"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sql查询年龄超过21岁的人。</span></span><br><span class="line">    spark.sql(<span class="string">"SELECT * FROM persons WHERE age &gt; 21"</span>).show</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// sql查询所有人年龄的和</span></span><br><span class="line">    spark.sql(<span class="string">"SELECT SUM(age) FROM persons"</span>).show</span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    spark.stop</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先进入spark-shell&lt;br&gt;&lt;/p&gt;&lt;figure class=&quot;highlight scala&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
      <category term="Spark" scheme="https://mapan.tech/cn/categories/Spark/"/>
    
    
  </entry>
  
  <entry>
    <title>SparkSQL概念</title>
    <link href="https://mapan.tech/cn/d275.html"/>
    <id>https://mapan.tech/cn/d275.html</id>
    <published>2018-08-14T00:50:38.000Z</published>
    <updated>2019-10-20T11:43:35.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Spark-SQL"><a href="#什么是Spark-SQL" class="headerlink" title="什么是Spark SQL"></a>什么是Spark SQL</h2><p>Spark SQL是Spark用来处理结构化数据的一个模块，它提供了2个编程抽象：DataFrame和DataSet，并且作为分布式SQL查询引擎的作用。</p><p>我们已经学习了Hive，它是将Hive SQL转换成MapReduce然后提交到集群上执行，大大简化了编写MapReduc的程序的复杂性，由于MapReduce这种计算模型执行效率比较慢。所有Spark SQL的应运而生，它是将Spark SQL转换成RDD，然后提交到集群执行，执行效率非常快！</p><h3 id="Spark-SQL的特点"><a href="#Spark-SQL的特点" class="headerlink" title="Spark SQL的特点"></a>Spark SQL的特点</h3><p>1）易整合<br><img src="/cn/d275/clip_image001.png" alt="img"></p><p>2）统一的数据访问方式<br><img src="/cn/d275/clip_image002.png" alt="img"></p><p>3）兼容Hive<br><img src="/cn/d275/clip_image003.png" alt="img"></p><p>4）标准的数据连接<br><img src="/cn/d275/clip_image004.png" alt="img"></p><h3 id="什么是DataFrame"><a href="#什么是DataFrame" class="headerlink" title="什么是DataFrame"></a>什么是DataFrame</h3><p>与RDD类似，DataFrame也是一个分布式数据容器。然而DataFrame更像传统数据库的二维表格，除了数据以外，还记录数据的结构信息，即schema。同时，与Hive类似，DataFrame也支持嵌套数据类型（struct、array和map）。从API易用性的角度上看，DataFrame API提供的是一套高层的关系操作，比函数式的RDD API要更加友好，门槛更低。<br><img src="/cn/d275/clip_image005.png" alt="img"></p><p>上图直观地体现了DataFrame和RDD的区别。左侧的RDD[Person]虽然以Person为类型参数，但Spark框架本身不了解Person类的内部结构。而右侧的DataFrame却提供了详细的结构信息，使得Spark SQL可以清楚地知道该数据集中包含哪些列，每列的名称和类型各是什么。DataFrame是为数据提供了Schema的视图。可以把它当做数据库中的一张表来对待，DataFrame也是懒执行的。性能上比RDD要高，主要原因：</p><p>优化的执行计划：查询计划通过Spark catalyst optimiser进行优化。<br><img src="/cn/d275/clip_image006.png" alt="img"></p><p>比如下面一个例子：</p><p><img src="/cn/d275/clip_image007.png" alt="img"><br><img src="/cn/d275/clip_image008.png" alt="img"></p><p>为了说明查询优化，我们来看上图展示的人口数据分析的示例。图中构造了两个DataFrame，将它们join之后又做了一次filter操作。如果原封不动地执行这个执行计划，最终的执行效率是不高的。因为join是一个代价较大的操作，也可能会产生一个较大的数据集。如果我们能将filter下推到 join下方，先对DataFrame进行过滤，再join过滤后的较小的结果集，便可以有效缩短执行时间。而Spark SQL的查询优化器正是这样做的。简而言之，逻辑查询计划优化就是一个利用基于关系代数的等价变换，将高成本的操作替换为低成本操作的过程。</p><h3 id="什么是DataSet"><a href="#什么是DataSet" class="headerlink" title="什么是DataSet"></a>什么是DataSet</h3><p>1）是Dataframe API的一个扩展，是Spark最新的数据抽象。<br>2）用户友好的API风格，既具有类型安全检查也具有Dataframe的查询优化特性。<br>3）Dataset支持编解码器，当需要访问非堆上的数据时可以避免反序列化整个对象，提高了效率。<br>4）样例类被用来在Dataset中定义数据的结构信息，样例类中每个属性的名称直接映射到DataSet中的字段名称。<br>5） Dataframe是Dataset的特列，DataFrame=Dataset[Row] ，所以可以通过as方法将Dataframe转换为Dataset。Row是一个类型，跟Car、Person这些的类型一样，所有的表结构信息我都用Row来表示。<br>6）DataSet是强类型的。比如可以有Dataset[Car]，Dataset[Person].<br>7）DataFrame只是知道字段，但是不知道字段的类型，所以在执行这些操作的时候是没办法在编译的时候检查是否类型失败的，比如你可以对一个String进行减法操作，在执行的时候才报错，而DataSet不仅仅知道字段，而且知道字段类型，所以有更严格的错误检查。就跟JSON对象和类对象之间的类比。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是Spark-SQL&quot;&gt;&lt;a href=&quot;#什么是Spark-SQL&quot; class=&quot;headerlink&quot; title=&quot;什么是Spark SQL&quot;&gt;&lt;/a&gt;什么是Spark SQL&lt;/h2&gt;&lt;p&gt;Spark SQL是Spark用来处理结构化数据的一个模块，
      
    
    </summary>
    
      <category term="Spark" scheme="https://mapan.tech/cn/categories/Spark/"/>
    
    
  </entry>
  
  <entry>
    <title>MR的shuffle过程</title>
    <link href="https://mapan.tech/cn/5119.html"/>
    <id>https://mapan.tech/cn/5119.html</id>
    <published>2018-05-16T10:48:56.000Z</published>
    <updated>2019-12-28T05:31:11.190Z</updated>
    
    <content type="html"><![CDATA[<p>1）MapReduce计算模型主要由两个阶段构成：Map、Reduce，其中在Map方法之后，Reduce方法之前的这段处理过程叫Shuffle。</p><p><img src="/cn/5119/20151017151302759" alt="这里写图片描述"></p><p>2）Map方法之后，数据首先进入到分区方法，把数据标记好分区，然后把数据发送到环形缓冲区；环形缓冲区默认大小100m，环形缓冲区达到80%时，进行溢写；溢写前对数据进行排序，排序按照对key的索引进行字典顺序排序，排序的手段为快排；溢写产生大量的溢写文件，需要对溢写文件进行归并排序；对溢写的文件也可以进行Combiner操作，前提是汇总操作，求平均值不行。最后将文件按照分区存储到磁盘，等待Reduce端拉取。</p><p><img src="/cn/5119/20151017160804118" alt="这里写图片描述"></p><p>3）每个Reduce拉取Map端对应分区的数据。拉取数据后先存储到内存中，内存不够了，再存储到磁盘。拉取完所有数据后，采用归并排序将内存和磁盘中的数据都进行排序。在进入Reduce方法前，可以对数据进行分组操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1）MapReduce计算模型主要由两个阶段构成：Map、Reduce，其中在Map方法之后，Reduce方法之前的这段处理过程叫Shuffle。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/cn/5119/20151017151302759&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;&lt;
      
    
    </summary>
    
      <category term="Hadoop" scheme="https://mapan.tech/cn/categories/Hadoop/"/>
    
    
  </entry>
  
  <entry>
    <title>戴明环在自我管理中的应用</title>
    <link href="https://mapan.tech/cn/a2ab.html"/>
    <id>https://mapan.tech/cn/a2ab.html</id>
    <published>2018-04-19T14:31:54.000Z</published>
    <updated>2018-04-19T16:49:12.515Z</updated>
    
    <content type="html"><![CDATA[<p>PDCA是英语单词Plan(计划)、Do(执行)、Check(检查)和Action(调整)的第一个字母，PDCA循环就是按照这样的顺序进行质量管理，并且循环不止地进行下去的科学程序。PDCA循环是美国质量管理专家休哈特博士首先提出的，由戴明采纳、宣传，获得普及，所以又称戴明环。</p><blockquote><p>1、P (plan) 计划</p></blockquote><p>包括方针和目标的确定，以及活动规划的制定。</p><blockquote><p>2、D (Do) 执行</p></blockquote><p>根据已知的信息，设计具体的方法、方案和计划布局；再根据设计和布局，进行具体运作，实现计划中的内容。</p><blockquote><p>3、C (check) 检查</p></blockquote><p>总结执行计划的结果，分清哪些对了，哪些错了，明确效果，找出问题。</p><blockquote><p>4、A (Adjust)调整</p></blockquote><p>对总结检查的结果进行处理，对成功的经验加以肯定，并予以标准化；对于失败的教训也要总结，引起重视。对于没有解决的问题，应提交给下一个PDCA循环中去解决</p><p><img src="https://ws1.sinaimg.cn/large/005vwoCyly1fqiclsttvsj30dw09h74f.jpg" alt></p><hr><p>上面是<a href="https://baike.baidu.com/item/PDCA%E5%BE%AA%E7%8E%AF">百度百科</a>给出的定义与解释，有按照自己理解轻微改动。戴明环是一种企业管理方法，现在我觉得<br><strong>应用在个人的自我管理当中也是非常好的一种方法</strong><br>近期我在制定自己的学习规划和时间规划，就是按照这样的方法一直循环下去。觉得完全可以作为个人管理的一种高效方法。通过几轮循环，自己的计划越来越适合自己，越来越接近完美。</p><h4 id="制定计划-—-gt-执行-—-gt-检查-—-gt-调整-···"><a href="#制定计划-—-gt-执行-—-gt-检查-—-gt-调整-···" class="headerlink" title="制定计划 —&gt; 执行 —&gt; 检查 —&gt; 调整 ···"></a>制定计划 —&gt; 执行 —&gt; 检查 —&gt; 调整 ···</h4><p>举个例子，要考研的小明同学想制定时间规划，计划每天学习12h，他制定了下面的时间表。这就是<strong>Plan阶段</strong>。</p><blockquote><p>06:30 - 07:00 起床&amp;&amp;洗漱<br>08:00 - 13:00 数学<br>14:30 - 19:00 数据结构<br>20:00 - 21:00 数学<br>22:00 - 23:30 英语<br>00:00 - 06:30 睡觉</p></blockquote><p>小明最初的计划是这样的，很认真的执行了半个月，现在是属于<strong>Do阶段</strong>。<br>慢慢的小明发现，在下午的14:30 - 15:30 学习效率极低，而在晚上23:30达到一天中最高的学习效率。<br>小明分析效率低是由于中午吃过午饭，身体血液涌向消化系统，大脑血液含量下降，脑子转的速度变慢，效率变低。而晚上睡前，一天的学习虽然疲倦但是夜幕降临，丰富的夜生活开始，大脑变得兴奋，效率也急剧提高。那么现在是属于<strong>Check阶段</strong>。</p><p>小明决定调整复习计划，把效率最低的时间段去安排到别的事情上，把效率最高的时间段做延长调整，这个阶段成为<strong>Adjust阶段</strong>。</p><p>小明重新制定计划：</p><blockquote><p>07:00 - 07:30 起床&amp;&amp;洗漱<br>08:00 - 13:00 数学<br>14:30 - 15:30 散步&amp;&amp;单词记忆<br>15:30 - 19:00 数据结构<br>20:00 - 21:00 数学<br>22:00 - 23:30 英语<br>23:30 - 00:30 数据结构<br>00:30 - 07:00 睡觉</p></blockquote><p>那么现在属于第二轮的PDCA循环的<strong>P阶段</strong>，依此类推，一个一个循环下去，这个计划会越来越适合小明。</p><hr><p>每个戴明环的阶段，也可以有小戴明环，形成了大环套小环的状态，如下图。<br>举个例子，还是上文的小明，小明在Do阶段，即按照计划学习阶段，制定了英语学习计划，作文，阅读理解，翻译等等怎么怎么学习，这是可执行的一个小戴明环。在作文学习中，分为画图说话，书信，引言等几类作文，每一类作文的格式是什么，计划怎么学习，这又可以细化为小的戴明环。<br><img src="https://ws1.sinaimg.cn/large/005vwoCyly1fqidwdf402j306j065mxe.jpg" alt></p><p>如果用在一个更大更长远的目标上呢？如下图，把大目标分解为阶段目标，阶段目标细化落实为行动，这样一个大的目标就会越来越清晰，能感受到距离目标越来越近。当a、b、c、d达到时，你就完成了1，当1、2、3、4完成时，你就实现了目标A。</p><p><img src="https://ws1.sinaimg.cn/large/005vwoCyly1fqig6815x6j30g00f9t99.jpg" alt></p><p>这是一个神奇的管理方法，不仅在质量管理上用处颇大，在个人的自我管理上也是非常好的方法。</p><p>如果真正的做到了，那么这种可以<strong><a href="#jump1">控制自我</a></strong>的快感和愉悦是难以用语言来分享的。</p><hr><p><span id="jump1">控制自我</span> : 这里的控制自我指的是<strong>在大的时间跨度上，能够通过自我规划和管理实现自身意愿</strong>。而不是抬抬左手，左手就能抬起来的这种控制。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;PDCA是英语单词Plan(计划)、Do(执行)、Check(检查)和Action(调整)的第一个字母，PDCA循环就是按照这样的顺序进行质量管理，并且循环不止地进行下去的科学程序。PDCA循环是美国质量管理专家休哈特博士首先提出的，由戴明采纳、宣传，获得普及，所以又称戴明
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使Hexo文章图文并茂</title>
    <link href="https://mapan.tech/cn/c9c3.html"/>
    <id>https://mapan.tech/cn/c9c3.html</id>
    <published>2018-04-11T13:35:10.000Z</published>
    <updated>2019-10-18T15:50:37.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="此方法已经失效"><a href="#此方法已经失效" class="headerlink" title="此方法已经失效"></a><del>此方法已经失效</del></h1><p>在上一篇<a href="http://localhost:4000/posts/e10b.html">零基础HEXO搭建博客教程</a>中，陆续有人咨询一些问题，就常见问题做一个回答，本文介绍如何写图文并茂的博客文章。</p><p>在Coding上我们的项目大小只有128M/256M/512M，反正我的是256M，也许你的是仓库容量是128M（普通会员），升级绑定腾讯云后壳升级为银牌会员512M仓库容量。<br><img src="https://ws1.sinaimg.cn/large/005vwoCyly1fq9259sme6j304w02s743.jpg" alt></p><p>总之不管128/256/512M，对于一个网站来说，如果图片和视频多的话，那是不太够的。今天介绍一种节省空间的方法，使用图床。</p><p>什么是图床，我不解释了，看<a href="https://baike.baidu.com/item/%E5%9B%BE%E5%BA%8A/10721348?fr=aladdin">百度百科</a>自己了解下。<br>首先提供图床服务的有很多，收费的免费的各种。今天我们使用的是新浪微博提供的微博图床。此图床需要chrome浏览器配合图床插件使用。<br>有科学上网条件的童鞋，请在谷歌应用商店搜索关键词<code>新浪微博</code>然后安装下图所示插件。<br><img src="https://ws1.sinaimg.cn/mw690/005vwoCyly1fq92g9fjemj30xh0een0k.jpg" alt></p><p>没条件的同学可以去<a href="https://www.crx4chrome.com/extensions/fdfdnfpdplfbbnemmmoklbfjbhecpnhf/">镜像站点</a>安装<br><img src="https://ws1.sinaimg.cn/mw690/005vwoCyly1fq92jtqkk2j30y40j5n1g.jpg" alt></p><p>安装完成之后，在浏览器的右上角会出现一个这样的图标<br><img src="https://ws1.sinaimg.cn/large/005vwoCyly1fq92lstdtoj305504kglm.jpg" alt><br>我们点一下，会弹出一个窗口，如下图所示<br><img src="https://ws1.sinaimg.cn/large/005vwoCyly1fq92mv6u5lj30lu0f3q3h.jpg" alt></p><p>现在随便拖进去一张图片会弹出让我们登录新浪微博，登录自己微博账号即可。<br>下次再拖进进去一张图片，就会弹出如下图所示。<br><img src="https://ws1.sinaimg.cn/mw690/005vwoCyly1fq92op8cgzj30lq0f2my6.jpg" alt><br>我们选择markdown（原图、中等尺寸、缩略图 分别对应大、中、小三个尺寸，按自己需求选择）点复制即可，把复制的链接粘贴到我们文章所需要的地方，即可。如下图<br><img src="https://ws1.sinaimg.cn/mw690/005vwoCyly1fq92rkf6oej30rc0e0di6.jpg" alt></p><p>然后就可以愉快写图文并茂的文章了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;此方法已经失效&quot;&gt;&lt;a href=&quot;#此方法已经失效&quot; class=&quot;headerlink&quot; title=&quot;此方法已经失效&quot;&gt;&lt;/a&gt;&lt;del&gt;此方法已经失效&lt;/del&gt;&lt;/h1&gt;&lt;p&gt;在上一篇&lt;a href=&quot;http://localhost:4000/post
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HEXO优化之GULP</title>
    <link href="https://mapan.tech/cn/8f24.html"/>
    <id>https://mapan.tech/cn/8f24.html</id>
    <published>2018-03-15T15:58:10.000Z</published>
    <updated>2018-04-20T05:23:28.630Z</updated>
    
    <content type="html"><![CDATA[<p>现在你可以鼠标右键单击空白处，选择查看源代码。<br><img src="https://ws1.sinaimg.cn/large/005vwoCyly1fqj1veoox6j30eb0awmxe.jpg" alt><br>你会发现本页面只有一行代码。把网页文件中的空格换行和注释等删除，可以在一定程度上减小网页的文件大小，进而加快访问速度，这就是网页压缩。</p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><h4 id="什么是Gulp"><a href="#什么是Gulp" class="headerlink" title="什么是Gulp"></a>什么是Gulp</h4><p>gulp.js是一种基于流的，代码优于配置的新一代构建工具.</p><p>Gulp和Grunt类似。但相比于 Grunt 的频繁的 I/O 操作，Gulp 的流操作，能更快地完成构建</p><h3 id="Gulp特性"><a href="#Gulp特性" class="headerlink" title="Gulp特性"></a>Gulp特性</h3><h4 id="使用方便"><a href="#使用方便" class="headerlink" title="使用方便"></a>使用方便</h4><p>通过代码优于配置的策略，Gulp可以让简单的任务简单，复杂的任务更可管理。</p><h4 id="构建快速"><a href="#构建快速" class="headerlink" title="构建快速"></a>构建快速</h4><p>通过流式操作，减少频繁的 IO 操作，更快地构建项目。</p><h4 id="插件高质"><a href="#插件高质" class="headerlink" title="插件高质"></a>插件高质</h4><p>Gulp 有严格的插件指导策略，确保插件能简单高质的工作。</p><h4 id="易于学习"><a href="#易于学习" class="headerlink" title="易于学习"></a>易于学习</h4><p>少量的API，掌握Gulp可以毫不费力。构建就像流管道一样，轻松加愉快。</p><h3 id="Gulp安装"><a href="#Gulp安装" class="headerlink" title="Gulp安装"></a>Gulp安装</h3><p>Gulp是基于Node.js的，故要首先安装 Node.js。</p><p><code>npm install -g gulp</code></p><p>然后按以下清单文件安装<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br><span class="line">gulp-htmlclean</span><br><span class="line">gulp-htmlmin</span><br><span class="line">gulp-minify-css</span><br><span class="line">gulp-clean-css</span><br><span class="line">gulp-uglify</span><br></pre></td></tr></table></figure><p></p><p>方法是同样的,<code>npm install xxx --save</code>，xxx即为清单列表文件名</p><p>其中gulp是工程的核心程序，Gulp采用插件方式进行工作，下面的5个文件就是基于Gulp的插件.Gulp插件列表</p><h3 id="使用Gulp优化Hexo"><a href="#使用Gulp优化Hexo" class="headerlink" title="使用Gulp优化Hexo"></a>使用Gulp优化Hexo</h3><p>建立gulpfile.js<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line">var cleancss = require(&apos;gulp-clean-css&apos;);</span><br><span class="line">var uglify = require(&apos;gulp-uglify&apos;);</span><br><span class="line">var htmlmin = require(&apos;gulp-htmlmin&apos;);</span><br><span class="line">var htmlclean = require(&apos;gulp-htmlclean&apos;);</span><br><span class="line">//  css</span><br><span class="line">gulp.task(&apos;minify-css&apos;, () =&gt; &#123;</span><br><span class="line">    return gulp.src([&apos;./public/**/*.css&apos;,&apos;!./public/**/*.min.css&apos;])</span><br><span class="line">        .pipe(cleancss())</span><br><span class="line">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//  html</span><br><span class="line">gulp.task(&apos;minify-html&apos;, function() &#123;</span><br><span class="line">  return gulp.src(&apos;./public/**/*.html&apos;)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">         removeComments: true,</span><br><span class="line">         minifyJS: true,</span><br><span class="line">         minifyCSS: true,</span><br><span class="line">         minifyURLs: true,</span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(gulp.dest(&apos;./public&apos;))</span><br><span class="line">&#125;);</span><br><span class="line">// js</span><br><span class="line">gulp.task(&apos;minify-js&apos;, function() &#123;</span><br><span class="line">    return gulp.src([&apos;./public/**/*.js&apos;,&apos;!./public/assets/js/*.js&apos;])</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">&#125;);</span><br><span class="line">// </span><br><span class="line">gulp.task(&apos;default&apos;, [</span><br><span class="line">    &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>要运行gulp任务，只需切换到存放gulpfile.js文件的目录，然后在终端中执行gulp命令就行了，gulp后面可以加上要执行的任务名，例如gulp task1，如果没有指定任务名，则会执行任务名为default的默认任务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在你可以鼠标右键单击空白处，选择查看源代码。&lt;br&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/005vwoCyly1fqj1veoox6j30eb0awmxe.jpg&quot; alt&gt;&lt;br&gt;你会发现本页面只有一行代码。把网页文件中的空格换行
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spark共享变量底层实现</title>
    <link href="https://mapan.tech/cn/683.html"/>
    <id>https://mapan.tech/cn/683.html</id>
    <published>2018-02-24T00:16:54.000Z</published>
    <updated>2019-10-20T12:41:32.223Z</updated>
    
    <content type="html"><![CDATA[<p>Spark一个非常重要的特性就是共享变量。</p><p>默认情况下，如果在一个算子的函数中使用到了某个外部的变量，那么这个变量的值会被拷贝到每个task中，此时每个task只能操作自己的那份变量副本。如果多个task想要共享某个变量，那么这种方式是做不到的。</p><p>Spark为此提供了两种共享变量，一种是Broadcast Variable（广播变量），另一种是Accumulator（累加变量）。Broadcast Variable会将用到的变量，仅仅为每个节点拷贝一份，即每个Executor拷贝一份，更大的用途是优化性能，减少网络传输以及内存损耗。Accumulator则可以让多个task共同操作一份变量，主要可以进行累加操作。Broadcast Variable是共享读变量，task不能去修改它，而Accumulator可以让多个task操作一个变量。</p><h2 id="广播变量"><a href="#广播变量" class="headerlink" title="广播变量"></a><strong>广播变量</strong></h2><p>广播变量允许编程者在每个Executor上保留外部数据的只读变量，而不是给每个任务发送一个副本。</p><p>每个task都会保存一份它所使用的外部变量的副本，当一个Executor上的多个task都使用一个大型外部变量时，对于Executor内存的消耗是非常大的，因此，我们可以将大型外部变量封装为广播变量，此时一个Executor保存一个变量副本，此Executor上的所有task共用此变量，不再是一个task单独保存一个副本，这在一定程度上降低了Spark任务的内存占用。</p><p><img src="/cn/683/clip_image001.jpg" alt="img"></p><p>task使用外部变量</p><p><img src="/cn/683/clip_image002.jpg" alt="img"></p><p>使用广播变量</p><p>Spark还尝试使用高效的广播算法分发广播变量，以降低通信成本。</p><p>Spark提供的Broadcast Variable是只读的，并且在每个Executor上只会有一个副本，而不会为每个task都拷贝一份副本，因此，它的最大作用，就是减少变量到各个节点的网络传输消耗，以及在各个节点上的内存消耗。此外，Spark内部也使用了高效的广播算法来减少网络消耗。</p><p>可以通过调用SparkContext的broadcast()方法来针对每个变量创建广播变量。然后在算子的函数内，使用到广播变量时，每个Executor只会拷贝一份副本了，每个task可以使用广播变量的value()方法获取值。</p><p>在任务运行时，Executor并不获取广播变量，当task执行到 使用广播变量的代码时，会向Executor的内存中请求广播变量，如下图所示：</p><p><img src="/cn/683/clip_image003.jpg" alt="img"></p><p>task向Executor请求广播变量</p><p>之后Executor会通过BlockManager向Driver拉取广播变量，然后提供给task进行使用，如下图所示：</p><p><img src="/cn/683/clip_image004.jpg" alt="img"></p><p>Executor从Driver拉取广播变量</p><p>广播大变量是Spark中常用的基础优化方法，通过减少内存占用实现任务执行性能的提升。</p><h2 id="累加器"><a href="#累加器" class="headerlink" title="累加器"></a><strong>累加器</strong></h2><p>累加器（accumulator）：Accumulator是仅仅被相关操作累加的变量，因此可以在并行中被有效地支持。它们可用于实现计数器（如MapReduce）或总和计数。</p><p>Accumulator是存在于Driver端的，集群上运行的task进行Accumulator的累加，随后把值发到Driver端，在Driver端汇总（Spark UI在SparkContext创建时被创建，即在Driver端被创建，因此它可以读取Accumulator的数值），由于Accumulator存在于Driver端，从节点读取不到Accumulator的数值。</p><p>Spark提供的Accumulator主要用于多个节点对一个变量进行共享性的操作。Accumulator只提供了累加的功能，但是却给我们提供了多个task对于同一个变量并行操作的功能，但是task只能对Accumulator进行累加操作，不能读取它的值，只有Driver程序可以读取Accumulator的值。</p><p>Accumulator的底层原理如下图所示：</p><p><img src="/cn/683/clip_image005.jpg" alt="img"></p><p>累加器原理</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spark一个非常重要的特性就是共享变量。&lt;/p&gt;&lt;p&gt;默认情况下，如果在一个算子的函数中使用到了某个外部的变量，那么这个变量的值会被拷贝到每个task中，此时每个task只能操作自己的那份变量副本。如果多个task想要共享某个变量，那么这种方式是做不到的。&lt;/p&gt;&lt;p&gt;S
      
    
    </summary>
    
      <category term="Spark" scheme="https://mapan.tech/cn/categories/Spark/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Hexo写文章</title>
    <link href="https://mapan.tech/cn/2b94.html"/>
    <id>https://mapan.tech/cn/2b94.html</id>
    <published>2018-01-07T01:31:16.000Z</published>
    <updated>2019-10-18T15:47:23.375Z</updated>
    
    <content type="html"><![CDATA[<p>为了帮助广大电子爱好者建立自己的独立博客，形成记录思考的习惯。上个月写了一篇<a href="https://mapan.tech/posts/e10b.html" target="_blank">怎样创建个人独立博客网站的文章</a>。没想到会有这么多的反响，有很多朋友就细节问题来咨询。<br>今天有时间整理一下网站搭建好以后，如何更新文章。</p><h3 id="1-本地写文章"><a href="#1-本地写文章" class="headerlink" title="1.本地写文章"></a>1.本地写文章</h3><p>选中你的Blog文件夹(我这里选择的是我自己重命名过的),鼠标右键单击，选择<code>Git Bash Here</code><br><img src="/cn/2b94/005vwoCyly1fn7sob24o7j30b00ajt9k.jpg" alt></p><h5 id="1-1-新建文章"><a href="#1-1-新建文章" class="headerlink" title="1.1 新建文章"></a>1.1 新建文章</h5><p>输入指令<code>hexo new XXX</code> 如下图xxx为文章标题，根据自己情况写。<br><img src="https://ws1.sinaimg.cn/large/005vwoCyly1fn7srydq0fj30cv01nq2t.jpg" alt><br>完成后会提示 在<code>.../Blog/source/_post/</code>目录下创建了xxx.md</p><h5 id="1-2-写文章"><a href="#1-2-写文章" class="headerlink" title="1.2 写文章"></a>1.2 写文章</h5><p>我们根据提示的目录，找到这个文件，然后使用编辑器打开。<br><img src="https://ws1.sinaimg.cn/large/005vwoCyly1fn7sx0jdg7j30h8057gma.jpg" alt><br>我这里使用的是Sublime,你可以使用自己喜欢的编辑器。<br>打开后如图所示，可以开始写文章了,写完后请<code>Ctrl+S</code>保存。<br><img src="/cn/2b94/005vwoCyly1fn7sz7kug4j30v80i4tc4.jpg" alt><br>关于Markdown可以看我这篇文章<a href="https://mapan.tech/posts/b33e.html" target="_blank">Markdown语法和MD编辑器</a></p><h5 id="1-3如何在文章插入图片？"><a href="#1-3如何在文章插入图片？" class="headerlink" title="1.3如何在文章插入图片？"></a>1.3如何在文章插入图片？</h5><p>可以看我这篇文章 <a href="/posts/c9c3.html" target="_blank">使Hexo文章图文并茂</a></p><h3 id="2-本地预览-非必要，可选"><a href="#2-本地预览-非必要，可选" class="headerlink" title="2.本地预览 (非必要，可选)"></a>2.本地预览 (非必要，可选)</h3><p>在编辑文章过程中，我们肯定不想频繁的部署，查看效果。这时候使用<code>hexo s</code>指令进行本地预览，文章编辑完成，且自己满意后，再进行部署。<br>提示<code>INFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</code><br>这句信息含义是“网站已经运行在本地 <code>http://locahost:4000/</code> ,按<code>Ctrl+C</code>可以停止预览”。<br>我们不要按<code>Ctrl+C</code>，现在直接浏览器打开 <a href="http://locahost:4000/">http://locahost:4000/</a> 即可看到预览效果。<br><img src="https://ws1.sinaimg.cn/large/005vwoCyly1fn7tv4nqsoj30fw09zgmi.jpg" alt></p><h3 id="3-渲染并部署网站"><a href="#3-渲染并部署网站" class="headerlink" title="3.渲染并部署网站"></a>3.渲染并部署网站</h3><h5 id="3-1-hexo-g渲染生成网站"><a href="#3-1-hexo-g渲染生成网站" class="headerlink" title="3.1 hexo g渲染生成网站"></a>3.1 <code>hexo g</code>渲染生成网站</h5><p>现在我们文章已经写好，预览也比较满意。现在可以<code>Ctrl+C</code>停止预览，然后<code>hexo g</code>渲染出整套网站代码(你可以在<code>../Blog/public/</code>文件夹下看到整套网站的代码)。<br><img src="https://ws1.sinaimg.cn/large/005vwoCyly1fn7t2ivla5j30g705ijrj.jpg" alt><br>渲染完成后，info提示信息:使用2.01秒生成了74个文件,这表示完成了渲染。<br><img src="https://ws1.sinaimg.cn/large/005vwoCyly1fn7t59khztj30g609bglx.jpg" alt></p><h5 id="3-2-hexo-d部署网站-把渲染好的html等网站文件，上传到Coding服务器"><a href="#3-2-hexo-d部署网站-把渲染好的html等网站文件，上传到Coding服务器" class="headerlink" title="3.2 hexo d部署网站(把渲染好的html等网站文件，上传到Coding服务器)"></a>3.2 <code>hexo d</code>部署网站(把渲染好的html等网站文件，上传到Coding服务器)</h5><p>如图，除了黄色框框内的信息或许没有，其他都应该有。<br><img src="https://ws1.sinaimg.cn/large/005vwoCyly1fn7tdc765xj30g40h3ab4.jpg" alt><br>最后一句<code>INFO Deploy done: git</code>表示部署已完成。</p><blockquote><p>写新文章请重复步骤 1—&gt;3</p></blockquote><hr><p>请 <strong>每次执行完命令后 查看命令窗口返回的信息</strong> ，有很多童鞋闷头敲指令，报错了也不管。这样前面有<strong>ERROR</strong>的话，后面的指令就肯定报错。很多步骤都是活的，并不是一成不变不可变通，当你知道他的含义之后，就可以随心所欲，怎么来都行。刚开始不熟悉还是建议按照教程来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了帮助广大电子爱好者建立自己的独立博客，形成记录思考的习惯。上个月写了一篇&lt;a href=&quot;https://mapan.tech/posts/e10b.html&quot; target=&quot;_blank&quot;&gt;怎样创建个人独立博客网站的文章&lt;/a&gt;。没想到会有这么多的反响，有很多朋友就
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hive管理表和外部表</title>
    <link href="https://mapan.tech/cn/9f73.html"/>
    <id>https://mapan.tech/cn/9f73.html</id>
    <published>2018-01-02T12:35:12.000Z</published>
    <updated>2019-10-20T11:48:29.879Z</updated>
    
    <content type="html"><![CDATA[<p>管理表<br>我们目前所创建的标都是所谓的管理表，有时也会被称为内部表，因为这种表，Hive会控制着数据的生命周期。正如我们所看见的，Hive默认情况下会将这些表的数据存储在由配置项hive.metastore.dir所定义的目录的子目录下。</p><p>管理表不方便和其他工作共享数据，例如，假设我们有一份有pig或者其他工具创建并且主要有这一工具使用的数据，同时我们还想使用Hive在这份数据上执行一些查询，可是并没有给与Hive对数据的所有权，我们可以创建一个外部表指向这份数据，而并不需要对其拥有所有权。</p><p>外部表<br>因为表是外部的，所以Hive并非认为其完全拥有这份数据。因此，删除该表并不会删除掉这份数据，不过描述表的元数据信息会被删除掉。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;管理表&lt;br&gt;我们目前所创建的标都是所谓的管理表，有时也会被称为内部表，因为这种表，Hive会控制着数据的生命周期。正如我们所看见的，Hive默认情况下会将这些表的数据存储在由配置项hive.metastore.dir所定义的目录的子目录下。&lt;/p&gt;&lt;p&gt;管理表不方便和其他
      
    
    </summary>
    
      <category term="数据库" scheme="https://mapan.tech/cn/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>密码和方言</title>
    <link href="https://mapan.tech/cn/3e9.html"/>
    <id>https://mapan.tech/cn/3e9.html</id>
    <published>2017-12-26T12:38:10.000Z</published>
    <updated>2019-10-20T12:40:16.560Z</updated>
    
    <content type="html"><![CDATA[<p>今天在思考一个问题，如何加密数据才能让自己的通信更安全。诸如我们所使用的微信和QQ、短信等，均有可能被第三方监视和窃取。在这个大数据的时代，自己怎么才能不<strong>被</strong>大数据了呢？</p><p>今天上班走在路上听见前面阿姨大妈用上海话叽里呱啦的说话，我一句也听不懂。忽然脑袋里就跳出一个想法，对我来说这不就是所谓的加密了么？</p><p>如果把每个人都看成一个系统，那么两个系统之间的通信，可以被中间者窃听，但是能不能解码出其中的含义就不一定了。</p><blockquote><p>普通话就是为了人与人沟通方便，而约定的一种<code>开源</code>的沟通传递工具语言。</p><p>每个人都会说，能听得懂。对每个人来说，相当于明文。</p><p>对外地人来说，上海话听不懂，在自己的语言系统中，听不懂。上海话就是一个经过加密的信息，密钥就是上海话的说法，说上海话就是加密，听上海话就是解密。</p><p>上海人即能听得懂，又会说的出。这样就完成了最基本的加密解密。</p></blockquote><p>抛开通信的原理不讲，只当通信系统是一个黑盒，微信和QQ是一个黑盒。在这个黑盒实现通信的过程中，是经过第三方的服务器的，数据是有可能<strong>被</strong>大数据的。</p><p>为了保障被践踏的隐私权，我们怎么办呢？</p><p>回到上海阿姨说上海话，如果上海话只有谈话间的阿姨两个人可以听得懂，那么这次谈话就是安全的。在这次安全的通信中，上海话充当了密钥的作用。</p><p>由于上海话即可以说也可以听，所以就充当了加密和解密的两个作用，所以属于对称加密。</p><blockquote><p>这样一来，上海话就是属于一种对称加密算法。</p></blockquote><p>我在想，可以借助如微信、QQ等现有的通信工具，实现简单的通信加密。在发送信息之前，发送的信息经过RSA非对称算法加密，对方收到的消息是一堆乱码。经过密钥解密之后，才可以看到真实的信息。实现类似的效果：</p><blockquote><p>A: Gjhk89kjh89HKJ)6%76GHBJk7T%^90hlkG&amp;^</p><p>B: &amp;(HG^8ThhniJ09(yhKH89^Y&amp;^)ijlGyih()uij)</p><p>A: asdBH和ugdas82^9780HJ#@56gh^Jk0U5</p><p>B: #$khj)j^JjY8jLK;p-)978&amp;^667yh^%%$</p><p>A: HJh&amp;uhy速JKHJuu6hH”sd9kG%j%ijH_=Its</p><p>B: ASHGd876asd5%$^f%^TTG7G&amp;g7y78T6rt%R%5e</p></blockquote><hr><p>自己太菜，并没有技术能力实现。只是灵机一动的想法，如果有机会再去学习相关知识，先马一下自己灵感。</p><hr><p>琢磨了一下，需要安卓手机安装Xposed，还要写相对应的框架，自己微信和QQ还有被封的风险，还是算了吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在思考一个问题，如何加密数据才能让自己的通信更安全。诸如我们所使用的微信和QQ、短信等，均有可能被第三方监视和窃取。在这个大数据的时代，自己怎么才能不&lt;strong&gt;被&lt;/strong&gt;大数据了呢？&lt;/p&gt;&lt;p&gt;今天上班走在路上听见前面阿姨大妈用上海话叽里呱啦的说话，我
      
    
    </summary>
    
      <category term="灵感一现" scheme="https://mapan.tech/cn/categories/%E7%81%B5%E6%84%9F%E4%B8%80%E7%8E%B0/"/>
    
    
  </entry>
  
</feed>
